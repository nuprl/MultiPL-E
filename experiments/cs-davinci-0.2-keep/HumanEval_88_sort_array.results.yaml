language: cs
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var result = new List<long>();\n        if (array.Count ==\
    \ 0) {\n            return result;\n        }\n        if (array.Count == 1) {\n\
    \            result.Add(array[0]);\n            return result;\n        }\n  \
    \      var sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0141e978d9434185b5b6b90be36a9cce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0141e978d9434185b5b6b90be36a9cce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <72569c091720409fa30f54304170479f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <72569c091720409fa30f54304170479f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        bool isEven = (array[0] + array[array.Count - 1])\
    \ % 2 == 0;\n        if (isEven) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4540f740fa67484ba840bd5f1c974982>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4540f740fa67484ba840bd5f1c974982>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <841af293e22b4bad8f29e8a08419efc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <841af293e22b4bad8f29e8a08419efc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n\
    \        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n       \
    \ }\n        return array;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bba9f35b04cee84ac98dc3e58cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bba9f35b04cee84ac98dc3e58cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        long sum = array[0] + array[array.Count - 1];\n \
    \       if (sum % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n\
    \        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n       \
    \ }\n        return array;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f367138707e4cb7b070813accce20de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f367138707e4cb7b070813accce20de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here.\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef52bd2937284beb8ed38591434bec6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef52bd2937284beb8ed38591434bec6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var result = new List<long>();\n        if (array.Count ==\
    \ 0) {\n            return result;\n        }\n        if (array.Count == 1) {\n\
    \            result.Add(array[0]);\n            return result;\n        }\n  \
    \      var sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0)\
    \ {\n            result = array.OrderByDescending(x => x).ToList();\n        }\
    \ else {\n            result = array.OrderBy(x => x).ToList();\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55f8d4535f044fee81bad3acfae5e988>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55f8d4535f044fee81bad3acfae5e988>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <40bf4705acc6406c9a63a11584d2774e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <40bf4705acc6406c9a63a11584d2774e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        long sum = array[0] + array[array.Count - 1];\n        if (sum % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var sum = array[0] + array[array.Count - 1];\n        if (sum\
    \ % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        } else\
    \ {\n            array.Sort((a, b) => (int)(a - b));\n        }\n        return\
    \ array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             var temp = array[0];\n                array[0] = array[1];\n   \
    \             array[1] = temp;\n            }\n            return array;\n   \
    \     }\n        var sum = array[0] + array[array.Count - 1];\n        if (sum\
    \ % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        } else\
    \ {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n        return\
    \ array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <144ebd813d7e47e582fe80a65ddfe892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <144ebd813d7e47e582fe80a65ddfe892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here.\n        return array;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var sum = array[0] + array[array.Count - 1];\n        var\
    \ sorted = array.OrderBy(x => x).ToList();\n        if (sum % 2 == 0) {\n    \
    \        sorted.Reverse();\n        }\n        return sorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <2bc21bf9dd304e86ab43a6e0140ae1e5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2bc21bf9dd304e86ab43a6e0140ae1e5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <2bc21bf9dd304e86ab43a6e0140ae1e5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2bc21bf9dd304e86ab43a6e0140ae1e5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        long sum = array[0] + array[array.Count - 1];\n        if (sum % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here.\n        return array;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b411ed9857c1440ba09a56d5027efa6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b411ed9857c1440ba09a56d5027efa6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        long sum = array[0] + array[array.Count - 1];\n        if (sum % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here.\n        return array;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) return result;\n        if (array.Count == 1) return array;\n        if\
    \ ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed618389eab848749868b1f1aeb94b16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed618389eab848749868b1f1aeb94b16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        int sum = (int)(array[0] + array[array.Count - 1]);\n        if (sum\
    \ % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n     \
    \   } else {\n            array.Sort();\n        }\n        return array;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a07072f358fe4a0bad6e050a70bf5d2e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a07072f358fe4a0bad6e050a70bf5d2e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> sorted = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return sorted;\n        }\n        if (array.Count == 1)\
    \ {\n            sorted.Add(array[0]);\n            return sorted;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            sorted\
    \ = array.OrderByDescending(x => x).ToList();\n        } else {\n            sorted\
    \ = array.OrderBy(x => x).ToList();\n        }\n        return sorted;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <660d19293ae244189b018d2e34364f9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <660d19293ae244189b018d2e34364f9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // TODO: Implement this method\n        return array;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        long sum = array[0] + array[array.Count - 1];\n \
    \       if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc40a4409256461981797d52ccc7362d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc40a4409256461981797d52ccc7362d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      return SortArrayDescending(array);\n        } else {\n            return\
    \ SortArrayAscending(array);\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvfjfxppw.cs(35,20): error CS0103: The name ''SortArrayDescending'' does
    not exist in the current context

    /tmp/tmpvfjfxppw.cs(37,20): error CS0103: The name ''SortArrayAscending'' does
    not exist in the current context

    '
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort((a, b) => (int)(b - a));\n        } else {\n     \
    \       array.Sort((a, b) => (int)(a - b));\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9652e809b5da42d89e3a48eddc7eef56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9652e809b5da42d89e3a48eddc7eef56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) return result;\n        if (array.Count == 1) return array;\n        if\
    \ ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed618389eab848749868b1f1aeb94b16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed618389eab848749868b1f1aeb94b16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here.\n        return array;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <841af293e22b4bad8f29e8a08419efc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <841af293e22b4bad8f29e8a08419efc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <841af293e22b4bad8f29e8a08419efc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <841af293e22b4bad8f29e8a08419efc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      var isOdd = sum % 2 == 1;\n        var sorted = array.OrderBy(x => x).ToList();\n\
    \        if (isOdd) return sorted;\n        sorted.Reverse();\n        return\
    \ sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad5de7d77fe344cc800a80aab18fe03a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad5de7d77fe344cc800a80aab18fe03a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here.\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <b1b5a52a1c304cbea1760208ca608849>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <b1b5a52a1c304cbea1760208ca608849>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             var temp = array[0];\n                array[0] = array[1];\n   \
    \             array[1] = temp;\n            }\n            return array;\n   \
    \     }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n       \
    \     array.Sort();\n            array.Reverse();\n        } else {\n        \
    \    array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab335190f31f4e4ab80a71fb59414af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab335190f31f4e4ab80a71fb59414af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        }\n        array.Sort();\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // TODO: Implement this method\n        return array;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             var temp = array[0];\n                array[0] = array[1];\n   \
    \             array[1] = temp;\n            }\n            return array;\n   \
    \     }\n        var first = array[0];\n        var last = array[array.Count -\
    \ 1];\n        var sum = first + last;\n        if (sum % 2 == 0) {\n        \
    \    array.Sort((a, b) => b.CompareTo(a));\n        } else {\n            array.Sort((a,\
    \ b) => a.CompareTo(b));\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d018b920f5254970ada55448be654b30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d018b920f5254970ada55448be654b30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var sum = array[0] + array[array.Count - 1];\n        if (sum\
    \ % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <f72161fbd8c745578dc5abf2bd7a73ed>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f72161fbd8c745578dc5abf2bd7a73ed>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <f72161fbd8c745578dc5abf2bd7a73ed>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f72161fbd8c745578dc5abf2bd7a73ed>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        var sum = array[0] + array[array.Count - 1];\n        var isEven = sum\
    \ % 2 == 0;\n        if (isEven) {\n            array.Sort((a, b) => (int)(b -\
    \ a));\n        } else {\n            array.Sort((a, b) => (int)(a - b));\n  \
    \      }\n        return array;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75864a2fc4bb4db18c234bcc2ccdca8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75864a2fc4bb4db18c234bcc2ccdca8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        }\n        array.Sort();\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) return result;\n        if (array.Count == 1) return array;\n        if\
    \ ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed618389eab848749868b1f1aeb94b16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed618389eab848749868b1f1aeb94b16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        List<long> left = new List<long>();\n        List<long> right\
    \ = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n     \
    \       if (i < array.Count / 2) {\n                left.Add(array[i]);\n    \
    \        } else {\n                right.Add(array[i]);\n            }\n     \
    \   }\n        left = SortArray(left);\n        right = SortArray(right);\n  \
    \      return Merge(left, right);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv4mj6v9t.cs(45,16): error CS0103: The name ''Merge'' does not exist in
    the current context

    '
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here.\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef52bd2937284beb8ed38591434bec6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef52bd2937284beb8ed38591434bec6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var result = new List<long>();\n        if (array.Count ==\
    \ 0) return result;\n        if (array.Count == 1) return array;\n        var\
    \ sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n    \
    \        result = array.OrderByDescending(x => x).ToList();\n        } else {\n\
    \            result = array.OrderBy(x => x).ToList();\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <611074ef070d4694942345d0dd0640d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <611074ef070d4694942345d0dd0640d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var tmp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = tmp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc61dc7be634df08ae6d7df5044fe2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc61dc7be634df08ae6d7df5044fe2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // TODO: Implement this method\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <3c6c5f4ce0bb44d4ba4a32d10a1f2689>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <3c6c5f4ce0bb44d4ba4a32d10a1f2689>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        long sum = array[0] + array[array.Count - 1];\n        if (sum % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here.\n        return null;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <cadde1be9d2748fa809c6b82af926123>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <cadde1be9d2748fa809c6b82af926123>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var sum = array[0] + array[array.Count - 1];\n        if (sum\
    \ % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        } else\
    \ {\n            array.Sort((a, b) => (int)(a - b));\n        }\n        return\
    \ array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        }\n        else\
    \ {\n            array.Sort();\n            return array;\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80275109161a48b9ba52ed45f132d2c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80275109161a48b9ba52ed45f132d2c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      array.Sort();\n            array.Reverse();\n        } else {\n       \
    \     array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4547988cd88f41a9a46d86a00309c67a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        List<long> result = new List<long>();\n       \
    \ if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        }\n        else\
    \ {\n            array.Sort();\n            return array;\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a7cfeda2cca46f198d2b80ab1acefe4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a7cfeda2cca46f198d2b80ab1acefe4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var sum = array[0] + array[array.Count - 1];\n        var\
    \ result = new List<long>(array);\n        if (sum % 2 == 0) {\n            result.Sort((a,\
    \ b) => b.CompareTo(a));\n        } else {\n            result.Sort();\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <2a72acb1d59d4e43b16b57ccc50b3907>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a72acb1d59d4e43b16b57ccc50b3907>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <2a72acb1d59d4e43b16b57ccc50b3907>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a72acb1d59d4e43b16b57ccc50b3907>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             long temp = array[0];\n                array[0] = array[1];\n  \
    \              array[1] = temp;\n            }\n            return array;\n  \
    \      }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n      \
    \      return array.OrderByDescending(x => x).ToList();\n        }\n        return\
    \ array.OrderBy(x => x).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b272ba1accb4e63bb4bb77d1287d215>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b272ba1accb4e63bb4bb77d1287d215>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var result = new List<long>();\n        if (array.Count ==\
    \ 0) {\n            return result;\n        }\n        if (array.Count == 1) {\n\
    \            result.Add(array[0]);\n            return result;\n        }\n  \
    \      var sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0141e978d9434185b5b6b90be36a9cce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0141e978d9434185b5b6b90be36a9cce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        long sum = array[0] + array[array.Count - 1];\n        if (sum % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e887ff448e4c7b95594196a92233c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // TODO: Implement me\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <a57ee02d2d734c7f9bb76fdb861e4f82>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <a57ee02d2d734c7f9bb76fdb861e4f82>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      var isOdd = sum % 2 == 1;\n        var sorted = array.OrderBy(x => x).ToList();\n\
    \        if (isOdd) return sorted;\n        sorted.Reverse();\n        return\
    \ sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad5de7d77fe344cc800a80aab18fe03a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad5de7d77fe344cc800a80aab18fe03a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if (array[0] > array[1]) {\n   \
    \             var temp = array[0];\n                array[0] = array[1];\n   \
    \             array[1] = temp;\n            }\n            return array;\n   \
    \     }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n       \
    \     array.Sort();\n            array.Reverse();\n        } else {\n        \
    \    array.Sort();\n        }\n        return array;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab335190f31f4e4ab80a71fb59414af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab335190f31f4e4ab80a71fb59414af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cefc745fbacc435c835f0284d2d16b26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef4903f90a8a4b138e14549dbdbb3071>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // TODO: Implement this method\n        return array;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here.\n        return null;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <cadde1be9d2748fa809c6b82af926123>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <cadde1be9d2748fa809c6b82af926123>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // your code here\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d37f359388a4b84bce1791a92018188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        }\n        array.Sort();\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n\
    \        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n       \
    \ }\n        return array;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bba9f35b04cee84ac98dc3e58cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bba9f35b04cee84ac98dc3e58cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      var isOdd = sum % 2 == 1;\n        if (isOdd) {\n            array.Sort();\n\
    \        } else {\n            array.Sort();\n            array.Reverse();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5fe3eb39e1d4779ba98ba9d6854e037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5fe3eb39e1d4779ba98ba9d6854e037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            result\
    \ = array.OrderByDescending(x => x).ToList();\n        } else {\n            result\
    \ = array.OrderBy(x => x).ToList();\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70c2b553e7174196aad822a0647222ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70c2b553e7174196aad822a0647222ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                var temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n  \
    \      if (sum % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n\
    \        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n       \
    \ }\n        return array;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bba9f35b04cee84ac98dc3e58cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bba9f35b04cee84ac98dc3e58cce2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here.\n        return array;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f4d8439f5348a8946160185b83d099>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <ac44d6f3b2434d6da44fdf233d6818a2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c0de114c1ec43dd9d67c76e5c7f9525>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1851fd4034fc43f69d1b5226ab8ea9f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c4259e1f674e60a017969d4c8da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        if (array.Count == 0) return array;\n        if (array.Count\
    \ == 1) return array;\n        var sum = array[0] + array[array.Count - 1];\n\
    \        if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n\
    \        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74afe676b4b441fea1f1cbb7a786d61c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74afe676b4b441fea1f1cbb7a786d61c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        var sum = array[0] + array[array.Count - 1];\n        if (sum\
    \ % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        } else\
    \ {\n            array.Sort((a, b) => (int)(a - b));\n        }\n        return\
    \ array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray\
    \ (System.Collections.Generic.List`1[T] array) [0x00001] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4075c451682a4bafacfcc05a8a638ddd>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // TODO: Implement this function\n        return array;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b670c823ba3493d819647529f6befa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b670c823ba3493d819647529f6befa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> result = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return result;\n        }\n        if (array.Count == 1)\
    \ {\n            result.Add(array[0]);\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        }\n        array.Sort();\n\
    \        return array;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4f2df82a6642b8be18f0188e507aa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // TODO: Implement this method\n        return array;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48d061586db64f429921bafeb33b5792>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        List<long> sorted = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return sorted;\n        }\n        if (array.Count == 1)\
    \ {\n            sorted.Add(array[0]);\n            return sorted;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            sorted\
    \ = array.OrderByDescending(x => x).ToList();\n        } else {\n            sorted\
    \ = array.OrderBy(x => x).ToList();\n        }\n        return sorted;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,\
    \ (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L,\
    \ (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <660d19293ae244189b018d2e34364f9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <660d19293ae244189b018d2e34364f9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here\n        return array;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bdcdfa68a640ae95a7157cc0cb29f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here.\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <b1b5a52a1c304cbea1760208ca608849>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <b1b5a52a1c304cbea1760208ca608849>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Write your code here\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1052227051ca41b0b4c34f86548aba2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n    // you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    // or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
    \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
    \ array) {\n        // Your code goes here.\n        return array;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
    \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
    \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
    \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
    \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
    \ (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef52bd2937284beb8ed38591434bec6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef52bd2937284beb8ed38591434bec6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800486
