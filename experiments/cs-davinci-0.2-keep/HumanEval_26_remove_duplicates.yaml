name: HumanEval_26_remove_duplicates
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a list of integers, remove all elements that occur more\
  \ than once.\n    // Keep order of elements left the same as in the input.\n   \
  \ // >>> remove_duplicates([1, 2, 3, 2, 4])\n    // [1, 3, 4]\n    public static\
  \ List<long> RemoveDuplicates(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L,\
  \ (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n\
  \    }\n\n}\n"
completions: ["        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        // TODO: Implement\
    \ this method.\n        return new List<long>();", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (!seen.Contains(n)) {\n  \
    \              result.Add(n);\n                seen.Add(n);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach\
    \ (long num in numbers) {\n            if (dict.ContainsKey(num)) {\n        \
    \        dict[num]++;\n            } else {\n                dict[num] = 1;\n\
    \            }\n        }\n        foreach (long num in numbers) {\n         \
    \   if (dict[num] == 1) {\n                result.Add(num);\n            }\n \
    \       }\n        return result;", "        var set = new HashSet<long>();\n\
    \        var result = new List<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", '        return numbers.Distinct().ToList();', "        List<long>\
    \ result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var n in numbers) {\n\
    \            if (!set.Contains(n)) {\n                set.Add(n);\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (!seen.Contains(n)) {\n                result.Add(n);\n             \
    \   seen.Add(n);\n            }\n        }\n        return result;", "       \
    \ var result = new List<long>();\n        var seen = new HashSet<long>();\n  \
    \      foreach (var number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (!seen.Contains(n)) {\n  \
    \              result.Add(n);\n                seen.Add(n);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
