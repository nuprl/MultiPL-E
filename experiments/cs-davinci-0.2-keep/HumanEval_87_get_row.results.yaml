language: cs
name: HumanEval_87_get_row
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <2fc4e6ba165e4a3781513abb35ea34cf>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <2fc4e6ba165e4a3781513abb35ea34cf>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var row
    = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n                if
    (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return result.OrderBy(t =>
    t.Item1).ThenByDescending(t => t.Item2).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <68a52f13575547fca196a88b78c85f3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <68a52f13575547fca196a88b78c85f3e>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       return new List<Tuple<long, long>>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b11af0922584122afe1b699b55cbb3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b11af0922584122afe1b699b55cbb3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a20137e7cbdf4be4b435a0d3d9286ffc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a20137e7cbdf4be4b435a0d3d9286ffc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var row
    = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n                if
    (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return result.OrderBy(t =>
    t.Item1).ThenByDescending(t => t.Item2).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <318a0cb91dbd425b87dac187a34d0b33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <318a0cb91dbd425b87dac187a34d0b33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cf62b24d7454b1e83e16086b9d62bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cf62b24d7454b1e83e16086b9d62bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for
    (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;
    j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a63f8af47ea446bb0f53357346f6438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a63f8af47ea446bb0f53357346f6438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for
    (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;
    j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b97fef8c85d044158fe9c38c1ce31b63>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b97fef8c85d044158fe9c38c1ce31b63>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return (int)(b.Item2 - a.Item2);\n            }\n
    \           return (int)(a.Item1 - b.Item1);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a38766ad5044da9967a33bfd4c939b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a38766ad5044da9967a33bfd4c939b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var row
    = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n                if
    (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return result.OrderBy(t =>
    t.Item1).ThenByDescending(t => t.Item2).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var row
    = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n                if
    (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return result.OrderBy(t =>
    t.Item1).ThenByDescending(t => t.Item2).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d81a0649cceb4c6e9db9ce6b8e3e4ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        List<Tuple<long,
    long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fbeccaa9f9e4699994aa946bff88210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fbeccaa9f9e4699994aa946bff88210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var row
    = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n                if
    (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a0f867b2694a61a504e21d26254d90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a0f867b2694a61a504e21d26254d90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <260741eb004241c0b9f00bbd2a1e1406>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <260741eb004241c0b9f00bbd2a1e1406>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var res = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        res.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad64e1a2750040da927fc0669805553c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad64e1a2750040da927fc0669805553c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return (int)(b.Item2
    - a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var res = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        res.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b44589785114c8898d1605154048dfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b44589785114c8898d1605154048dfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return (int)(b.Item2 - a.Item2);\n            }\n
    \           return (int)(a.Item1 - b.Item1);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a38766ad5044da9967a33bfd4c939b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a38766ad5044da9967a33bfd4c939b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return (int)(b.Item2
    - a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a20137e7cbdf4be4b435a0d3d9286ffc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a20137e7cbdf4be4b435a0d3d9286ffc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a73acdda9d724681904898d7d7909b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return new List<Tuple<long, long>>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e5b99010c7140e2b0111f9ae7170d42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e5b99010c7140e2b0111f9ae7170d42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return (int)(b.Item2 -
    a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e76ee97e5e9408aa28f36a16641217f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e76ee97e5e9408aa28f36a16641217f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <318a0cb91dbd425b87dac187a34d0b33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <318a0cb91dbd425b87dac187a34d0b33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var res = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        res.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d03e2609b5548a69f2ab542bdced085>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d03e2609b5548a69f2ab542bdced085>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for
    (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;
    j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a63f8af47ea446bb0f53357346f6438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a63f8af47ea446bb0f53357346f6438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var row
    = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n                if
    (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L,
    0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L,
    0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})),
    (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long,
    long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new
    List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L,
    0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,
    1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L,
    2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L,
    3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L,
    4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L,
    5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a0f867b2694a61a504e21d26254d90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a0f867b2694a61a504e21d26254d90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return (int)(b.Item2 -
    a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e76ee97e5e9408aa28f36a16641217f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e76ee97e5e9408aa28f36a16641217f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return (int)(b.Item2 -
    a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e76ee97e5e9408aa28f36a16641217f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e76ee97e5e9408aa28f36a16641217f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a20137e7cbdf4be4b435a0d3d9286ffc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a20137e7cbdf4be4b435a0d3d9286ffc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <68a52f13575547fca196a88b78c85f3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <68a52f13575547fca196a88b78c85f3e>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b16c4c7583448af91821a1d959e9efb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cf62b24d7454b1e83e16086b9d62bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cf62b24d7454b1e83e16086b9d62bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var res = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b7ff47fde4a4302a3ae895fe59f2556>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b7ff47fde4a4302a3ae895fe59f2556>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here.\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <8a1229075c79496183487b89be72c568>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <8a1229075c79496183487b89be72c568>:0
    \n"
  stdout: ''
  timestamp: 1659804274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            var row
    = lst[(int)i];\n            for (long j = 0; j < row.Count; j++) {\n                if
    (row[(int)j] == x) {\n                    result.Add(new Tuple<long, long>(i,
    j));\n                }\n            }\n        }\n        result.Sort((a, b)
    => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16756d9f23404c51ba29612c5c1faa25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16756d9f23404c51ba29612c5c1faa25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var res = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        res.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d03e2609b5548a69f2ab542bdced085>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d03e2609b5548a69f2ab542bdced085>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5425347e0ec44a76891de51076476342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var res = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        res.Sort((a,
    b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad64e1a2750040da927fc0669805553c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad64e1a2750040da927fc0669805553c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        var
    sorted = result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c912071ed2e4637800039b1f645b336>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c912071ed2e4637800039b1f645b336>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n            }\n
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66ed43ff853b49edba75b61aab5523f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return (int)(b.Item2
    - a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return (int)(b.Item2
    - a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1092b8c3e39425fb2c7d3c5e1e08b27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 < b.Item1) {\n                return -1;\n            }
    else if (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n
    \               if (a.Item2 > b.Item2) {\n                    return -1;\n                }
    else if (a.Item2 < b.Item2) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c005d40e188649bd92001a273ea7d3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code goes here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ca6f974bba5b4d75b730b12063d50d0b>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Write your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <ddefe95f4092401592f5fc66f5c725cb>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c5143d4a4db4c8f8cb3feeb290620cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd822562f3c5402ea8564a838157a981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd822562f3c5402ea8564a838157a981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int
    j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new
    Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a,
    b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3bebf4f46274dffbdfb415ed5876452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n
    \           }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long,
    long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b10e6766cc545e3973151465fe1cbfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // Your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <8540e20f8df64245853cf572bfab2b4c>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        List<Tuple<long, long>>
    result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if
    (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n
    \           }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1169ec92a747ad841f54b74d2b5fcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd822562f3c5402ea8564a838157a981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd822562f3c5402ea8564a838157a981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        // your code here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x000a5] in <7016864a31d84a13ac6032fbe3ce068f>:0
    \n"
  stdout: ''
  timestamp: 1659804273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    //
    which is similar to matrix, however, unlike matrices,\n    // each row may contain
    a different number of columns.\n    // Given lst, and integer x, find integers
    x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such
    that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    //
    Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates
    of the row by columns in descending order.\n    // Examples:\n    // get_row([\n
    \   // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ],
    1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n
    \   // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static List<Tuple<long,
    long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long,
    long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long
    j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]
    == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n
    \           }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1
    != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return b.Item2.CompareTo(a.Item2);\n        });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),
    (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,
    long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,
    long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,
    long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,
    long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new
    List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new
    long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new
    List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),
    (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,
    (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,
    long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,
    long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,
    long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,
    long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,
    long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,
    long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,
    long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),
    (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),
    (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new
    List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new
    List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,
    long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd822562f3c5402ea8564a838157a981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd822562f3c5402ea8564a838157a981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804274
