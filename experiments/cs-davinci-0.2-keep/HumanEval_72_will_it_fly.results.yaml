language: cs
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        bool balanced = true;\n        for (int i = 0; i < q.Count\
    \ / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n               \
    \ balanced = false;\n                break;\n            }\n        }\n      \
    \  return balanced && q.Sum() <= w;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) return true;\n        if (q.Count ==\
    \ 2) return false;\n        long sum = 0;\n        for (int i = 0; i < q.Count;\
    \ i++) {\n            sum += q[i];\n        }\n        if (sum > w) return false;\n\
    \        for (int i = 0; i < q.Count; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        var sum = q.Sum();\n        var isBalanced = q.SequenceEqual(q.Reverse());\n\
    \        return sum <= w && isBalanced;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprrvcaqt0.cs(22,42): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) return true;\n        if (q.Count ==\
    \ 2) return false;\n        if (q.Count % 2 == 0) return false;\n        if (q.Sum()\
    \ > w) return false;\n        for (int i = 0; i < q.Count / 2; i++) {\n      \
    \      if (q[i] != q[q.Count - 1 - i]) return false;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) return true;\n        long sum = 0;\n\
    \        foreach (long i in q) sum += i;\n        if (sum > w) return false;\n\
    \        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        if (q.Count == 1) {\n            return true;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) return true;\n        long sum = 0;\n\
    \        for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n     \
    \   }\n        if (sum > w) return false;\n        for (int i = 0; i < q.Count\
    \ / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) return false;\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n     \
    \       sum += i;\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        long half = q.Count / 2;\n        for (int i = 0; i < half;\
    \ i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        var sum = q.Sum();\n        if (sum > w) {\n         \
    \   return false;\n        }\n        var half = q.Count / 2;\n        var left\
    \ = q.Take(half).ToList();\n        var right = q.Skip(half).ToList();\n     \
    \   if (q.Count % 2 == 1) {\n            right.RemoveAt(0);\n        }\n     \
    \   right.Reverse();\n        return left.SequenceEqual(right);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) return false;\n\
    \        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        bool balanced = true;\n       \
    \ for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n            if\
    \ (q[i] != q[q.Count - 1 - i]) {\n                balanced = false;\n        \
    \    }\n        }\n        return sum <= w && balanced;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        bool balanced = true;\n        long sum = 0;\n       \
    \ for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n            if\
    \ (q[i] != q[q.Count - i - 1]) {\n                balanced = false;\n        \
    \    }\n        }\n        if (sum <= w && balanced) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here.\n        return false;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f49eef38da7b4a2eb0003fc98dd9d28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f49eef38da7b4a2eb0003fc98dd9d28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) {\n            return true;\n      \
    \  }\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n   \
    \         sum += q[i];\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n       \
    \     if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) return true;\n        long sum = 0;\n\
    \        for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n     \
    \   }\n        if (sum > w) return false;\n        for (int i = 0; i < q.Count\
    \ / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) return false;\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) {\n            return true;\n      \
    \  }\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n   \
    \         sum += q[i];\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n       \
    \     if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here.\n        return false;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f49eef38da7b4a2eb0003fc98dd9d28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f49eef38da7b4a2eb0003fc98dd9d28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) return false;\n\
    \        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) {\n            return true;\n      \
    \  }\n        if (q.Count == 2) {\n            return false;\n        }\n    \
    \    long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n            sum\
    \ += q[i];\n        }\n        if (sum > w) {\n            return false;\n   \
    \     }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code goes here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0ca4549bbd648019695dc5620d5546f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0ca4549bbd648019695dc5620d5546f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) {\n            return true;\n      \
    \  }\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n   \
    \         sum += q[i];\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n       \
    \     if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        long sum = 0;\n     \
    \   for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n        }\n\
    \        if (sum > w) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        var sum = q.Sum();\n        var isBalanced = true;\n \
    \       for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                isBalanced = false;\n                break;\n \
    \           }\n        }\n        return isBalanced && sum <= w;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800461
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n     \
    \       sum += i;\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800461
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        bool isBalanced = true;\n     \
    \   for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n          \
    \  if (q[i] != q[q.Count - 1 - i]) {\n                isBalanced = false;\n  \
    \          }\n        }\n        return sum <= w && isBalanced;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800461
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        bool balanced = true;\n        for (int i = 0; i < q.Count\
    \ / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n               \
    \ balanced = false;\n                break;\n            }\n        }\n      \
    \  return balanced && q.Sum() <= w;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfuz76a68.cs(22,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800461
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        else {\n            for (int i = 0; i < q.Count\
    \ / 2; i++) {\n                if (q[i] != q[q.Count - 1 - i]) {\n           \
    \         return false;\n                }\n            }\n            return\
    \ true;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800461
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10f54b9cbd540e2af5aa6fc44036ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19bdbb0f4e2243b59b69551dea54778d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n     \
    \       sum += i;\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800461
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c19dc92506da461993be5557268aca4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) {\n            return true;\n      \
    \  }\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n   \
    \         sum += q[i];\n        }\n        if (sum > w) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n       \
    \     if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        // Write your code here.\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac21f8e736044b5b45c16a299ff8cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dc110a80c9547ff8102f4b2d8501e4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dc110a80c9547ff8102f4b2d8501e4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800461
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\
    \ {\n            sum += q[i];\n        }\n        if (sum > w) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n\
    \            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800460
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        if (q.Count == 1) {\n            return true;\n      \
    \  }\n        if (q.Count % 2 == 0) {\n            return false;\n        }\n\
    \        long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n        \
    \    sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800461
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E\
    \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \    // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>\
    \ q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5tdfpbe1.cs(21,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800460
