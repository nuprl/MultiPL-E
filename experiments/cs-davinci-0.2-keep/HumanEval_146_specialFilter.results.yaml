language: cs
name: HumanEval_146_specialFilter
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return nums.Count(x => x >\
    \ 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(num => num > 10 && num.ToString().First()\
    \ % 2 != 0 && num.ToString().Last() % 2 != 0).Count();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 != 0 && x / 10\
    \ % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95f85fa649f745bf8ba7d030b34f2e96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95f85fa649f745bf8ba7d030b34f2e96>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b5b1091e144174a22afe0420b8e639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b5b1091e144174a22afe0420b8e639>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10) {\n                string str\
    \ = num.ToString();\n                if (str[0] % 2 != 0 && str[str.Length - 1]\
    \ % 2 != 0) {\n                    count++;\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return nums.Where(x => x >\
    \ 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee715dc749e4e57b969ff5971d9ae24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee715dc749e4e57b969ff5971d9ae24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10) {\n                if (num %\
    \ 2 != 0) {\n                    long first = num;\n                    while\
    \ (first >= 10) {\n                        first /= 10;\n                    }\n\
    \                    if (first % 2 != 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return nums.Count(n => n >\
    \ 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x % 2 != 0 && x % 10 != 0).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61d7fecebee4aa791efe0114283631c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61d7fecebee4aa791efe0114283631c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        long count = 0;\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 10) {\n      \
    \          string num = nums[i].ToString();\n                if (num[0] % 2 !=\
    \ 0 && num[num.Length - 1] % 2 != 0) {\n                    count++;\n       \
    \         }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee715dc749e4e57b969ff5971d9ae24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee715dc749e4e57b969ff5971d9ae24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long result = 0;\n        foreach (long num in nums) {\n  \
    \          if (num > 10 && num % 2 != 0 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                result++;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L, (long)1L,\
    \ (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && (num % 10) % 2 != 0 && num / 10 % 2 != 0) {\n      \
    \          count++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3eef7f5f097c40ea8d0191072b0fcff0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3eef7f5f097c40ea8d0191072b0fcff0>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && (num % 10) % 2 != 0 && num / 10 % 2 != 0) {\n      \
    \          count++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3eef7f5f097c40ea8d0191072b0fcff0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3eef7f5f097c40ea8d0191072b0fcff0>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 != 0 && (x /\
    \ 10) % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11507aeab23549b483653cc1d11a03df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11507aeab23549b483653cc1d11a03df>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (var num in nums) {\n    \
    \        if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1698e378cae7487db90c72f57bbbbcb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1698e378cae7487db90c72f57bbbbcb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 != 0 && x / 10\
    \ % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95f85fa649f745bf8ba7d030b34f2e96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95f85fa649f745bf8ba7d030b34f2e96>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here.\n        return nums.Count(n => n\
    \ > 10 && n % 2 == 1 && (n / 10) % 2 == 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <176fc382421a46ef820fe1ff499c7d56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <176fc382421a46ef820fe1ff499c7d56>:0 \n"
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        var count = 0;\n        foreach\
    \ (var num in nums)\n        {\n            if (num > 10 && num.ToString().First()\
    \ % 2 != 0 && num.ToString().Last() % 2 != 0)\n            {\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x % 2 != 0 && x % 10 != 0).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61d7fecebee4aa791efe0114283631c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61d7fecebee4aa791efe0114283631c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            if (nums[i] > 10) {\n                if (nums[i] % 2 != 0) {\n\
    \                    string num = nums[i].ToString();\n                    if\
    \ (num[0] % 2 != 0 && num[num.Length - 1] % 2 != 0) {\n                      \
    \  count++;\n                    }\n                }\n            }\n       \
    \ }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return nums.Where(n => n > 10 &&\
    \ n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x % 2 != 0 && x % 10 != 0);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7852abb5c7cf45a581e966f3163d47eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7852abb5c7cf45a581e966f3163d47eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee715dc749e4e57b969ff5971d9ae24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee715dc749e4e57b969ff5971d9ae24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => (x > 10) && (x % 2 == 1) && (x / 10\
    \ % 2 == 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dcc1ab08b06446fbe03982f5290f252>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dcc1ab08b06446fbe03982f5290f252>:0 \n"
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b5b1091e144174a22afe0420b8e639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b5b1091e144174a22afe0420b8e639>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && (num % 10) % 2 != 0 && num / 10 % 2 != 0) {\n      \
    \          count++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3eef7f5f097c40ea8d0191072b0fcff0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3eef7f5f097c40ea8d0191072b0fcff0>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0) {\n                count++;\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && IsOdd(num) && IsOdd(num % 10)) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph1d29_76.cs(18,29): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmph1d29_76.cs(18,43): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b5b1091e144174a22afe0420b8e639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b5b1091e144174a22afe0420b8e639>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (var num in nums) {\n    \
    \        if (num > 10 && (num % 10) % 2 != 0 && num / 10 % 2 != 0) {\n       \
    \         count++;\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6c99f608aff434d8d449c1db0ea6033>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6c99f608aff434d8d449c1db0ea6033>:0 \n"
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return nums.Where(x => x >\
    \ 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && (n % 10) % 2 == 1 && (n /\
    \ 10) % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcdd9f5196c14808ba304c331989eaa2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcdd9f5196c14808ba304c331989eaa2>:0 \n"
  stdout: ''
  timestamp: 1659799840
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23df2ff67fc478dbd86cbc312db2a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae03cc0c2c6c4e2c95795c0824656af5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7e0693959eb4527a243fab4bfd214d3>:0 \n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799839
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an array of numbers as input\
    \ and returns \n    // the number of elements in the array that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n \
    \   // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75d7398eea514f5fa90e46f52d59cf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799839
