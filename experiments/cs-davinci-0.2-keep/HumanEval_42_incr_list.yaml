name: HumanEval_42_incr_list
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
  \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
  \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    public static List<long> IncrList(List<long>\
  \ l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IncrList((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(IncrList((new List<long>(new\
  \ long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)3L, (long)2L}))));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)5L,\
  \ (long)2L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).Equals((new\
  \ List<long>(new long[]{(long)6L, (long)3L, (long)6L, (long)3L, (long)4L, (long)4L,\
  \ (long)10L, (long)1L, (long)124L}))));\n    }\n\n}\n"
completions: ["        List<long> r = new List<long>();\n        foreach (long x in\
    \ l) {\n            r.Add(x + 1);\n        }\n        return r;", "        List<long>\
    \ ret = new List<long>();\n        foreach (long x in l) {\n            ret.Add(x\
    \ + 1);\n        }\n        return ret;", '        return l.Select(x => x + 1).ToList();',
  "        List<long> result = new List<long>();\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            result.Add(l[i] + 1);\n        }\n        return result;",
  "        List<long> ret = new List<long>();\n        foreach (long x in l) {\n \
    \           ret.Add(x + 1);\n        }\n        return ret;", '        return
    l.Select(x => x + 1).ToList();', '        return l.Select(x => x + 1).ToList();',
  '        return l.Select(x => x + 1).ToList();', "        List<long> res = new List<long>();\n\
    \        foreach (long x in l) {\n            res.Add(x + 1);\n        }\n   \
    \     return res;", "        List<long> ret = new List<long>();\n        foreach\
    \ (long x in l) {\n            ret.Add(x + 1);\n        }\n        return ret;",
  '        return l.Select(x => x + 1).ToList();', "        List<long> ret = new List<long>();\n\
    \        foreach (long x in l) {\n            ret.Add(x + 1);\n        }\n   \
    \     return ret;", "        List<long> incr = new List<long>();\n        foreach\
    \ (long x in l) {\n            incr.Add(x + 1);\n        }\n        return incr;",
  "        List<long> ret = new List<long>();\n        foreach (long x in l) {\n \
    \           ret.Add(x + 1);\n        }\n        return ret;", '        return
    l.Select(x => x + 1).ToList();', "        List<long> ret = new List<long>();\n\
    \        foreach (long x in l) {\n            ret.Add(x + 1);\n        }\n   \
    \     return ret;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l) {\n            result.Add(x + 1);\n        }\n        return result;",
  "        List<long> res = new List<long>();\n        foreach (long x in l) {\n \
    \           res.Add(x + 1);\n        }\n        return res;", "        List<long>\
    \ res = new List<long>();\n        foreach (long x in l) {\n            res.Add(x\
    \ + 1);\n        }\n        return res;", "        List<long> ret = new List<long>();\n\
    \        foreach (long x in l) {\n            ret.Add(x + 1);\n        }\n   \
    \     return ret;"]
stop_tokens:
- "\n    }\n"
