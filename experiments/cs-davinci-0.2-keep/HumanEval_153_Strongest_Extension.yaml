name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) ==\
  \ 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
  \ List<string> extensions) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        // Your code here\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        var strongest = extensions.Select(x\
    \ => new {\n            name = x,\n            strength = x.Count(y => char.IsUpper(y))\
    \ - x.Count(y => char.IsLower(y))\n        }).OrderByDescending(x => x.strength).ThenBy(x\
    \ => x.name).First();\n        return class_name + \".\" + strongest.name;", " \
    \       // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code goes here.\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        string strongest = \"\";\n        int strength\
    \ = 0;\n        foreach (string ext in extensions) {\n            int cap = 0;\n\
    \            int sm = 0;\n            foreach (char c in ext) {\n            \
    \    if (char.IsUpper(c)) cap++;\n                else sm++;\n            }\n\
    \            int str = cap - sm;\n            if (str > strength) {\n        \
    \        strength = str;\n                strongest = ext;\n            }\n  \
    \      }\n        return class_name + \".\" + strongest;", "        // Your code\
    \ here\n        return \"\";", "        string strongest_extension = \"\";\n \
    \       double strongest_strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            double strength = 0;\n            foreach (char c in extension)\
    \ {\n                if (char.IsUpper(c)) {\n                    strength += 1;\n\
    \                } else {\n                    strength -= 1;\n              \
    \  }\n            }\n            if (strength > strongest_strength) {\n      \
    \          strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        return \"\"\
    ;", "        // Write your code here\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        // Write your code here\n  \
    \      return \"\";", "        // your code here\n        return \"\";", "   \
    \     // Your code goes here.\n        return \"\";", "        string strongest\
    \ = \"\";\n        int strongest_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int strength = 0;\n            foreach (char c\
    \ in extension) {\n                if (char.IsUpper(c)) {\n                  \
    \  strength++;\n                } else {\n                    strength--;\n  \
    \              }\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Your code here\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // Your code here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            for (int i = 0; i < extension.Length; i++) {\n  \
    \              if (Char.IsUpper(extension[i])) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            if (strength > strongest_strength) {\n\
    \                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", '        return null;', "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Write your code here\n        return \"\";", "        // your code\
    \ here\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Your code here\n        return \"\";", "        string strongest_extension =\
    \ \"\";\n        double strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            double current_strength = 0;\n            foreach (char c in\
    \ extension) {\n                if (char.IsUpper(c)) {\n                    current_strength++;\n\
    \                } else {\n                    current_strength--;\n         \
    \       }\n            }\n            if (current_strength > strength) {\n   \
    \             strength = current_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code here\n        return \"\";", " \
    \       string strongest = \"\";\n        double strongest_strength = -1;\n  \
    \      foreach (string extension in extensions) {\n            double strength\
    \ = 0;\n            for (int i = 0; i < extension.Length; i++) {\n           \
    \     if (char.IsUpper(extension[i])) {\n                    strength++;\n   \
    \             } else {\n                    strength--;\n                }\n \
    \           }\n            if (strength > strongest_strength) {\n            \
    \    strongest = extension;\n                strongest_strength = strength;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = 0;\n            int sm = 0;\n            foreach (char c in extension) {\n\
    \                if (char.IsUpper(c)) {\n                    cap++;\n        \
    \        } else {\n                    sm++;\n                }\n            }\n\
    \            double strength = cap - sm;\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string strongest = \"\";\n        double strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ curr_strength = 0;\n            for (int i = 0; i < extension.Length; i++) {\n\
    \                if (char.IsUpper(extension[i])) {\n                    curr_strength++;\n\
    \                } else {\n                    curr_strength--;\n            \
    \    }\n            }\n            if (curr_strength > strength) {\n         \
    \       strength = curr_strength;\n                strongest = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest;", "  \
    \      // Write your code here\n        return \"\";", "        string strongest_extension\
    \ = \"\";\n        double strongest_strength = -1;\n        foreach (string extension\
    \ in extensions) {\n            double strength = 0;\n            foreach (char\
    \ c in extension) {\n                if (char.IsUpper(c)) {\n                \
    \    strength += 1;\n                } else {\n                    strength -=\
    \ 1;\n                }\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        var strongest = extensions.Select(ext => new\
    \ {\n            ext,\n            strength = ext.Count(c => char.IsUpper(c))\
    \ - ext.Count(c => char.IsLower(c))\n        }).OrderByDescending(x => x.strength).ThenBy(x\
    \ => x.ext).First();\n        return $\"{class_name}.{strongest.ext}\";", "  \
    \      // your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        string strongest\
    \ = \"\";\n        double strength = 0;\n        foreach (string ext in extensions)\
    \ {\n            double ext_strength = 0;\n            foreach (char c in ext)\
    \ {\n                if (char.IsUpper(c)) {\n                    ext_strength++;\n\
    \                } else {\n                    ext_strength--;\n             \
    \   }\n            }\n            if (ext_strength > strength) {\n           \
    \     strength = ext_strength;\n                strongest = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + strongest;", "        string\
    \ strongest = \"\";\n        double strongest_strength = 0;\n        foreach (string\
    \ extension in extensions) {\n            double strength = 0;\n            foreach\
    \ (char c in extension) {\n                if (char.IsUpper(c)) {\n          \
    \          strength++;\n                } else {\n                    strength--;\n\
    \                }\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        // Your code here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", '        return "";', "        // Your code here\n   \
    \     return \"\";", "        // your code here\n        return \"\";", "    \
    \    var strongest = extensions.Select(x => new {\n            Name = x,\n   \
    \         Strength = x.Count(char.IsUpper) - x.Count(char.IsLower)\n        }).OrderByDescending(x\
    \ => x.Strength).ThenBy(x => x.Name).First();\n        return $\"{class_name}.{strongest.Name}\"\
    ;", "        // Your code here\n        return \"\";", "        string strongest\
    \ = \"\";\n        int strength = 0;\n        foreach (string ext in extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            foreach (char\
    \ c in ext) {\n                if (char.IsUpper(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            if (cap - sm > strength) {\n                strength =\
    \ cap - sm;\n                strongest = ext;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest;", "        int max = 0;\n        string\
    \ max_ext = \"\";\n        foreach (string ext in extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            foreach (char c in ext) {\n \
    \               if (char.IsUpper(c)) {\n                    cap++;\n         \
    \       } else {\n                    sm++;\n                }\n            }\n\
    \            if (cap - sm > max) {\n                max = cap - sm;\n        \
    \        max_ext = ext;\n            }\n        }\n        return class_name +\
    \ \".\" + max_ext;", "        int max = 0;\n        string result = \"\";\n  \
    \      foreach (string ext in extensions) {\n            int cap = 0;\n      \
    \      int sm = 0;\n            for (int i = 0; i < ext.Length; i++) {\n     \
    \           if (ext[i] >= 'A' && ext[i] <= 'Z') {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            if (cap - sm > max) {\n                max = cap - sm;\n\
    \                result = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + result;", "        // Your code here\n        return \"\";", "   \
    \     // Your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Your code here\n        return \"\";", '        // Your code here',
  "        int max = 0;\n        string max_ext = \"\";\n        foreach (string ext\
    \ in extensions) {\n            int cap = 0;\n            int sm = 0;\n      \
    \      foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n   \
    \                 cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            if (cap - sm > max) {\n       \
    \         max = cap - sm;\n                max_ext = ext;\n            }\n   \
    \     }\n        return class_name + \".\" + max_ext;", "        // Write your\
    \ code here\n        return null;", "        // Your code here\n        double\
    \ max = 0;\n        int index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            double strength = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (Char.IsUpper(extensions[i][j]))\n              \
    \      strength++;\n                else\n                    strength--;\n  \
    \          }\n            if (strength > max) {\n                max = strength;\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        int max = 0;\n        string max_ext\
    \ = \"\";\n        foreach (string ext in extensions) {\n            int cap =\
    \ 0;\n            int sm = 0;\n            foreach (char c in ext) {\n       \
    \         if (char.IsUpper(c)) cap++;\n                else sm++;\n          \
    \  }\n            int strength = cap - sm;\n            if (strength > max) {\n\
    \                max = strength;\n                max_ext = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + max_ext;", "        // Your\
    \ code goes here\n        return \"\";", "        string strongest = \"\";\n \
    \       double strength = 0;\n        foreach (string ext in extensions) {\n \
    \           double cap = ext.Count(char.IsUpper);\n            double sm = ext.Count(char.IsLower);\n\
    \            double curr_strength = cap - sm;\n            if (curr_strength >\
    \ strength) {\n                strength = curr_strength;\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        // your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Your code goes here.\n        return \"\";", "        string strongest\
    \ = \"\";\n        double strength = 0;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(char.IsUpper);\n      \
    \      int sm = extension.Count(char.IsLower);\n            double curr_strength\
    \ = cap - sm;\n            if (curr_strength > strength) {\n                strength\
    \ = curr_strength;\n                strongest = extension;\n            }\n  \
    \      }\n        return class_name + \".\" + strongest;", "        // Your code\
    \ goes here\n        return \"\";", "        // Write your code here\n       \
    \ return \"\";", "        // Your code here\n        return \"\";", "        string\
    \ strongest = \"\";\n        double strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            double current = 0;\n            for (int i =\
    \ 0; i < extension.Length; i++) {\n                if (char.IsUpper(extension[i]))\
    \ {\n                    current++;\n                } else {\n              \
    \      current--;\n                }\n            }\n            if (current >\
    \ strength) {\n                strength = current;\n                strongest\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest;", "        // Your code here.\n        return \"\";", "        //\
    \ Your code here\n        return \"\";", "        int max = 0;\n        string\
    \ max_ext = \"\";\n        foreach (string ext in extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            foreach (char c in ext) {\n \
    \               if (char.IsUpper(c)) {\n                    cap++;\n         \
    \       } else {\n                    sm++;\n                }\n            }\n\
    \            if (cap - sm > max) {\n                max = cap - sm;\n        \
    \        max_ext = ext;\n            }\n        }\n        return class_name +\
    \ \".\" + max_ext;", "        string strongest = \"\";\n        int strength =\
    \ 0;\n        foreach (string ext in extensions) {\n            int cap = 0;\n\
    \            int sm = 0;\n            foreach (char c in ext) {\n            \
    \    if (c >= 'A' && c <= 'Z') {\n                    cap++;\n               \
    \ } else if (c >= 'a' && c <= 'z') {\n                    sm++;\n            \
    \    }\n            }\n            if (cap - sm > strength) {\n              \
    \  strength = cap - sm;\n                strongest = ext;\n            }\n   \
    \     }\n        return class_name + \".\" + strongest;", "        // Your code\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       string strongest = \"\";\n        float strength = 0;\n        foreach\
    \ (string ext in extensions) {\n            float ext_strength = 0;\n        \
    \    foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n     \
    \               ext_strength++;\n                } else {\n                  \
    \  ext_strength--;\n                }\n            }\n            if (ext_strength\
    \ > strength) {\n                strength = ext_strength;\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        int max = 0;\n        string max_ext = \"\";\n\
    \        foreach (string ext in extensions) {\n            int cap = 0;\n    \
    \        int sm = 0;\n            foreach (char c in ext) {\n                if\
    \ (c >= 'A' && c <= 'Z') {\n                    cap++;\n                } else\
    \ if (c >= 'a' && c <= 'z') {\n                    sm++;\n                }\n\
    \            }\n            if (cap - sm > max) {\n                max = cap -\
    \ sm;\n                max_ext = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + max_ext;", "        // Your code here\n        return \"\
    \";", "        // Your code here\n        return \"\";", "        // Your code\
    \ here\n        return \"\";", "        string strongest = \"\";\n        double\
    \ strength = 0;\n        foreach (string extension in extensions) {\n        \
    \    double current_strength = 0;\n            for (int i = 0; i < extension.Length;\
    \ i++) {\n                if (Char.IsUpper(extension[i])) {\n                \
    \    current_strength++;\n                } else {\n                    current_strength--;\n\
    \                }\n            }\n            if (current_strength > strength)\
    \ {\n                strength = current_strength;\n                strongest =\
    \ extension;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        string strongest_extension = \"\";\n        double strongest_strength =\
    \ 0;\n        foreach (string extension in extensions) {\n            double strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;", "        // Your code\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // Your code here\n        return \"\";", "        // Write your\
    \ code here\n        return \"\";", "        string strongest = \"\";\n      \
    \  double strength = 0;\n        foreach (string ext in extensions) {\n      \
    \      int caps = 0;\n            int smalls = 0;\n            foreach (char c\
    \ in ext) {\n                if (c >= 'A' && c <= 'Z') {\n                   \
    \ caps++;\n                } else if (c >= 'a' && c <= 'z') {\n              \
    \      smalls++;\n                }\n            }\n            double str = (double)caps\
    \ - (double)smalls;\n            if (str > strength) {\n                strength\
    \ = str;\n                strongest = ext;\n            }\n        }\n       \
    \ return class_name + \".\" + strongest;", "        // Your code here\n      \
    \  return \"\";", "        // Your code here\n        return \"\";", "       \
    \ int max = 0;\n        string result = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int cap = 0;\n            int sm = 0;\n      \
    \      foreach (char c in extension) {\n                if (char.IsUpper(c)) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            if (cap - sm > max) {\n       \
    \         max = cap - sm;\n                result = extension;\n            }\n\
    \        }\n        return class_name + \".\" + result;", "        // your code\
    \ here\n        return \"\";", '        return class_name + "." + extensions.OrderByDescending(x
    => (x.Count(y => char.IsUpper(y)) - x.Count(y => char.IsLower(y)))).First();',
  "        var strongest = extensions.Select(ext => new {\n            Name = ext,\n\
    \            Strength = ext.Count(c => char.IsUpper(c)) - ext.Count(c => char.IsLower(c))\n\
    \        }).OrderByDescending(ext => ext.Strength).ThenBy(ext => ext.Name).First();\n\
    \        return $\"{class_name}.{strongest.Name}\";", "        // Your code here\n\
    \        return \"\";", "        string strongest = \"\";\n        double strength\
    \ = 0;\n        foreach (string ext in extensions) {\n            double curr_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    curr_strength++;\n                } else {\n        \
    \            curr_strength--;\n                }\n            }\n            if\
    \ (curr_strength > strength) {\n                strength = curr_strength;\n  \
    \              strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        int max = 0;\n        string result = \"\";\n\
    \        foreach (string ext in extensions) {\n            int cap = 0;\n    \
    \        int sm = 0;\n            foreach (char c in ext) {\n                if\
    \ (c >= 'A' && c <= 'Z') {\n                    cap++;\n                } else\
    \ if (c >= 'a' && c <= 'z') {\n                    sm++;\n                }\n\
    \            }\n            if (cap - sm > max) {\n                max = cap -\
    \ sm;\n                result = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + result;", "        // Your code here\n        return \"\
    \";", "        string strongest_extension = \"\";\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ extension_strength = 0;\n            foreach (char c in extension) {\n     \
    \           if (char.IsUpper(c)) {\n                    extension_strength +=\
    \ 1;\n                } else {\n                    extension_strength -= 1;\n\
    \                }\n            }\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        int max = 0;\n\
    \        string res = \"\";\n        foreach (string s in extensions) {\n    \
    \        int cap = 0;\n            int sm = 0;\n            foreach (char c in\
    \ s) {\n                if (char.IsUpper(c)) {\n                    cap++;\n \
    \               } else {\n                    sm++;\n                }\n     \
    \       }\n            if (cap - sm > max) {\n                max = cap - sm;\n\
    \                res = s;\n            }\n        }\n        return class_name\
    \ + \".\" + res;", "        int max = 0;\n        string max_ext = \"\";\n   \
    \     foreach (string ext in extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            foreach (char c in ext) {\n                if (c\
    \ >= 'A' && c <= 'Z') {\n                    cap++;\n                } else if\
    \ (c >= 'a' && c <= 'z') {\n                    sm++;\n                }\n   \
    \         }\n            if (cap - sm > max) {\n                max = cap - sm;\n\
    \                max_ext = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + max_ext;", "        // Your code here\n        return \"\";", "  \
    \      // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";"]
stop_tokens:
- "\n    }\n"
