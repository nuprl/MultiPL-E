name: HumanEval_70_strange_sort_list
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given list of integers, return list in strange order.\n    //\
  \ Strange sorting, is when you start with the minimum value,\n    // then maximum\
  \ of the remaining integers, then minimum and so on.\n    // Examples:\n    // strange_sort_list([1,\
  \ 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
  \ 5]\n    // strange_sort_list([]) == []\n    public static List<long> StrangeSortList(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
  \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,\
  \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
  \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
  \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
  \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
  \ (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
  \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
  \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
  \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
  \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
  \    }\n\n}\n"
completions: ["        var sorted = lst.OrderBy(x => x).ToList();\n        var result\
    \ = new List<long>();\n        var i = 0;\n        while (sorted.Count > 0) {\n\
    \            if (i % 2 == 0) {\n                result.Add(sorted[0]);\n     \
    \           sorted.RemoveAt(0);\n            } else {\n                result.Add(sorted[sorted.Count\
    \ - 1]);\n                sorted.RemoveAt(sorted.Count - 1);\n            }\n\
    \            i++;\n        }\n        return result;", "        if (lst.Count\
    \ == 0) {\n            return lst;\n        }\n        var sorted = lst.OrderBy(x\
    \ => x).ToList();\n        var result = new List<long>();\n        var i = 0;\n\
    \        var j = sorted.Count - 1;\n        while (i <= j) {\n            result.Add(sorted[i]);\n\
    \            if (i != j) {\n                result.Add(sorted[j]);\n         \
    \   }\n            i++;\n            j--;\n        }\n        return result;",
  "        if (lst.Count == 0) {\n            return lst;\n        }\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        int index = 0;\n        while (result.Count < lst.Count)\
    \ {\n            if (index % 2 == 0) {\n                result.Add(min);\n   \
    \             lst.Remove(min);\n                min = lst.Min();\n           \
    \ } else {\n                result.Add(max);\n                lst.Remove(max);\n\
    \                max = lst.Max();\n            }\n            index++;\n     \
    \   }\n        return result;", "        if (lst.Count == 0) {\n            return\
    \ lst;\n        }\n        lst.Sort();\n        List<long> res = new List<long>();\n\
    \        int i = 0;\n        int j = lst.Count - 1;\n        while (i <= j) {\n\
    \            res.Add(lst[i]);\n            i++;\n            if (i <= j) {\n \
    \               res.Add(lst[j]);\n                j--;\n            }\n      \
    \  }\n        return res;", "        if (lst.Count == 0) {\n            return\
    \ lst;\n        }\n        List<long> result = new List<long>();\n        result.Add(lst.Min());\n\
    \        lst.Remove(lst.Min());\n        while (lst.Count > 0) {\n           \
    \ if (lst.Count == 1) {\n                result.Add(lst[0]);\n               \
    \ lst.RemoveAt(0);\n            } else {\n                result.Add(lst.Max());\n\
    \                lst.Remove(lst.Max());\n                result.Add(lst.Min());\n\
    \                lst.Remove(lst.Min());\n            }\n        }\n        return\
    \ result;", "        if (lst.Count == 0) return lst;\n        List<long> result\
    \ = new List<long>();\n        result.Add(lst.Min());\n        lst.Remove(lst.Min());\n\
    \        while (lst.Count > 0) {\n            result.Add(lst.Max());\n       \
    \     lst.Remove(lst.Max());\n            if (lst.Count > 0) {\n             \
    \   result.Add(lst.Min());\n                lst.Remove(lst.Min());\n         \
    \   }\n        }\n        return result;", "        // TODO: Implement strange\
    \ sorting.\n        return lst;", "        // TODO: Implement strange sorting.\n\
    \        return lst;", "        List<long> result = new List<long>();\n      \
    \  if (lst.Count == 0) {\n            return result;\n        }\n        if (lst.Count\
    \ == 1) {\n            result.Add(lst[0]);\n            return result;\n     \
    \   }\n        long min = lst.Min();\n        result.Add(min);\n        lst.Remove(min);\n\
    \        long max = lst.Max();\n        result.Add(max);\n        lst.Remove(max);\n\
    \        while (lst.Count > 0) {\n            min = lst.Min();\n            result.Add(min);\n\
    \            lst.Remove(min);\n            if (lst.Count == 0) {\n           \
    \     break;\n            }\n            max = lst.Max();\n            result.Add(max);\n\
    \            lst.Remove(max);\n        }\n        return result;", "        //\
    \ TODO: implement strange sort\n        return lst;", "        if (lst.Count ==\
    \ 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n\
    \        long min = lst.Min();\n        long max = lst.Max();\n        result.Add(min);\n\
    \        lst.Remove(min);\n        while (lst.Count > 0) {\n            if (lst.Count\
    \ == 1) {\n                result.Add(lst[0]);\n                break;\n     \
    \       }\n            if (lst.Count == 2) {\n                result.Add(lst[1]);\n\
    \                result.Add(lst[0]);\n                break;\n            }\n\
    \            long min_remaining = lst.Min();\n            long max_remaining =\
    \ lst.Max();\n            if (min_remaining == max) {\n                result.Add(min_remaining);\n\
    \                lst.Remove(min_remaining);\n                continue;\n     \
    \       }\n            if (max_remaining == min) {\n                result.Add(max_remaining);\n\
    \                lst.Remove(max_remaining);\n                continue;\n     \
    \       }\n            if (min_remaining == max_remaining) {\n               \
    \ result.Add(min_remaining);\n                lst.Remove(min_remaining);\n   \
    \             continue;\n            }\n            result.Add(max_remaining);\n\
    \            lst.Remove(max_remaining);\n            result.Add(min_remaining);\n\
    \            lst.Remove(min_remaining);\n        }\n        return result;", " \
    \       if (lst.Count == 0) {\n            return lst;\n        }\n        List<long>\
    \ result = new List<long>();\n        result.Add(lst.Min());\n        lst.Remove(lst.Min());\n\
    \        while (lst.Count > 0) {\n            result.Add(lst.Max());\n       \
    \     lst.Remove(lst.Max());\n            if (lst.Count > 0) {\n             \
    \   result.Add(lst.Min());\n                lst.Remove(lst.Min());\n         \
    \   }\n        }\n        return result;", "        // Your code here\n      \
    \  return lst;", "        if (lst.Count == 0) return lst;\n        List<long>\
    \ res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n  \
    \      lst1.Sort();\n        int i = 0;\n        while (lst1.Count > 0) {\n  \
    \          if (i % 2 == 0) {\n                res.Add(lst1[0]);\n            \
    \    lst1.RemoveAt(0);\n            } else {\n                res.Add(lst1[lst1.Count\
    \ - 1]);\n                lst1.RemoveAt(lst1.Count - 1);\n            }\n    \
    \        i++;\n        }\n        return res;", "        if (lst.Count == 0) return\
    \ lst;\n        List<long> result = new List<long>();\n        result.Add(lst.Min());\n\
    \        lst.Remove(lst.Min());\n        while (lst.Count > 0) {\n           \
    \ result.Add(lst.Max());\n            lst.Remove(lst.Max());\n            if (lst.Count\
    \ == 0) break;\n            result.Add(lst.Min());\n            lst.Remove(lst.Min());\n\
    \        }\n        return result;", "        if (lst.Count == 0) return lst;\n\
    \        List<long> res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n\
    \        List<long> lst2 = new List<long>(lst);\n        lst1.Sort();\n      \
    \  lst2.Sort();\n        lst2.Reverse();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (i % 2 == 0) {\n                res.Add(lst1[0]);\n \
    \               lst1.RemoveAt(0);\n            } else {\n                res.Add(lst2[0]);\n\
    \                lst2.RemoveAt(0);\n            }\n        }\n        return res;",
  "        var result = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n\
    \        var min = sorted.First();\n        var max = sorted.Last();\n       \
    \ var min_index = 0;\n        var max_index = sorted.Count - 1;\n        while\
    \ (min_index <= max_index) {\n            result.Add(sorted[min_index]);\n   \
    \         min_index++;\n            if (min_index <= max_index) {\n          \
    \      result.Add(sorted[max_index]);\n                max_index--;\n        \
    \    }\n        }\n        return result;", "        // Write your code here\n\
    \        return lst;", "        List<long> result = new List<long>();\n      \
    \  while (lst.Count > 0) {\n            long min = lst.Min();\n            lst.Remove(min);\n\
    \            result.Add(min);\n            if (lst.Count > 0) {\n            \
    \    long max = lst.Max();\n                lst.Remove(max);\n               \
    \ result.Add(max);\n            }\n        }\n        return result;", "     \
    \   if (lst.Count == 0) {\n            return lst;\n        }\n        List<long>\
    \ result = new List<long>();\n        lst.Sort();\n        int i = 0;\n      \
    \  int j = lst.Count - 1;\n        while (i <= j) {\n            result.Add(lst[i]);\n\
    \            i++;\n            if (i <= j) {\n                result.Add(lst[j]);\n\
    \                j--;\n            }\n        }\n        return result;", "  \
    \      if (lst.Count == 0) {\n            return lst;\n        }\n        var\
    \ result = new List<long>();\n        var min = lst.Min();\n        var max =\
    \ lst.Max();\n        var minIndex = lst.IndexOf(min);\n        var maxIndex =\
    \ lst.IndexOf(max);\n        result.Add(min);\n        result.Add(max);\n    \
    \    lst.RemoveAt(minIndex);\n        lst.RemoveAt(maxIndex - 1);\n        while\
    \ (lst.Count > 0) {\n            min = lst.Min();\n            max = lst.Max();\n\
    \            minIndex = lst.IndexOf(min);\n            maxIndex = lst.IndexOf(max);\n\
    \            result.Add(min);\n            result.Add(max);\n            lst.RemoveAt(minIndex);\n\
    \            lst.RemoveAt(maxIndex - 1);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (lst.Count == 0) {\n\
    \            return result;\n        }\n        lst.Sort();\n        int i = 0;\n\
    \        int j = lst.Count - 1;\n        while (i <= j) {\n            result.Add(lst[i]);\n\
    \            i++;\n            if (i <= j) {\n                result.Add(lst[j]);\n\
    \                j--;\n            }\n        }\n        return result;", "  \
    \      if (lst.Count == 0) {\n            return lst;\n        }\n        List<long>\
    \ result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n\
    \        while (remaining.Count > 0) {\n            long min = remaining.Min();\n\
    \            result.Add(min);\n            remaining.Remove(min);\n          \
    \  if (remaining.Count == 0) {\n                break;\n            }\n      \
    \      long max = remaining.Max();\n            result.Add(max);\n           \
    \ remaining.Remove(max);\n        }\n        return result;", "        if (lst.Count\
    \ == 0) return lst;\n        List<long> res = new List<long>();\n        List<long>\
    \ lst1 = new List<long>(lst);\n        List<long> lst2 = new List<long>(lst);\n\
    \        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n       \
    \ int i = 0;\n        while (lst1.Count > 0) {\n            if (i % 2 == 0) {\n\
    \                res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n      \
    \      } else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n\
    \            }\n            i++;\n        }\n        return res;", "        List<long>\
    \ result = new List<long>();\n        lst.Sort();\n        int i = 0;\n      \
    \  while (lst.Count > 0) {\n            if (i % 2 == 0) {\n                result.Add(lst[0]);\n\
    \                lst.RemoveAt(0);\n            } else {\n                result.Add(lst[lst.Count\
    \ - 1]);\n                lst.RemoveAt(lst.Count - 1);\n            }\n      \
    \      i++;\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (lst.Count == 0) {\n            return result;\n\
    \        }\n        lst.Sort();\n        int i = 0;\n        int j = lst.Count\
    \ - 1;\n        while (i <= j) {\n            result.Add(lst[i]);\n          \
    \  i++;\n            if (i <= j) {\n                result.Add(lst[j]);\n    \
    \            j--;\n            }\n        }\n        return result;", "      \
    \  if (lst.Count == 0) {\n            return lst;\n        }\n        List<long>\
    \ result = new List<long>();\n        result.Add(lst.Min());\n        lst.Remove(lst.Min());\n\
    \        while (lst.Count > 0) {\n            result.Add(lst.Max());\n       \
    \     lst.Remove(lst.Max());\n            if (lst.Count > 0) {\n             \
    \   result.Add(lst.Min());\n                lst.Remove(lst.Min());\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (lst.Count == 0) {\n            return result;\n        }\n      \
    \  if (lst.Count == 1) {\n            result.Add(lst[0]);\n            return\
    \ result;\n        }\n        long min = lst.Min();\n        result.Add(min);\n\
    \        lst.Remove(min);\n        while (lst.Count > 0) {\n            long max\
    \ = lst.Max();\n            result.Add(max);\n            lst.Remove(max);\n \
    \           if (lst.Count == 0) {\n                break;\n            }\n   \
    \         long min2 = lst.Min();\n            result.Add(min2);\n            lst.Remove(min2);\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ lst;", "        List<long> result = new List<long>();\n        if (lst.Count\
    \ == 0) {\n            return result;\n        }\n        lst.Sort();\n      \
    \  int i = 0;\n        int j = lst.Count - 1;\n        while (i <= j) {\n    \
    \        result.Add(lst[i]);\n            i++;\n            if (i <= j) {\n  \
    \              result.Add(lst[j]);\n                j--;\n            }\n    \
    \    }\n        return result;", "        if (lst.Count == 0) {\n            return\
    \ lst;\n        }\n        List<long> result = new List<long>();\n        result.Add(lst.Min());\n\
    \        lst.Remove(lst.Min());\n        while (lst.Count > 0) {\n           \
    \ result.Add(lst.Max());\n            lst.Remove(lst.Max());\n            if (lst.Count\
    \ > 0) {\n                result.Add(lst.Min());\n                lst.Remove(lst.Min());\n\
    \            }\n        }\n        return result;", "        List<long> ret =\
    \ new List<long>();\n        if (lst.Count == 0) return ret;\n        lst.Sort();\n\
    \        int i = 0;\n        int j = lst.Count - 1;\n        while (i <= j) {\n\
    \            ret.Add(lst[i]);\n            if (i != j) ret.Add(lst[j]);\n    \
    \        i++;\n            j--;\n        }\n        return ret;", "        if\
    \ (lst.Count == 0) return lst;\n        List<long> result = new List<long>();\n\
    \        result.Add(lst.Min());\n        lst.Remove(lst.Min());\n        while\
    \ (lst.Count > 0) {\n            result.Add(lst.Max());\n            lst.Remove(lst.Max());\n\
    \            if (lst.Count == 0) break;\n            result.Add(lst.Min());\n\
    \            lst.Remove(lst.Min());\n        }\n        return result;", "   \
    \     // Your code here\n        return lst;", "        if (lst.Count == 0) {\n\
    \            return lst;\n        }\n        List<long> res = new List<long>();\n\
    \        res.Add(lst.Min());\n        lst.Remove(lst.Min());\n        while (lst.Count\
    \ > 0) {\n            res.Add(lst.Max());\n            lst.Remove(lst.Max());\n\
    \            if (lst.Count > 0) {\n                res.Add(lst.Min());\n     \
    \           lst.Remove(lst.Min());\n            }\n        }\n        return res;",
  "        // TODO: Implement strange sort\n        return lst;", "        if (lst.Count\
    \ == 0) {\n            return lst;\n        }\n        List<long> result = new\
    \ List<long>();\n        List<long> sorted = lst.OrderBy(x => x).ToList();\n \
    \       int i = 0;\n        while (sorted.Count > 0) {\n            result.Add(sorted[i]);\n\
    \            sorted.RemoveAt(i);\n            if (sorted.Count == 0) {\n     \
    \           break;\n            }\n            i = sorted.Count - 1;\n       \
    \     result.Add(sorted[i]);\n            sorted.RemoveAt(i);\n            i =\
    \ 0;\n        }\n        return result;", "        if (lst.Count == 0) {\n   \
    \         return lst;\n        }\n        List<long> result = new List<long>();\n\
    \        bool add_max = true;\n        while (lst.Count > 0) {\n            long\
    \ max = lst.Max();\n            long min = lst.Min();\n            if (add_max)\
    \ {\n                result.Add(max);\n                lst.Remove(max);\n    \
    \        } else {\n                result.Add(min);\n                lst.Remove(min);\n\
    \            }\n            add_max = !add_max;\n        }\n        return result;",
  "        if (lst.Count == 0) return lst;\n        List<long> res = new List<long>();\n\
    \        res.Add(lst.Min());\n        lst.Remove(lst.Min());\n        while (lst.Count\
    \ > 0) {\n            res.Add(lst.Max());\n            lst.Remove(lst.Max());\n\
    \            if (lst.Count == 0) break;\n            res.Add(lst.Min());\n   \
    \         lst.Remove(lst.Min());\n        }\n        return res;", "        //\
    \ Your code here.\n        return lst;", "        // TODO: Implement strange sort\n\
    \        return lst;", "        // TODO: Implement strange sort list\n       \
    \ return lst;", "        List<long> res = new List<long>();\n        lst.Sort();\n\
    \        int i = 0;\n        while (lst.Count > 0) {\n            if (i % 2 ==\
    \ 0) {\n                res.Add(lst[0]);\n                lst.RemoveAt(0);\n \
    \           } else {\n                res.Add(lst[lst.Count - 1]);\n         \
    \       lst.RemoveAt(lst.Count - 1);\n            }\n            i++;\n      \
    \  }\n        return res;", "        List<long> result = new List<long>();\n \
    \       if (lst.Count == 0) {\n            return result;\n        }\n       \
    \ if (lst.Count == 1) {\n            result.Add(lst[0]);\n            return result;\n\
    \        }\n        lst.Sort();\n        int i = 0;\n        int j = lst.Count\
    \ - 1;\n        while (i <= j) {\n            result.Add(lst[i]);\n          \
    \  i++;\n            if (i > j) {\n                break;\n            }\n   \
    \         result.Add(lst[j]);\n            j--;\n        }\n        return result;",
  "        if (lst.Count == 0) return lst;\n        var result = new List<long>();\n\
    \        var sorted = lst.OrderBy(x => x).ToList();\n        var min = sorted[0];\n\
    \        var max = sorted[sorted.Count - 1];\n        var minIndex = 0;\n    \
    \    var maxIndex = sorted.Count - 1;\n        while (minIndex <= maxIndex) {\n\
    \            result.Add(min);\n            minIndex++;\n            if (minIndex\
    \ <= maxIndex) {\n                result.Add(max);\n                maxIndex--;\n\
    \            }\n        }\n        return result;", "        if (lst.Count ==\
    \ 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n\
    \        long min = lst.Min();\n        lst.Remove(min);\n        result.Add(min);\n\
    \        while (lst.Count > 0) {\n            long max = lst.Max();\n        \
    \    lst.Remove(max);\n            result.Add(max);\n            if (lst.Count\
    \ == 0) {\n                break;\n            }\n            min = lst.Min();\n\
    \            lst.Remove(min);\n            result.Add(min);\n        }\n     \
    \   return result;", "        // TODO: Implement StrangeSortList\n        return\
    \ lst;", "        if (lst.Count == 0) return lst;\n        List<long> res = new\
    \ List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n\
    \        int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==\
    \ 0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n\
    \            } else {\n                res.Add(lst2[lst2.Count - 1]);\n      \
    \          lst2.RemoveAt(lst2.Count - 1);\n            }\n            i++;\n \
    \       }\n        return res;", "        if (lst.Count == 0) {\n            return\
    \ lst;\n        }\n        List<long> res = new List<long>();\n        res.Add(lst.Min());\n\
    \        lst.Remove(lst.Min());\n        while (lst.Count > 0) {\n           \
    \ res.Add(lst.Max());\n            lst.Remove(lst.Max());\n            if (lst.Count\
    \ > 0) {\n                res.Add(lst.Min());\n                lst.Remove(lst.Min());\n\
    \            }\n        }\n        return res;", "        List<long> result =\
    \ new List<long>();\n        if (lst.Count == 0) {\n            return result;\n\
    \        }\n        if (lst.Count == 1) {\n            result.Add(lst[0]);\n \
    \           return result;\n        }\n        long min = lst.Min();\n       \
    \ long max = lst.Max();\n        result.Add(min);\n        lst.Remove(min);\n\
    \        result.Add(max);\n        lst.Remove(max);\n        while (lst.Count\
    \ > 0) {\n            min = lst.Min();\n            max = lst.Max();\n       \
    \     result.Add(min);\n            lst.Remove(min);\n            result.Add(max);\n\
    \            lst.Remove(max);\n        }\n        return result;", "        var\
    \ sorted = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n\
    \        while (sorted.Count > 0) {\n            result.Add(sorted[0]);\n    \
    \        sorted.RemoveAt(0);\n            if (sorted.Count > 0) {\n          \
    \      result.Add(sorted[sorted.Count - 1]);\n                sorted.RemoveAt(sorted.Count\
    \ - 1);\n            }\n        }\n        return result;", "        List<long>\
    \ sorted = new List<long>();\n        if (lst.Count == 0) {\n            return\
    \ sorted;\n        }\n        lst.Sort();\n        int i = 0;\n        int j =\
    \ lst.Count - 1;\n        while (i <= j) {\n            sorted.Add(lst[i]);\n\
    \            if (i != j) {\n                sorted.Add(lst[j]);\n            }\n\
    \            i++;\n            j--;\n        }\n        return sorted;", "   \
    \     List<long> res = new List<long>();\n        while (lst.Count > 0) {\n  \
    \          long min = lst.Min();\n            res.Add(min);\n            lst.Remove(min);\n\
    \            if (lst.Count == 0) {\n                break;\n            }\n  \
    \          long max = lst.Max();\n            res.Add(max);\n            lst.Remove(max);\n\
    \        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        if (lst.Count == 0) {\n            return result;\n        }\n      \
    \  lst.Sort();\n        int i = 0;\n        int j = lst.Count - 1;\n        while\
    \ (i <= j) {\n            result.Add(lst[i]);\n            i++;\n            if\
    \ (i <= j) {\n                result.Add(lst[j]);\n                j--;\n    \
    \        }\n        }\n        return result;", "        if (lst.Count == 0) return\
    \ lst;\n        List<long> res = new List<long>();\n        res.Add(lst.Min());\n\
    \        lst.Remove(lst.Min());\n        while (lst.Count > 0) {\n           \
    \ res.Add(lst.Max());\n            lst.Remove(lst.Max());\n            if (lst.Count\
    \ == 0) break;\n            res.Add(lst.Min());\n            lst.Remove(lst.Min());\n\
    \        }\n        return res;", "        // TODO: Implement StrangeSortList\n\
    \        return null;", "        if (lst.Count == 0) return lst;\n        List<long>\
    \ res = new List<long>();\n        res.Add(lst.Min());\n        lst.Remove(lst.Min());\n\
    \        while (lst.Count > 0) {\n            res.Add(lst.Max());\n          \
    \  lst.Remove(lst.Max());\n            if (lst.Count == 0) break;\n          \
    \  res.Add(lst.Min());\n            lst.Remove(lst.Min());\n        }\n      \
    \  return res;", "        List<long> result = new List<long>();\n        if (lst.Count\
    \ == 0) {\n            return result;\n        }\n        int i = 0;\n       \
    \ while (lst.Count > 0) {\n            if (i % 2 == 0) {\n                result.Add(lst.Min());\n\
    \                lst.Remove(lst.Min());\n            } else {\n              \
    \  result.Add(lst.Max());\n                lst.Remove(lst.Max());\n          \
    \  }\n            i++;\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n  \
    \      var min = sorted.First();\n        var max = sorted.Last();\n        var\
    \ minIndex = 0;\n        var maxIndex = sorted.Count - 1;\n        var minCount\
    \ = 0;\n        var maxCount = 0;\n        while (minCount < sorted.Count / 2)\
    \ {\n            result.Add(min);\n            minCount++;\n            minIndex++;\n\
    \            if (maxCount < sorted.Count / 2) {\n                result.Add(max);\n\
    \                maxCount++;\n                maxIndex--;\n            }\n   \
    \         min = sorted[minIndex];\n            max = sorted[maxIndex];\n     \
    \   }\n        if (sorted.Count % 2 == 1) {\n            result.Add(min);\n  \
    \      }\n        return result;", "        if (lst.Count == 0) return lst;\n\
    \        var sorted = lst.OrderBy(x => x).ToList();\n        var result = new\
    \ List<long>();\n        var i = 0;\n        var j = sorted.Count - 1;\n     \
    \   while (i <= j) {\n            result.Add(sorted[i]);\n            if (i !=\
    \ j) result.Add(sorted[j]);\n            i++;\n            j--;\n        }\n \
    \       return result;", "        // TODO: Implement strange sort.\n        return\
    \ lst;", "        // TODO: Implement StrangeSortList\n        return null;", " \
    \       // TODO: Implement strange sort.\n        return lst;", "        List<long>\
    \ res = new List<long>();\n        if (lst.Count == 0) return res;\n        lst.Sort();\n\
    \        int i = 0;\n        while (lst.Count > 0) {\n            res.Add(lst[i]);\n\
    \            lst.RemoveAt(i);\n            if (lst.Count == 0) break;\n      \
    \      i = lst.Count - 1;\n            res.Add(lst[i]);\n            lst.RemoveAt(i);\n\
    \            i = 0;\n        }\n        return res;", "        if (lst.Count ==\
    \ 0) return lst;\n        List<long> res = new List<long>();\n        res.Add(lst.Min());\n\
    \        lst.Remove(lst.Min());\n        while (lst.Count > 0) {\n           \
    \ res.Add(lst.Max());\n            lst.Remove(lst.Max());\n            if (lst.Count\
    \ == 0) break;\n            res.Add(lst.Min());\n            lst.Remove(lst.Min());\n\
    \        }\n        return res;", "        // TODO: Implement strange sorting.\n\
    \        return lst;", "        if (lst.Count == 0) {\n            return lst;\n\
    \        }\n        var sorted = lst.OrderBy(x => x).ToList();\n        var result\
    \ = new List<long>();\n        var i = 0;\n        var j = sorted.Count - 1;\n\
    \        while (i <= j) {\n            result.Add(sorted[i]);\n            if\
    \ (i != j) {\n                result.Add(sorted[j]);\n            }\n        \
    \    i++;\n            j--;\n        }\n        return result;", "        // Your\
    \ code here\n        return lst;", "        if (lst.Count == 0) {\n          \
    \  return lst;\n        }\n        var result = new List<long>();\n        var\
    \ sorted = lst.OrderBy(x => x).ToList();\n        var min = sorted[0];\n     \
    \   var max = sorted[sorted.Count - 1];\n        var minIndex = 0;\n        var\
    \ maxIndex = sorted.Count - 1;\n        var isMin = true;\n        while (result.Count\
    \ < lst.Count) {\n            if (isMin) {\n                result.Add(min);\n\
    \                minIndex++;\n                if (minIndex < sorted.Count) {\n\
    \                    min = sorted[minIndex];\n                }\n            }\
    \ else {\n                result.Add(max);\n                maxIndex--;\n    \
    \            if (maxIndex >= 0) {\n                    max = sorted[maxIndex];\n\
    \                }\n            }\n            isMin = !isMin;\n        }\n  \
    \      return result;", "        // Your code here\n        return lst;", "  \
    \      // TODO: Implement strange sorting.\n        return lst;", "        //\
    \ TODO: Implement me\n        return lst;", "        if (lst.Count == 0) {\n \
    \           return lst;\n        }\n        var result = new List<long>();\n \
    \       var sorted = lst.OrderBy(x => x).ToList();\n        var min = sorted[0];\n\
    \        var max = sorted[sorted.Count - 1];\n        var minIndex = 0;\n    \
    \    var maxIndex = sorted.Count - 1;\n        var minMax = true;\n        while\
    \ (result.Count < lst.Count) {\n            if (minMax) {\n                result.Add(min);\n\
    \                minIndex++;\n                if (minIndex < sorted.Count) {\n\
    \                    min = sorted[minIndex];\n                }\n            }\
    \ else {\n                result.Add(max);\n                maxIndex--;\n    \
    \            if (maxIndex >= 0) {\n                    max = sorted[maxIndex];\n\
    \                }\n            }\n            minMax = !minMax;\n        }\n\
    \        return result;", "        // TODO: Implement strange sort\n        return\
    \ lst;", "        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> res = new List<long>();\n        List<long> rem = new List<long>(lst);\n\
    \        long min = rem.Min();\n        res.Add(min);\n        rem.Remove(min);\n\
    \        while (rem.Count > 0) {\n            long max = rem.Max();\n        \
    \    res.Add(max);\n            rem.Remove(max);\n            if (rem.Count ==\
    \ 0) {\n                break;\n            }\n            min = rem.Min();\n\
    \            res.Add(min);\n            rem.Remove(min);\n        }\n        return\
    \ res;", "        List<long> res = new List<long>();\n        if (lst.Count ==\
    \ 0) {\n            return res;\n        }\n        long min = lst.Min();\n  \
    \      long max = lst.Max();\n        int index = 0;\n        while (res.Count\
    \ < lst.Count) {\n            if (index % 2 == 0) {\n                res.Add(min);\n\
    \                lst.Remove(min);\n                min = lst.Min();\n        \
    \    } else {\n                res.Add(max);\n                lst.Remove(max);\n\
    \                max = lst.Max();\n            }\n            index++;\n     \
    \   }\n        return res;"]
stop_tokens:
- "\n    }\n"
