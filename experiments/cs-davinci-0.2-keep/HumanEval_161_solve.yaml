name: HumanEval_161_solve
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // solve(\"1234\") =\
  \ \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n \
  \   public static string Solve(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"\
  AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\"\
  )));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"\
  #a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"\
  #aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"\
  #$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\"\
  )));\n    }\n\n}\n"
completions: ["        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c\
    \ => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) :\
    \ c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n\
    \        }", "        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c\
    \ => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) :\
    \ c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n\
    \        }", "        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c\
    \ => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) :\
    \ c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n\
    \        }", "        // TODO: Implement your solution here\n        return \"\
    \";", "        if (s.All(c => !char.IsLetter(c))) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        if (s.Length\
    \ == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n \
    \               sb.Append(char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n\
    \            } else {\n                sb.Append(s[i]);\n            }\n     \
    \   }\n        return sb.ToString();", "        var sb = new StringBuilder();\n\
    \        var hasLetter = false;\n        foreach (var c in s) {\n            if\
    \ (char.IsLetter(c)) {\n                hasLetter = true;\n                sb.Append(char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return hasLetter ? sb.ToString()\
    \ : new string(s.Reverse().ToArray());", "        // Your code goes here\n   \
    \     return \"\";", "        if (s.Any(char.IsLetter)) {\n            return\
    \ new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        if (s.All(c\
    \ => !char.IsLetter(c)))\n            return new string(s.Reverse().ToArray());\n\
    \        return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c) ?\
    \ char.ToLower(c) : char.ToUpper(c)) : c).ToArray());", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        if (s.Any(char.IsLetter))\
    \ {\n            return string.Concat(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c));\n        }\n        return new string(s.Reverse().ToArray());",
  "        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c =>\
    \ char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n\
    \        } else {\n            return new string(s.Reverse().ToArray());\n   \
    \     }", "        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c\
    \ => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) :\
    \ c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n\
    \        }", "        // Write your code here\n        return \"\";", "      \
    \  if (s.All(char.IsDigit)) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());", "        // Write your\
    \ code here\n        return \"\";", "        if (s.Any(char.IsLetter)) {\n   \
    \         return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ?\
    \ char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n     \
    \       return new string(s.Reverse().ToArray());\n        }"]
stop_tokens:
- "\n    }\n"
