name: HumanEval_139_special_factorial
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n \
  \   // >>> special_factorial(4)\n    // 288\n    // The function will receive an\
  \ integer as input and should return the special\n    // factorial of this integer.\n\
  \    public static long SpecialFactorial(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
  \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
  \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\
  \n}\n"
completions: ["        long result = 1;\n        for (int i = 1; i <= n; i++) {\n\
    \            result *= Factorial(i);\n        }\n        return result;", "  \
    \      // TODO: Implement this function\n        long result = 1;\n        for\
    \ (int i = 1; i <= n; i++)\n        {\n            result *= Factorial(i);\n \
    \       }\n        return result;", "        long result = 1;\n        for (long\
    \ i = n; i > 0; i--) {\n            result *= Factorial(i);\n        }\n     \
    \   return result;", "        if (n == 0) {\n            return 1;\n        }\n\
    \        return n * SpecialFactorial(n - 1);", "        // TODO: Implement this\
    \ function\n        return 0;", "        long result = 1;\n        for (long i\
    \ = n; i > 0; i--) {\n            result *= Factorial(i);\n        }\n       \
    \ return result;", "        long result = 1;\n        for (long i = n; i > 0;\
    \ i--) {\n            result *= Factorial(i);\n        }\n        return result;",
  "        // TODO: Implement the function here\n        long result = 1;\n      \
    \  for (long i = n; i > 0; i--)\n        {\n            result *= Factorial(i);\n\
    \        }\n        return result;", "        long result = 1;\n        for (long\
    \ i = n; i > 0; i--) {\n            result *= Factorial(i);\n        }\n     \
    \   return result;", "        long result = 1;\n        for (long i = n; i > 0;\
    \ i--) {\n            result *= Factorial(i);\n        }\n        return result;",
  "        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result\
    \ *= Factorial(i);\n        }\n        return result;", "        // TODO: Implement\
    \ the function here.\n        return 0;", "        long result = 1;\n        for\
    \ (long i = 1; i <= n; i++) {\n            result *= Factorial(i);\n        }\n\
    \        return result;", "        long result = 1;\n        for (long i = n;\
    \ i > 0; i--) {\n            result *= Factorial(i);\n        }\n        return\
    \ result;", "        if (n == 0) {\n            return 1;\n        }\n       \
    \ return n * SpecialFactorial(n - 1);", "        // TODO: Implement this function\n\
    \        return 0;", "        long result = 1;\n        for (int i = 1; i <= n;\
    \ i++) {\n            result *= Factorial(i);\n        }\n        return result;",
  "        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result\
    \ *= Factorial(i);\n        }\n        return result;", "        // TODO: Implement\
    \ this function\n        long result = 1;\n        for (int i = 1; i <= n; i++)\n\
    \        {\n            result *= Factorial(i);\n        }\n        return result;",
  "        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result\
    \ *= Factorial(i);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
