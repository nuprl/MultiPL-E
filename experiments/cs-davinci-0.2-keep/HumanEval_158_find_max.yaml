name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // find_max([\"\
  name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\"\
  , \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"\
  aaaaaaa\"\n    public static string FindMax(List<string> words) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        int max = 0;\n        string maxStr = \"\";\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max) {\n                max = count;\n                maxStr = word;\n\
    \            }\n        }\n        return maxStr;", "        // TODO: Implement\
    \ this function.\n        int max = 0;\n        string maxWord = \"\";\n     \
    \   foreach (string word in words) {\n            int count = 0;\n           \
    \ foreach (char c in word) {\n                if (!word.Contains(c)) {\n     \
    \               count++;\n                }\n            }\n            if (count\
    \ > max) {\n                max = count;\n                maxWord = word;\n  \
    \          }\n        }\n        return maxWord;", "        // TODO: implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", '        return null;', "        // Write your code here\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement me\n        return \"\";", '        return
    words.OrderByDescending(x => x.Distinct().Count()).ThenBy(x => x).First();', " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement me\n        return \"\";", "        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max) {\n                max = count;\n \
    \               maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // Write your code here.\n        int max = 0;\n        string result =\
    \ \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (!result.Contains(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                result\
    \ = word;\n            }\n        }\n        return result;", "        // TODO:\
    \ implement this function\n        return \"\";", "        string max = \"\";\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        // TODO: Implement me\n        return\
    \ \"\";", "        // TODO: implement this function\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ implement\n        return \"\";", '        return words.OrderByDescending(w
    => w.Distinct().Count()).ThenBy(w => w).First();', "        // TODO: Implement\
    \ this function\n        return \"\";", '        return words.OrderByDescending(word
    => word.Distinct().Count()).ThenBy(word => word).First();', "        // TODO:\
    \ Implement me\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement me\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: implement this function\n        return \"\";", " \
    \       // TODO: Implement me\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: implement this function\n\
    \        int max = 0;\n        string maxWord = \"\";\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (!word.Contains(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        // TODO: Implement this function\n       \
    \ return \"\";", "        // TODO: Implement this function\n        return \"\"\
    ;", "        // TODO: Implement this function\n        return \"\";", "      \
    \  // TODO\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: implement\
    \ this function\n        return \"\";", '        return words.OrderByDescending(x
    => x.Distinct().Count()).ThenBy(x => x).First();', "        // TODO: Implement\
    \ this function.\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement me\n        return \"\";",
  "        if (words.Count == 0) {\n            return \"\";\n        }\n        string\
    \ max = words[0];\n        int max_unique = 0;\n        foreach (string word in\
    \ words) {\n            int unique = 0;\n            foreach (char c in word)\
    \ {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n         \
    \           unique++;\n                }\n            }\n            if (unique\
    \ > max_unique) {\n                max = word;\n                max_unique = unique;\n\
    \            }\n        }\n        return max;", "        // TODO: Implement this\
    \ function\n        return \"\";", "        string max = \"\";\n        int max_unique\
    \ = 0;\n        foreach (string word in words) {\n            int unique = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    unique++;\n                }\n \
    \           }\n            if (unique > max_unique) {\n                max = word;\n\
    \                max_unique = unique;\n            }\n        }\n        return\
    \ max;", "        // TODO: Implement this function\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        int max = 0;\n        string\
    \ maxWord = \"\";\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: implement this function\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        int max = 0;\n        string result = \"\"\
    ;\n        foreach (string word in words) {\n            HashSet<char> set = new\
    \ HashSet<char>();\n            foreach (char c in word) {\n                set.Add(c);\n\
    \            }\n            if (set.Count > max) {\n                max = set.Count;\n\
    \                result = word;\n            }\n        }\n        return result;",
  "        // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ implement\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        int\
    \ max = 0;\n        string maxWord = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        int max = 0;\n        string maxWord = \"\";\n        foreach\
    \ (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > max) {\n                max = count;\n              \
    \  maxWord = word;\n            }\n        }\n        return maxWord;", "    \
    \    // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // TODO: implement this function\n        return\
    \ \"\";", "        int max = 0;\n        string maxWord = \"\";\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            for (int i\
    \ = 0; i < word.Length; i++) {\n                if (word.IndexOf(word[i]) == i)\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        string\
    \ max = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        // Your code here\n       \
    \ return \"\";", "        // TODO: Implement this function\n        return \"\"\
    ;", "        // TODO: Implement this function.\n        return \"\";", "     \
    \   // TODO: implement this function\n        return \"\";", "        int max\
    \ = 0;\n        string result = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                result = word;\n            }\n\
    \        }\n        return result;", "        // TODO: implement this function\n\
    \        return null;", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        string max = \"\";\n        int\
    \ max_count = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", '        return "";', "        // TODO: Implement this function\n   \
    \     return null;", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: implement this function\n        return \"\";", " \
    \       string max = \"\";\n        int max_count = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > max_count) {\n                max = word;\n                max_count = count;\n\
    \            }\n        }\n        return max;", "        // TODO: Implement this\
    \ function.\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // Write your code here\n        int max = 0;\n\
    \        string result = \"\";\n        foreach (string word in words) {\n   \
    \         int count = 0;\n            foreach (char c in word) {\n           \
    \     if (!result.Contains(c)) {\n                    count++;\n             \
    \   }\n            }\n            if (count > max) {\n                max = count;\n\
    \                result = word;\n            }\n        }\n        return result;",
  "        var max = words.Select(x => x.Distinct().Count()).Max();\n        return\
    \ words.Where(x => x.Distinct().Count() == max).First();", "        // TODO: Implement\
    \ me\n        return \"\";"]
stop_tokens:
- "\n    }\n"
