language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i - 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <d058c8e0199e44fdab07d472eaf1bf0f>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d058c8e0199e44fdab07d472eaf1bf0f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <d058c8e0199e44fdab07d472eaf1bf0f>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d058c8e0199e44fdab07d472eaf1bf0f>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 0) {\n
    \           return result;\n        }\n        result.Add(1);\n        if (n ==
    1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        if
    (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i - 4]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452f83eab8114bd0bc8e2d52eb3c74bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452f83eab8114bd0bc8e2d52eb3c74bb>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008d] in <452f83"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <ef3af7a90d6a492381f3370fc65913e2>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ef3af7a90d6a492381f3370fc65913e2>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <ef3af7a90d6a492381f3370fc65913e2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ef3af7a90d6a492381f3370fc65913e2>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n        ret.Add(1);\n        ret.Add(3);\n
    \       ret.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                ret.Add(1 + i / 2);\n            } else {\n                ret.Add(ret[i
    - 1] + ret[i - 2] + ret[i + 1]);\n            }\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <9ec47ce7413e4104bdc33a294eb58c9c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <9ec47ce7413e4104bdc33a294eb58c9c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <9ec47ce7413e4104bdc33a294eb58c9c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <9ec47ce7413e4104bdc33a294eb58c9c>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var ans = new List<long>();\n        ans.Add(1);\n        ans.Add(3);\n
    \       ans.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                ans.Add(1 + i / 2);\n            } else {\n                ans.Add(ans[i
    - 1] + ans[i - 2] + ans[i + 1]);\n            }\n        }\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        var tri = new long[n
    + 1];\n        tri[0] = 1;\n        tri[1] = 3;\n        tri[2] = 2;\n        for
    (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tri[i]
    = 1 + i / 2;\n            } else {\n                tri[i] = tri[i - 1] + tri[i
    - 2] + tri[i + 1];\n            }\n        }\n        for (int i = 0; i <= n;
    i++) {\n            result.Add(tri[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0003e] in <e6bf44c51fde4e2282fa1090036f589c>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <e6bf44c51fde4e2282fa1090036f589c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0003e]
    in <e6bf44c51fde4e2282fa1090036f589c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <e6bf44c51fde4e2282fa1090036f589c>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            result.Add(result[i - 1] + result[i - 2] + result[i - 3]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <990e7df4a55d4fd38240544aec57ae57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <990e7df4a55d4fd38240544aec57ae57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        long a = 1, b =
    3, c = 2;\n        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n
    \       for (long i = 3; i <= n; i++) {\n            long d = 0;\n            if
    (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n                d
    = a + b + c;\n            }\n            result.Add(d);\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff32b2afab294318810b7ae36f980322>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff32b2afab294318810b7ae36f980322>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            result.Add(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i
    - 2] + result[i + 1]);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003f] in <12e3d20bbcae4d66aa48063e90939dbf>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <12e3d20bbcae4d66aa48063e90939dbf>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003f]
    in <12e3d20bbcae4d66aa48063e90939dbf>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <12e3d20bbcae4d66aa48063e90939dbf>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var ans = new List<long>();\n        ans.Add(1);\n        ans.Add(3);\n
    \       ans.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                ans.Add(1 + i / 2);\n            } else {\n                ans.Add(ans[i
    - 1] + ans[i - 2] + ans[i + 1]);\n            }\n        }\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var ans = new List<long>();\n        ans.Add(1);\n        ans.Add(3);\n
    \       ans.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                ans.Add(1 + i / 2);\n            } else {\n                ans.Add(ans[i
    - 1] + ans[i - 2] + ans[i + 1]);\n            }\n        }\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aa9120846bb47549977fd55956d6506>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aa9120846bb47549977fd55956d6506>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // TODO: Implement your solution here\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <e4f971a8a6a248a489145ec85d543550>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <e4f971a8a6a248a489145ec85d543550>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ff1725dc70594ed1a957cf603cd71c46>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ff1725dc70594ed1a957cf603cd71c46>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i - 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <887ca469057a451681f7a4fc175c6f74>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <887ca469057a451681f7a4fc175c6f74>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <887ca469057a451681f7a4fc175c6f74>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <887ca469057a451681f7a4fc175c6f74>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // TODO: Implement this function.\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <700c2ebad9c34bd4baa143b4b26ff453>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <700c2ebad9c34bd4baa143b4b26ff453>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfz676_ri.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_pzhh_4.cs(27,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            return result;\n        }\n        result.Add(1);\n        if
    (n == 1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        if
    (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 2] + result[i - 3]
    + result[i - 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7370f1387d24fc88625dbf93f6fb92e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7370f1387d24fc88625dbf93f6fb92e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000a2] in <a7370f"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk5r9v68s.cs(27,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code here\n        return new List<long>();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94a5611d081a4da88f0d3ea2f28f5a1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94a5611d081a4da88f0d3ea2f28f5a1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n
    \       list.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                list.Add(1 + i / 2);\n            } else {\n                list.Add(list[i
    - 1] + list[i - 2] + list[i + 1]);\n            }\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8a99c0e422334194ae55db5bd478073f>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8a99c0e422334194ae55db5bd478073f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8a99c0e422334194ae55db5bd478073f>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8a99c0e422334194ae55db5bd478073f>:0 \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Write your code here\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <d6b7017b31ab44c7867f617f5db49651>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <d6b7017b31ab44c7867f617f5db49651>:0
    \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfz676_ri.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // TODO: Write your code here\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <2d2224455a21472abfac9f01ac42d03f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <2d2224455a21472abfac9f01ac42d03f>:0
    \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for
    (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef54eb9b1df64fd9ac90b32016b6856e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef54eb9b1df64fd9ac90b32016b6856e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005f] in <ef54eb"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        if (n == 0)
    {\n            res.Add(1);\n            return res;\n        }\n        if (n
    == 1) {\n            res.Add(1);\n            res.Add(3);\n            return
    res;\n        }\n        if (n == 2) {\n            res.Add(1);\n            res.Add(3);\n
    \           res.Add(2);\n            return res;\n        }\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000c8] in <bc649ebb816147349ada900cb91fed5d>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bc649ebb816147349ada900cb91fed5d>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x000c8]
    in <bc649ebb816147349ada900cb91fed5d>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bc649ebb816147349ada900cb91fed5d>:0 \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // TODO: Implement your solution here\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <e4f971a8a6a248a489145ec85d543550>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <e4f971a8a6a248a489145ec85d543550>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n
    \       list.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                list.Add(1 + i / 2);\n            } else {\n                list.Add(list[i
    - 1] + list[i - 2] + list[i + 1]);\n            }\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8a99c0e422334194ae55db5bd478073f>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8a99c0e422334194ae55db5bd478073f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8a99c0e422334194ae55db5bd478073f>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8a99c0e422334194ae55db5bd478073f>:0 \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i
    - 3]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6dd59ecc7a24348897808ff96aa668a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6dd59ecc7a24348897808ff96aa668a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            return result;\n        }\n        result.Add(1);\n        if
    (n == 1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        if
    (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 2] + result[i - 3]
    + result[i - 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7370f1387d24fc88625dbf93f6fb92e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7370f1387d24fc88625dbf93f6fb92e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000a2] in <a7370f"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvrjezie.cs(27,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        for (long i = 1; i
    <= n + 1; i++) {\n            res.Add(Tri(i));\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgloh7j23.cs(27,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk5r9v68s.cs(27,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 0) {\n
    \           return result;\n        }\n        result.Add(1);\n        if (n ==
    1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        if
    (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i - 4]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452f83eab8114bd0bc8e2d52eb3c74bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452f83eab8114bd0bc8e2d52eb3c74bb>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008d] in <452f83"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Write your code here\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <d6b7017b31ab44c7867f617f5db49651>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <d6b7017b31ab44c7867f617f5db49651>:0
    \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <cde1ebb3125846a197bac371c219edc8>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <cde1ebb3125846a197bac371c219edc8>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <cde1ebb3125846a197bac371c219edc8>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <cde1ebb3125846a197bac371c219edc8>:0 \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnilhcqj.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        for (int i = 0; i
    <= n; i++) {\n            if (i == 0) {\n                res.Add(1);\n            }
    else if (i == 1) {\n                res.Add(3);\n            } else if (i == 2)
    {\n                res.Add(2);\n            } else if (i % 2 == 0) {\n                res.Add(1
    + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i -
    2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00081] in <eb54181cc52b44edba90e9dde0a7f6c2>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <eb54181cc52b44edba90e9dde0a7f6c2>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00081]
    in <eb54181cc52b44edba90e9dde0a7f6c2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <eb54181cc52b44edba90e9dde0a7f6c2>:0 \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <3db978354583440d833ad9f86cef1989>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3db978354583440d833ad9f86cef1989>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ce59d3c2a6c147228bff7dfecf80f4ce>:0
    \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 1;
    i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx14x1dj1.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <53f59d01261142e69ecf8a10b1cda5a4>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <09ea39d97d80457a836cbd0f823f2928>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <09ea39d97d80457a836cbd0f823f2928>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <bbcf90ad28b944f4b378e907588c1eac>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bbcf90ad28b944f4b378e907588c1eac>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <c638aab956b244509d7f47adede43113>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c638aab956b244509d7f47adede43113>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        var ans = new List<long>();\n        ans.Add(1);\n        ans.Add(3);\n
    \       ans.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                ans.Add(1 + i / 2);\n            } else {\n                ans.Add(ans[i
    - 1] + ans[i - 2] + ans[i + 1]);\n            }\n        }\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <427ebceae7234920bc6a3f643a8b51a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <427ebceae7234920bc6a3f643a8b51a7>:0 \n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <a63408c98e72453b858f817c8a21d21c>:0
    \n"
  stdout: ''
  timestamp: 1659794486
