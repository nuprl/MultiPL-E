language: cs
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item >= 1 && item <= 9) {\n                result.Add(item.ToString());\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a810c4e58a224d60bf8cbc65e3996e4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a810c4e58a224d60bf8cbc65e3996e4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        return arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse().Select(x\
    \ => x.ToString()).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3d738a4ee764525bb6e4eb903babc84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3d738a4ee764525bb6e4eb903babc84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item > 0 && item < 10) {\n                result.Add(item.ToString());\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0eca99aa96e40e6bf7b5c424031328d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0eca99aa96e40e6bf7b5c424031328d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num <\
    \ 1 || num > 9) {\n                continue;\n            }\n            switch\
    \ (num) {\n                case 1:\n                    result.Add(\"One\");\n\
    \                    break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var map = new Dictionary<long,\
    \ string>() {\n            {1, \"One\"},\n            {2, \"Two\"},\n        \
    \    {3, \"Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n\
    \            {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"\
    },\n            {9, \"Nine\"}\n        };\n        arr.Sort();\n        arr.Reverse();\n\
    \        foreach (var item in arr) {\n            if (map.ContainsKey(item)) {\n\
    \                result.Add(map[item]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5844483ad50e4f1ca4529b8a18dd9fe0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5844483ad50e4f1ca4529b8a18dd9fe0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> sorted =\
    \ arr.OrderBy(x => x).ToList();\n        sorted.Reverse();\n        foreach (long\
    \ num in sorted) {\n            if (num >= 1 && num <= 9) {\n                result.Add(NumberToString(num));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqltu3sz.cs(34,28): error CS0103: The name ''NumberToString'' does not
    exist in the current context

    '
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0)\n        {\n            return result;\n        }\n\
    \        arr.Sort();\n        arr.Reverse();\n        foreach (long num in arr)\n\
    \        {\n            if (num > 0 && num < 10)\n            {\n            \
    \    switch (num)\n                {\n                    case 1:\n          \
    \              result.Add(\"One\");\n                        break;\n        \
    \            case 2:\n                        result.Add(\"Two\");\n         \
    \               break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <608a561ac112446fac0aa2d27352cb0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <608a561ac112446fac0aa2d27352cb0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(\"One\");\n\
    \            }\n            if (i == 2) {\n                result.Add(\"Two\"\
    );\n            }\n            if (i == 3) {\n                result.Add(\"Three\"\
    );\n            }\n            if (i == 4) {\n                result.Add(\"Four\"\
    );\n            }\n            if (i == 5) {\n                result.Add(\"Five\"\
    );\n            }\n            if (i == 6) {\n                result.Add(\"Six\"\
    );\n            }\n            if (i == 7) {\n                result.Add(\"Seven\"\
    );\n            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var item\
    \ in arr) {\n            if (item == 1) {\n                result.Add(\"One\"\
    );\n            } else if (item == 2) {\n                result.Add(\"Two\");\n\
    \            } else if (item == 3) {\n                result.Add(\"Three\");\n\
    \            } else if (item == 4) {\n                result.Add(\"Four\");\n\
    \            } else if (item == 5) {\n                result.Add(\"Five\");\n\
    \            } else if (item == 6) {\n                result.Add(\"Six\");\n \
    \           } else if (item == 7) {\n                result.Add(\"Seven\");\n\
    \            } else if (item == 8) {\n                result.Add(\"Eight\");\n\
    \            } else if (item == 9) {\n                result.Add(\"Nine\");\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea73dfee9e4b47debd97f1b4490e4aea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea73dfee9e4b47debd97f1b4490e4aea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        List<long>\
    \ sorted = new List<long>();\n        List<long> reversed = new List<long>();\n\
    \        List<string> names = new List<string>();\n        names.Add(\"One\");\n\
    \        names.Add(\"Two\");\n        names.Add(\"Three\");\n        names.Add(\"\
    Four\");\n        names.Add(\"Five\");\n        names.Add(\"Six\");\n        names.Add(\"\
    Seven\");\n        names.Add(\"Eight\");\n        names.Add(\"Nine\");\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n                sorted.Add(arr[i]);\n            }\n        }\n   \
    \     sorted.Sort();\n        for (int i = sorted.Count - 1; i >= 0; i--) {\n\
    \            reversed.Add(sorted[i]);\n        }\n        for (int i = 0; i <\
    \ reversed.Count; i++) {\n            result.Add(names[(int)reversed[i] - 1]);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f41b3779dc1a4ce9be456a77e54be739>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f41b3779dc1a4ce9be456a77e54be739>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ num in arr) {\n            if (num == 1) {\n                result.Add(\"One\"\
    );\n            } else if (num == 2) {\n                result.Add(\"Two\");\n\
    \            } else if (num == 3) {\n                result.Add(\"Three\");\n\
    \            } else if (num == 4) {\n                result.Add(\"Four\");\n \
    \           } else if (num == 5) {\n                result.Add(\"Five\");\n  \
    \          } else if (num == 6) {\n                result.Add(\"Six\");\n    \
    \        } else if (num == 7) {\n                result.Add(\"Seven\");\n    \
    \        } else if (num == 8) {\n                result.Add(\"Eight\");\n    \
    \        } else if (num == 9) {\n                result.Add(\"Nine\");\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5abffbb42c70442583442c3569d39d2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5abffbb42c70442583442c3569d39d2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ n in arr) {\n            if (n == 1) {\n                result.Add(\"One\");\n\
    \            } else if (n == 2) {\n                result.Add(\"Two\");\n    \
    \        } else if (n == 3) {\n                result.Add(\"Three\");\n      \
    \      } else if (n == 4) {\n                result.Add(\"Four\");\n         \
    \   } else if (n == 5) {\n                result.Add(\"Five\");\n            }\
    \ else if (n == 6) {\n                result.Add(\"Six\");\n            } else\
    \ if (n == 7) {\n                result.Add(\"Seven\");\n            } else if\
    \ (n == 8) {\n                result.Add(\"Eight\");\n            } else if (n\
    \ == 9) {\n                result.Add(\"Nine\");\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c8d6a3809c747c1abfd4803a8c7ef2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c8d6a3809c747c1abfd4803a8c7ef2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        arr.Sort();\n\
    \        arr.Reverse();\n        foreach (long i in arr) {\n            switch\
    \ (i) {\n                case 1:\n                    result.Add(\"One\");\n \
    \                   break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c094ebdebd304500a58ae5ce4c0a89d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c094ebdebd304500a58ae5ce4c0a89d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] == 1) {\n                result.Add(\"\
    One\");\n            }\n            if (arr[i] == 2) {\n                result.Add(\"\
    Two\");\n            }\n            if (arr[i] == 3) {\n                result.Add(\"\
    Three\");\n            }\n            if (arr[i] == 4) {\n                result.Add(\"\
    Four\");\n            }\n            if (arr[i] == 5) {\n                result.Add(\"\
    Five\");\n            }\n            if (arr[i] == 6) {\n                result.Add(\"\
    Six\");\n            }\n            if (arr[i] == 7) {\n                result.Add(\"\
    Seven\");\n            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01c88af0209f489293ff8d6e7c4cd564>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01c88af0209f489293ff8d6e7c4cd564>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr) {\n            if (num < 1 || num > 9) continue;\n       \
    \     switch (num) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  arr.Sort();\n        arr.Reverse();\n        foreach (long num in arr) {\n\
    \            if (num < 1 || num > 9) {\n                continue;\n          \
    \  }\n            switch (num) {\n                case 1:\n                  \
    \  result.Add(\"One\");\n                    break;\n                case 2:\n\
    \                    result.Add(\"Two\");\n                    break;\n      \
    \          case 3:\n                    result.Add(\"Three\");\n             \
    \       break;\n                case 4:\n                    result.Add(\"Four\"\
    );\n                    break;\n                case 5:\n                    result.Add(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      result.Add(\"Six\");\n                    break;\n                case\
    \ 7:\n                    result.Add(\"Seven\");\n                    break;\n\
    \                case 8:\n                    result.Add(\"Eight\");\n       \
    \             break;\n                case 9:\n                    result.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ecd4a28bb51349a0abe19dc441161b75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ecd4a28bb51349a0abe19dc441161b75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < 1 || arr[i] > 9) {\n\
    \                continue;\n            }\n            switch (arr[i]) {\n   \
    \             case 1:\n                    result.Add(\"One\");\n            \
    \        break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <196b44e79eb64a709b4994b51ba5098b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <196b44e79eb64a709b4994b51ba5098b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var item\
    \ in arr) {\n            if (item == 1) {\n                result.Add(\"One\"\
    );\n            } else if (item == 2) {\n                result.Add(\"Two\");\n\
    \            } else if (item == 3) {\n                result.Add(\"Three\");\n\
    \            } else if (item == 4) {\n                result.Add(\"Four\");\n\
    \            } else if (item == 5) {\n                result.Add(\"Five\");\n\
    \            } else if (item == 6) {\n                result.Add(\"Six\");\n \
    \           } else if (item == 7) {\n                result.Add(\"Seven\");\n\
    \            } else if (item == 8) {\n                result.Add(\"Eight\");\n\
    \            } else if (item == 9) {\n                result.Add(\"Nine\");\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea73dfee9e4b47debd97f1b4490e4aea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea73dfee9e4b47debd97f1b4490e4aea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i >= 1 &&\
    \ i <= 9) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n\
    \                result.Add(arr[i].ToString());\n            }\n        }\n  \
    \      result.Sort();\n        result.Reverse();\n        for (int i = 0; i <\
    \ result.Count; i++) {\n            switch (result[i]) {\n                case\
    \ \"1\":\n                    result[i] = \"One\";\n                    break;\n\
    \                case \"2\":\n                    result[i] = \"Two\";\n     \
    \               break;\n                case \"3\":\n                    result[i]\
    \ = \"Three\";\n                    break;\n                case \"4\":\n    \
    \                result[i] = \"Four\";\n                    break;\n         \
    \       case \"5\":\n                    result[i] = \"Five\";\n             \
    \       break;\n                case \"6\":\n                    result[i] = \"\
    Six\";\n                    break;\n                case \"7\":\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ \"8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <978b3d98715946bd80183266b6806d89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <978b3d98715946bd80183266b6806d89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        arr.Sort();\n\
    \        arr.Reverse();\n        foreach (long i in arr) {\n            if (i\
    \ == 1) {\n                result.Add(\"One\");\n            }\n            if\
    \ (i == 2) {\n                result.Add(\"Two\");\n            }\n          \
    \  if (i == 3) {\n                result.Add(\"Three\");\n            }\n    \
    \        if (i == 4) {\n                result.Add(\"Four\");\n            }\n\
    \            if (i == 5) {\n                result.Add(\"Five\");\n          \
    \  }\n            if (i == 6) {\n                result.Add(\"Six\");\n      \
    \      }\n            if (i == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb853a6669ab4046bf82c2caf56e6600>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb853a6669ab4046bf82c2caf56e6600>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(\"One\");\n\
    \            }\n            if (i == 2) {\n                result.Add(\"Two\"\
    );\n            }\n            if (i == 3) {\n                result.Add(\"Three\"\
    );\n            }\n            if (i == 4) {\n                result.Add(\"Four\"\
    );\n            }\n            if (i == 5) {\n                result.Add(\"Five\"\
    );\n            }\n            if (i == 6) {\n                result.Add(\"Six\"\
    );\n            }\n            if (i == 7) {\n                result.Add(\"Seven\"\
    );\n            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(\"One\");\n\
    \            }\n            if (i == 2) {\n                result.Add(\"Two\"\
    );\n            }\n            if (i == 3) {\n                result.Add(\"Three\"\
    );\n            }\n            if (i == 4) {\n                result.Add(\"Four\"\
    );\n            }\n            if (i == 5) {\n                result.Add(\"Five\"\
    );\n            }\n            if (i == 6) {\n                result.Add(\"Six\"\
    );\n            }\n            if (i == 7) {\n                result.Add(\"Seven\"\
    );\n            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i >= 1 &&\
    \ i <= 9) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (var item in arr) {\n            if (item >=\
    \ 1 && item <= 9) {\n                switch (item) {\n                    case\
    \ 1:\n                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9740ed419c54cdaac8d1cd11e9ced50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9740ed419c54cdaac8d1cd11e9ced50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item >= 1 && item <= 9) {\n                switch (item)\
    \ {\n                    case 1:\n                        result.Add(\"One\");\n\
    \                        break;\n                    case 2:\n               \
    \         result.Add(\"Two\");\n                        break;\n             \
    \       case 3:\n                        result.Add(\"Three\");\n            \
    \            break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num <\
    \ 1 || num > 9) {\n                continue;\n            }\n            switch\
    \ (num) {\n                case 1:\n                    result.Add(\"One\");\n\
    \                    break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        arr.Sort();\n\
    \        arr.Reverse();\n        foreach (long i in arr) {\n            if (i\
    \ == 1) {\n                result.Add(\"One\");\n            }\n            if\
    \ (i == 2) {\n                result.Add(\"Two\");\n            }\n          \
    \  if (i == 3) {\n                result.Add(\"Three\");\n            }\n    \
    \        if (i == 4) {\n                result.Add(\"Four\");\n            }\n\
    \            if (i == 5) {\n                result.Add(\"Five\");\n          \
    \  }\n            if (i == 6) {\n                result.Add(\"Six\");\n      \
    \      }\n            if (i == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb853a6669ab4046bf82c2caf56e6600>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb853a6669ab4046bf82c2caf56e6600>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num <\
    \ 1 || num > 9) {\n                continue;\n            }\n            switch\
    \ (num) {\n                case 1:\n                    result.Add(\"One\");\n\
    \                    break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i] < 10) {\n\
    \                switch (arr[i]) {\n                    case 1:\n            \
    \            result.Add(\"One\");\n                        break;\n          \
    \          case 2:\n                        result.Add(\"Two\");\n           \
    \             break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88b50b59d4944c2ca5047828faeada93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88b50b59d4944c2ca5047828faeada93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            switch (arr[i]) {\n\
    \                case 1:\n                    result.Add(\"One\");\n         \
    \           break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f06999b7852402fa898d673e113d63e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f06999b7852402fa898d673e113d63e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num <\
    \ 1 || num > 9) {\n                continue;\n            }\n            switch\
    \ (num) {\n                case 1:\n                    result.Add(\"One\");\n\
    \                    break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <243e4d59a5e54daca1bffcd6fcd6112f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) result.Add(\"One\"\
    );\n            if (arr[i] == 2) result.Add(\"Two\");\n            if (arr[i]\
    \ == 3) result.Add(\"Three\");\n            if (arr[i] == 4) result.Add(\"Four\"\
    );\n            if (arr[i] == 5) result.Add(\"Five\");\n            if (arr[i]\
    \ == 6) result.Add(\"Six\");\n            if (arr[i] == 7) result.Add(\"Seven\"\
    );\n            if (arr[i] == 8) result.Add(\"Eight\");\n            if (arr[i]\
    \ == 9) result.Add(\"Nine\");\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <383e3ababb274c59a4529728db07ec16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <383e3ababb274c59a4529728db07ec16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var item\
    \ in arr) {\n            if (item == 1) {\n                result.Add(\"One\"\
    );\n            } else if (item == 2) {\n                result.Add(\"Two\");\n\
    \            } else if (item == 3) {\n                result.Add(\"Three\");\n\
    \            } else if (item == 4) {\n                result.Add(\"Four\");\n\
    \            } else if (item == 5) {\n                result.Add(\"Five\");\n\
    \            } else if (item == 6) {\n                result.Add(\"Six\");\n \
    \           } else if (item == 7) {\n                result.Add(\"Seven\");\n\
    \            } else if (item == 8) {\n                result.Add(\"Eight\");\n\
    \            } else if (item == 9) {\n                result.Add(\"Nine\");\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea73dfee9e4b47debd97f1b4490e4aea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea73dfee9e4b47debd97f1b4490e4aea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item > 0 && item < 10) {\n                switch (item) {\n\
    \                    case 1:\n                        result.Add(\"One\");\n \
    \                       break;\n                    case 2:\n                \
    \        result.Add(\"Two\");\n                        break;\n              \
    \      case 3:\n                        result.Add(\"Three\");\n             \
    \           break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        Dictionary<long,\
    \ string> dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\"\
    );\n        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        arr.Sort();\n        arr.Reverse();\n        foreach (long\
    \ i in arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(dict[i]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca9c2037630845b7a3d7b5acd6b04060>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca9c2037630845b7a3d7b5acd6b04060>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i] < 10) {\n\
    \                result.Add(arr[i].ToString());\n            }\n        }\n  \
    \      result.Sort();\n        result.Reverse();\n        for (int i = 0; i <\
    \ result.Count; i++) {\n            switch (result[i]) {\n                case\
    \ \"1\":\n                    result[i] = \"One\";\n                    break;\n\
    \                case \"2\":\n                    result[i] = \"Two\";\n     \
    \               break;\n                case \"3\":\n                    result[i]\
    \ = \"Three\";\n                    break;\n                case \"4\":\n    \
    \                result[i] = \"Four\";\n                    break;\n         \
    \       case \"5\":\n                    result[i] = \"Five\";\n             \
    \       break;\n                case \"6\":\n                    result[i] = \"\
    Six\";\n                    break;\n                case \"7\":\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ \"8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var item\
    \ in arr) {\n            if (item < 1 || item > 9) {\n                continue;\n\
    \            }\n            switch (item) {\n                case 1:\n       \
    \             result.Add(\"One\");\n                    break;\n             \
    \   case 2:\n                    result.Add(\"Two\");\n                    break;\n\
    \                case 3:\n                    result.Add(\"Three\");\n       \
    \             break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e21edfd7f4c6413391ea362c539f6434>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e21edfd7f4c6413391ea362c539f6434>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        Dictionary<long,\
    \ string> dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\"\
    );\n        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        arr.Sort();\n        arr.Reverse();\n        foreach (long\
    \ num in arr) {\n            if (num >= 1 && num <= 9) {\n                result.Add(dict[num]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1a7a385e97644f889067eb1326c780b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1a7a385e97644f889067eb1326c780b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            if (i < 1 || i > 9) {\n                continue;\n\
    \            }\n            switch (i) {\n                case 1:\n          \
    \          result.Add(\"One\");\n                    break;\n                case\
    \ 2:\n                    result.Add(\"Two\");\n                    break;\n \
    \               case 3:\n                    result.Add(\"Three\");\n        \
    \            break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6885c91ea024b338d950f292de3424c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6885c91ea024b338d950f292de3424c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] == 1) {\n                result.Add(\"One\");\n            }\n  \
    \          if (arr[i] == 2) {\n                result.Add(\"Two\");\n        \
    \    }\n            if (arr[i] == 3) {\n                result.Add(\"Three\");\n\
    \            }\n            if (arr[i] == 4) {\n                result.Add(\"\
    Four\");\n            }\n            if (arr[i] == 5) {\n                result.Add(\"\
    Five\");\n            }\n            if (arr[i] == 6) {\n                result.Add(\"\
    Six\");\n            }\n            if (arr[i] == 7) {\n                result.Add(\"\
    Seven\");\n            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <396aa5d4d91a49cab075d02c3eceb5bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <396aa5d4d91a49cab075d02c3eceb5bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item >= 1 && item <= 9) {\n                switch (item)\
    \ {\n                    case 1:\n                        result.Add(\"One\");\n\
    \                        break;\n                    case 2:\n               \
    \         result.Add(\"Two\");\n                        break;\n             \
    \       case 3:\n                        result.Add(\"Three\");\n            \
    \            break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i >= 1 &&\
    \ i <= 9) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> sorted =\
    \ new List<long>();\n        foreach (long num in arr) {\n            if (num\
    \ >= 1 && num <= 9) {\n                sorted.Add(num);\n            }\n     \
    \   }\n        sorted.Sort();\n        sorted.Reverse();\n        foreach (long\
    \ num in sorted) {\n            switch (num) {\n                case 1:\n    \
    \                result.Add(\"One\");\n                    break;\n          \
    \      case 2:\n                    result.Add(\"Two\");\n                   \
    \ break;\n                case 3:\n                    result.Add(\"Three\");\n\
    \                    break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c86015a1b80b4b9e83a65c93bf0ee5fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c86015a1b80b4b9e83a65c93bf0ee5fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr) {\n            if (num < 1 || num > 9) continue;\n       \
    \     switch (num) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> sorted =\
    \ arr.OrderBy(x => x).ToList();\n        List<long> reversed = sorted.Reverse().ToList();\n\
    \        foreach (long num in reversed) {\n            if (num == 1) {\n     \
    \           result.Add(\"One\");\n            } else if (num == 2) {\n       \
    \         result.Add(\"Two\");\n            } else if (num == 3) {\n         \
    \       result.Add(\"Three\");\n            } else if (num == 4) {\n         \
    \       result.Add(\"Four\");\n            } else if (num == 5) {\n          \
    \      result.Add(\"Five\");\n            } else if (num == 6) {\n           \
    \     result.Add(\"Six\");\n            } else if (num == 7) {\n             \
    \   result.Add(\"Seven\");\n            } else if (num == 8) {\n             \
    \   result.Add(\"Eight\");\n            } else if (num == 9) {\n             \
    \   result.Add(\"Nine\");\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdjc26kmr.cs(31,47): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long i in arr) {\n            if (i >= 1 && i <= 9) {\n                switch\
    \ (i) {\n                    case 1:\n                        result.Add(\"One\"\
    );\n                        break;\n                    case 2:\n            \
    \            result.Add(\"Two\");\n                        break;\n          \
    \          case 3:\n                        result.Add(\"Three\");\n         \
    \               break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6661e946417482ab633d25c79279036>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6661e946417482ab633d25c79279036>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> sorted =\
    \ arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (long num in sorted) {\n            switch (num) {\n        \
    \        case 1:\n                    result.Add(\"One\");\n                 \
    \   break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3def8fc337d4ad38b4ccfb9c6bac449>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3def8fc337d4ad38b4ccfb9c6bac449>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var res = new List<string>();\n        foreach (var item in\
    \ arr) {\n            if (item >= 1 && item <= 9) {\n                res.Add(item.ToString());\n\
    \            }\n        }\n        res.Sort();\n        res.Reverse();\n     \
    \   for (int i = 0; i < res.Count; i++) {\n            switch (res[i]) {\n   \
    \             case \"1\":\n                    res[i] = \"One\";\n           \
    \         break;\n                case \"2\":\n                    res[i] = \"\
    Two\";\n                    break;\n                case \"3\":\n            \
    \        res[i] = \"Three\";\n                    break;\n                case\
    \ \"4\":\n                    res[i] = \"Four\";\n                    break;\n\
    \                case \"5\":\n                    res[i] = \"Five\";\n       \
    \             break;\n                case \"6\":\n                    res[i]\
    \ = \"Six\";\n                    break;\n                case \"7\":\n      \
    \              res[i] = \"Seven\";\n                    break;\n             \
    \   case \"8\":\n                    res[i] = \"Eight\";\n                   \
    \ break;\n                case \"9\":\n                    res[i] = \"Nine\";\n\
    \                    break;\n            }\n        }\n        return res;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2862c0693cd947c4b044056cbf305a63>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2862c0693cd947c4b044056cbf305a63>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n\
    \                result.Add(\"One\");\n            }\n            if (arr[i] ==\
    \ 2) {\n                result.Add(\"Two\");\n            }\n            if (arr[i]\
    \ == 3) {\n                result.Add(\"Three\");\n            }\n           \
    \ if (arr[i] == 4) {\n                result.Add(\"Four\");\n            }\n \
    \           if (arr[i] == 5) {\n                result.Add(\"Five\");\n      \
    \      }\n            if (arr[i] == 6) {\n                result.Add(\"Six\");\n\
    \            }\n            if (arr[i] == 7) {\n                result.Add(\"\
    Seven\");\n            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec5dd7c960134abf99fc172ea92b0ae8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec5dd7c960134abf99fc172ea92b0ae8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i > 0 &&\
    \ i < 10) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i > 0 &&\
    \ i < 10) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> res = new List<string>();\n        if (arr.Count\
    \ == 0) return res;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long i in arr) {\n            if (i >= 1 && i <= 9) {\n                switch\
    \ (i) {\n                    case 1:\n                        res.Add(\"One\"\
    );\n                        break;\n                    case 2:\n            \
    \            res.Add(\"Two\");\n                        break;\n             \
    \       case 3:\n                        res.Add(\"Three\");\n               \
    \         break;\n                    case 4:\n                        res.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  res.Add(\"Five\");\n                        break;\n      \
    \              case 6:\n                        res.Add(\"Six\");\n          \
    \              break;\n                    case 7:\n                        res.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   res.Add(\"Eight\");\n                        break;\n    \
    \                case 9:\n                        res.Add(\"Nine\");\n       \
    \                 break;\n                }\n            }\n        }\n      \
    \  return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2def390fb5cb4105a121514bc2585e00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2def390fb5cb4105a121514bc2585e00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item >= 1 && item <= 9) {\n                result.Add(item.ToString());\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a810c4e58a224d60bf8cbc65e3996e4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a810c4e58a224d60bf8cbc65e3996e4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i] < 10) {\n\
    \                result.Add(arr[i].ToString());\n            }\n        }\n  \
    \      result.Sort();\n        result.Reverse();\n        for (int i = 0; i <\
    \ result.Count; i++) {\n            switch (result[i]) {\n                case\
    \ \"1\":\n                    result[i] = \"One\";\n                    break;\n\
    \                case \"2\":\n                    result[i] = \"Two\";\n     \
    \               break;\n                case \"3\":\n                    result[i]\
    \ = \"Three\";\n                    break;\n                case \"4\":\n    \
    \                result[i] = \"Four\";\n                    break;\n         \
    \       case \"5\":\n                    result[i] = \"Five\";\n             \
    \       break;\n                case \"6\":\n                    result[i] = \"\
    Six\";\n                    break;\n                case \"7\":\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ \"8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(\"One\");\n\
    \            }\n            if (i == 2) {\n                result.Add(\"Two\"\
    );\n            }\n            if (i == 3) {\n                result.Add(\"Three\"\
    );\n            }\n            if (i == 4) {\n                result.Add(\"Four\"\
    );\n            }\n            if (i == 5) {\n                result.Add(\"Five\"\
    );\n            }\n            if (i == 6) {\n                result.Add(\"Six\"\
    );\n            }\n            if (i == 7) {\n                result.Add(\"Seven\"\
    );\n            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0)\n        {\n            return result;\n        }\n\
    \        arr.Sort();\n        arr.Reverse();\n        foreach (long i in arr)\n\
    \        {\n            if (i >= 1 && i <= 9)\n            {\n               \
    \ switch (i)\n                {\n                    case 1:\n               \
    \         result.Add(\"One\");\n                        break;\n             \
    \       case 2:\n                        result.Add(\"Two\");\n              \
    \          break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de7ad40930454bf79eab6055b24ba9e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de7ad40930454bf79eab6055b24ba9e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <45e372f290134c2586d3261b1affa69f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <45e372f290134c2586d3261b1affa69f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long i in arr) {\n            if (i >= 1 && i <= 9) {\n                switch\
    \ (i) {\n                    case 1:\n                        result.Add(\"One\"\
    );\n                        break;\n                    case 2:\n            \
    \            result.Add(\"Two\");\n                        break;\n          \
    \          case 3:\n                        result.Add(\"Three\");\n         \
    \               break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6661e946417482ab633d25c79279036>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6661e946417482ab633d25c79279036>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i] < 10) {\n\
    \                result.Add(arr[i].ToString());\n            }\n        }\n  \
    \      result.Sort();\n        result.Reverse();\n        for (int i = 0; i <\
    \ result.Count; i++) {\n            switch (result[i]) {\n                case\
    \ \"1\":\n                    result[i] = \"One\";\n                    break;\n\
    \                case \"2\":\n                    result[i] = \"Two\";\n     \
    \               break;\n                case \"3\":\n                    result[i]\
    \ = \"Three\";\n                    break;\n                case \"4\":\n    \
    \                result[i] = \"Four\";\n                    break;\n         \
    \       case \"5\":\n                    result[i] = \"Five\";\n             \
    \       break;\n                case \"6\":\n                    result[i] = \"\
    Six\";\n                    break;\n                case \"7\":\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ \"8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        var result = new List<string>();\n\
    \        var sorted = arr.OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted)\n        {\n            if (item >= 1 &&\
    \ item <= 9)\n            {\n                switch (item)\n                {\n\
    \                    case 1:\n                        result.Add(\"One\");\n \
    \                       break;\n                    case 2:\n                \
    \        result.Add(\"Two\");\n                        break;\n              \
    \      case 3:\n                        result.Add(\"Three\");\n             \
    \           break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4572bc3417bb47ff80aa8e84339f02d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4572bc3417bb47ff80aa8e84339f02d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var item\
    \ in arr) {\n            if (item >= 1 && item <= 9) {\n                result.Add(item.ToString());\n\
    \            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        var finalResult = new List<string>();\n        foreach (var item in result)\
    \ {\n            switch (item) {\n                case \"1\":\n              \
    \      finalResult.Add(\"One\");\n                    break;\n               \
    \ case \"2\":\n                    finalResult.Add(\"Two\");\n               \
    \     break;\n                case \"3\":\n                    finalResult.Add(\"\
    Three\");\n                    break;\n                case \"4\":\n         \
    \           finalResult.Add(\"Four\");\n                    break;\n         \
    \       case \"5\":\n                    finalResult.Add(\"Five\");\n        \
    \            break;\n                case \"6\":\n                    finalResult.Add(\"\
    Six\");\n                    break;\n                case \"7\":\n           \
    \         finalResult.Add(\"Seven\");\n                    break;\n          \
    \      case \"8\":\n                    finalResult.Add(\"Eight\");\n        \
    \            break;\n                case \"9\":\n                    finalResult.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ finalResult;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e596ddecc78402799383787758fc89d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e596ddecc78402799383787758fc89d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr) {\n            if (num == 1) result.Add(\"One\");\n      \
    \      if (num == 2) result.Add(\"Two\");\n            if (num == 3) result.Add(\"\
    Three\");\n            if (num == 4) result.Add(\"Four\");\n            if (num\
    \ == 5) result.Add(\"Five\");\n            if (num == 6) result.Add(\"Six\");\n\
    \            if (num == 7) result.Add(\"Seven\");\n            if (num == 8) result.Add(\"\
    Eight\");\n            if (num == 9) result.Add(\"Nine\");\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f183a99f6534a96813cde88b851ba8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f183a99f6534a96813cde88b851ba8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0)\n        {\n            return result;\n        }\n\
    \        arr.Sort();\n        arr.Reverse();\n        foreach (var item in arr)\n\
    \        {\n            if (item > 0 && item < 10)\n            {\n          \
    \      switch (item)\n                {\n                    case 1:\n       \
    \                 result.Add(\"One\");\n                        break;\n     \
    \               case 2:\n                        result.Add(\"Two\");\n      \
    \                  break;\n                    case 3:\n                     \
    \   result.Add(\"Three\");\n                        break;\n                 \
    \   case 4:\n                        result.Add(\"Four\");\n                 \
    \       break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                    default:\n                        break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e359e14c82f240ca94a90d65c0ea0f0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e359e14c82f240ca94a90d65c0ea0f0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0)\n            return result;\n        arr.Sort();\n\
    \        arr.Reverse();\n        foreach (long i in arr)\n        {\n        \
    \    if (i > 0 && i < 10)\n            {\n                switch (i)\n       \
    \         {\n                    case 1:\n                        result.Add(\"\
    One\");\n                        break;\n                    case 2:\n       \
    \                 result.Add(\"Two\");\n                        break;\n     \
    \               case 3:\n                        result.Add(\"Three\");\n    \
    \                    break;\n                    case 4:\n                   \
    \     result.Add(\"Four\");\n                        break;\n                \
    \    case 5:\n                        result.Add(\"Five\");\n                \
    \        break;\n                    case 6:\n                        result.Add(\"\
    Six\");\n                        break;\n                    case 7:\n       \
    \                 result.Add(\"Seven\");\n                        break;\n   \
    \                 case 8:\n                        result.Add(\"Eight\");\n  \
    \                      break;\n                    case 9:\n                 \
    \       result.Add(\"Nine\");\n                        break;\n              \
    \  }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1aebd5488a1b48d99f9bef3df7bb4456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1aebd5488a1b48d99f9bef3df7bb4456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            var number = arr[i];\n            if (number\
    \ < 1 || number > 9) {\n                continue;\n            }\n           \
    \ switch (number) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9662d48c202147a78332a98ec87a93c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9662d48c202147a78332a98ec87a93c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(\"One\");\n\
    \            }\n            if (i == 2) {\n                result.Add(\"Two\"\
    );\n            }\n            if (i == 3) {\n                result.Add(\"Three\"\
    );\n            }\n            if (i == 4) {\n                result.Add(\"Four\"\
    );\n            }\n            if (i == 5) {\n                result.Add(\"Five\"\
    );\n            }\n            if (i == 6) {\n                result.Add(\"Six\"\
    );\n            }\n            if (i == 7) {\n                result.Add(\"Seven\"\
    );\n            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <9d3c2b78838e43e8b63d6253b0966e26>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        Dictionary<long, string>\
    \ dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n    \
    \    dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        arr.Sort();\n        arr.Reverse();\n        foreach (long\
    \ num in arr) {\n            if (num >= 1 && num <= 9) {\n                result.Add(dict[num]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68221c5472e94b1892ae73728b9db693>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68221c5472e94b1892ae73728b9db693>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item >= 1 && item <= 9) {\n                result.Add(item.ToString());\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a810c4e58a224d60bf8cbc65e3996e4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a810c4e58a224d60bf8cbc65e3996e4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n\
    \                switch (arr[i]) {\n                    case 1:\n            \
    \            result.Add(\"One\");\n                        break;\n          \
    \          case 2:\n                        result.Add(\"Two\");\n           \
    \             break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bae2dca6018c46589159098e8a89c2cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bae2dca6018c46589159098e8a89c2cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr) {\n            if (num > 0 && num < 10) {\n              \
    \  switch (num) {\n                    case 1:\n                        result.Add(\"\
    One\");\n                        break;\n                    case 2:\n       \
    \                 result.Add(\"Two\");\n                        break;\n     \
    \               case 3:\n                        result.Add(\"Three\");\n    \
    \                    break;\n                    case 4:\n                   \
    \     result.Add(\"Four\");\n                        break;\n                \
    \    case 5:\n                        result.Add(\"Five\");\n                \
    \        break;\n                    case 6:\n                        result.Add(\"\
    Six\");\n                        break;\n                    case 7:\n       \
    \                 result.Add(\"Seven\");\n                        break;\n   \
    \                 case 8:\n                        result.Add(\"Eight\");\n  \
    \                      break;\n                    case 9:\n                 \
    \       result.Add(\"Nine\");\n                        break;\n              \
    \  }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d30b5269e9114a09b5cd253f914b14c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d30b5269e9114a09b5cd253f914b14c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> sorted =\
    \ new List<long>();\n        foreach (long num in arr) {\n            if (num\
    \ >= 1 && num <= 9) {\n                sorted.Add(num);\n            }\n     \
    \   }\n        sorted.Sort();\n        sorted.Reverse();\n        foreach (long\
    \ num in sorted) {\n            switch (num) {\n                case 1:\n    \
    \                result.Add(\"One\");\n                    break;\n          \
    \      case 2:\n                    result.Add(\"Two\");\n                   \
    \ break;\n                case 3:\n                    result.Add(\"Three\");\n\
    \                    break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c86015a1b80b4b9e83a65c93bf0ee5fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c86015a1b80b4b9e83a65c93bf0ee5fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> sorted =\
    \ new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   if (arr[i] >= 1 && arr[i] <= 9) {\n                sorted.Add(arr[i]);\n \
    \           }\n        }\n        sorted.Sort();\n        sorted.Reverse();\n\
    \        for (int i = 0; i < sorted.Count; i++) {\n            switch (sorted[i])\
    \ {\n                case 1:\n                    result.Add(\"One\");\n     \
    \               break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7adef13eb7224db79e0946a1d0ce7545>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7adef13eb7224db79e0946a1d0ce7545>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var i in\
    \ arr) {\n            if (i < 1 || i > 9) continue;\n            result.Add(i.ToString());\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            switch (result[i]) {\n        \
    \        case \"1\":\n                    result[i] = \"One\";\n             \
    \       break;\n                case \"2\":\n                    result[i] = \"\
    Two\";\n                    break;\n                case \"3\":\n            \
    \        result[i] = \"Three\";\n                    break;\n                case\
    \ \"4\":\n                    result[i] = \"Four\";\n                    break;\n\
    \                case \"5\":\n                    result[i] = \"Five\";\n    \
    \                break;\n                case \"6\":\n                    result[i]\
    \ = \"Six\";\n                    break;\n                case \"7\":\n      \
    \              result[i] = \"Seven\";\n                    break;\n          \
    \      case \"8\":\n                    result[i] = \"Eight\";\n             \
    \       break;\n                case \"9\":\n                    result[i] = \"\
    Nine\";\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dacdc03264f4d2aaec2cbf2858e7ee0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dacdc03264f4d2aaec2cbf2858e7ee0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var num in sorted)\
    \ {\n            if (num > 0 && num < 10) {\n                switch (num) {\n\
    \                    case 1:\n                        result.Add(\"One\");\n \
    \                       break;\n                    case 2:\n                \
    \        result.Add(\"Two\");\n                        break;\n              \
    \      case 3:\n                        result.Add(\"Three\");\n             \
    \           break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a44236e46cc486d87158de3f3dc23b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a44236e46cc486d87158de3f3dc23b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr) {\n            if (num < 1 || num > 9) continue;\n       \
    \     switch (num) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item > 0 && item < 10) {\n                switch (item) {\n\
    \                    case 1:\n                        result.Add(\"One\");\n \
    \                       break;\n                    case 2:\n                \
    \        result.Add(\"Two\");\n                        break;\n              \
    \      case 3:\n                        result.Add(\"Three\");\n             \
    \           break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        if (arr.Count == 0)\
    \ return result;\n        var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            switch (item) {\n                case 1:\n                  \
    \  result.Add(\"One\");\n                    break;\n                case 2:\n\
    \                    result.Add(\"Two\");\n                    break;\n      \
    \          case 3:\n                    result.Add(\"Three\");\n             \
    \       break;\n                case 4:\n                    result.Add(\"Four\"\
    );\n                    break;\n                case 5:\n                    result.Add(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      result.Add(\"Six\");\n                    break;\n                case\
    \ 7:\n                    result.Add(\"Seven\");\n                    break;\n\
    \                case 8:\n                    result.Add(\"Eight\");\n       \
    \             break;\n                case 9:\n                    result.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da2eb8b6965c4aa5a7df6bf60c68f2bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da2eb8b6965c4aa5a7df6bf60c68f2bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        Dictionary<int,\
    \ string> dict = new Dictionary<int, string>() {\n            {1, \"One\"},\n\
    \            {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        arr.Sort();\n        arr.Reverse();\n        foreach (int num in arr)\
    \ {\n            if (num > 0 && num < 10) {\n                result.Add(dict[num]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <470c42366ddf49abb7026df7fb10e385>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <470c42366ddf49abb7026df7fb10e385>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        Dictionary<long, string>\
    \ dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n    \
    \    dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        arr.Sort();\n        arr.Reverse();\n        foreach (long\
    \ num in arr) {\n            if (num >= 1 && num <= 9) {\n                result.Add(dict[num]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68221c5472e94b1892ae73728b9db693>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68221c5472e94b1892ae73728b9db693>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item >= 1 && item <= 9) {\n                switch (item)\
    \ {\n                    case 1:\n                        result.Add(\"One\");\n\
    \                        break;\n                    case 2:\n               \
    \         result.Add(\"Two\");\n                        break;\n             \
    \       case 3:\n                        result.Add(\"Three\");\n            \
    \            break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item > 0 && item < 10) {\n                switch (item) {\n\
    \                    case 1:\n                        result.Add(\"One\");\n \
    \                       break;\n                    case 2:\n                \
    \        result.Add(\"Two\");\n                        break;\n              \
    \      case 3:\n                        result.Add(\"Three\");\n             \
    \           break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        return arr.Where(x => x > 0 && x < 10).OrderBy(x => x).Reverse().Select(x\
    \ => x.ToString()).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <840cfba4b08e42a8a325b3f8e0b51b53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <840cfba4b08e42a8a325b3f8e0b51b53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        var names = new List<string>() { \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        foreach (var num\
    \ in sorted) {\n            result.Add(names[(int)num - 1]);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b5a0f8f982d46b08d31f1b2b440253b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b5a0f8f982d46b08d31f1b2b440253b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr) {\n            if (num > 0 && num < 10) {\n              \
    \  switch (num) {\n                    case 1:\n                        result.Add(\"\
    One\");\n                        break;\n                    case 2:\n       \
    \                 result.Add(\"Two\");\n                        break;\n     \
    \               case 3:\n                        result.Add(\"Three\");\n    \
    \                    break;\n                    case 4:\n                   \
    \     result.Add(\"Four\");\n                        break;\n                \
    \    case 5:\n                        result.Add(\"Five\");\n                \
    \        break;\n                    case 6:\n                        result.Add(\"\
    Six\");\n                        break;\n                    case 7:\n       \
    \                 result.Add(\"Seven\");\n                        break;\n   \
    \                 case 8:\n                        result.Add(\"Eight\");\n  \
    \                      break;\n                    case 9:\n                 \
    \       result.Add(\"Nine\");\n                        break;\n              \
    \  }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d30b5269e9114a09b5cd253f914b14c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d30b5269e9114a09b5cd253f914b14c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            switch (i) {\n                case 1:\n           \
    \         result.Add(\"One\");\n                    break;\n                case\
    \ 2:\n                    result.Add(\"Two\");\n                    break;\n \
    \               case 3:\n                    result.Add(\"Three\");\n        \
    \            break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63060e26d81e45dabe7600257daf461b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63060e26d81e45dabe7600257daf461b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var item\
    \ in arr) {\n            if (item < 1 || item > 9) continue;\n            result.Add(item.ToString());\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            switch (result[i]) {\n        \
    \        case \"1\":\n                    result[i] = \"One\";\n             \
    \       break;\n                case \"2\":\n                    result[i] = \"\
    Two\";\n                    break;\n                case \"3\":\n            \
    \        result[i] = \"Three\";\n                    break;\n                case\
    \ \"4\":\n                    result[i] = \"Four\";\n                    break;\n\
    \                case \"5\":\n                    result[i] = \"Five\";\n    \
    \                break;\n                case \"6\":\n                    result[i]\
    \ = \"Six\";\n                    break;\n                case \"7\":\n      \
    \              result[i] = \"Seven\";\n                    break;\n          \
    \      case \"8\":\n                    result[i] = \"Eight\";\n             \
    \       break;\n                case \"9\":\n                    result[i] = \"\
    Nine\";\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44e31ffca0264dd8bb5f6a72bcd6c457>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44e31ffca0264dd8bb5f6a72bcd6c457>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item > 0 && item < 10) {\n                switch (item) {\n\
    \                    case 1:\n                        result.Add(\"One\");\n \
    \                       break;\n                    case 2:\n                \
    \        result.Add(\"Two\");\n                        break;\n              \
    \      case 3:\n                        result.Add(\"Three\");\n             \
    \           break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long i in arr) {\n            switch (i) {\n                case 1:\n     \
    \               result.Add(\"One\");\n                    break;\n           \
    \     case 2:\n                    result.Add(\"Two\");\n                    break;\n\
    \                case 3:\n                    result.Add(\"Three\");\n       \
    \             break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08dd87788f7c4eef9670c22b21144b1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08dd87788f7c4eef9670c22b21144b1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i > 0 &&\
    \ i < 10) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item == 1) {\n                result.Add(\"One\");\n    \
    \        } else if (item == 2) {\n                result.Add(\"Two\");\n     \
    \       } else if (item == 3) {\n                result.Add(\"Three\");\n    \
    \        } else if (item == 4) {\n                result.Add(\"Four\");\n    \
    \        } else if (item == 5) {\n                result.Add(\"Five\");\n    \
    \        } else if (item == 6) {\n                result.Add(\"Six\");\n     \
    \       } else if (item == 7) {\n                result.Add(\"Seven\");\n    \
    \        } else if (item == 8) {\n                result.Add(\"Eight\");\n   \
    \         } else if (item == 9) {\n                result.Add(\"Nine\");\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5bbebf75be349a78d6a19912e11584e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5bbebf75be349a78d6a19912e11584e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >\
    \ 0 && num < 10) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1bf06bca00e5461faf899c111dbb7c26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1bf06bca00e5461faf899c111dbb7c26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long num in arr) {\n            if (num >=\
    \ 1 && num <= 9) {\n                switch (num) {\n                    case 1:\n\
    \                        result.Add(\"One\");\n                        break;\n\
    \                    case 2:\n                        result.Add(\"Two\");\n \
    \                       break;\n                    case 3:\n                \
    \        result.Add(\"Three\");\n                        break;\n            \
    \        case 4:\n                        result.Add(\"Four\");\n            \
    \            break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db449db8ee3346919f14a6943ced8845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i < 1 ||\
    \ i > 9) {\n                continue;\n            }\n            switch (i) {\n\
    \                case 1:\n                    result.Add(\"One\");\n         \
    \           break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25deaeaba76a41bbae00d1642ebc49f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25deaeaba76a41bbae00d1642ebc49f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac8428fb8d264120b1fd64b6ca0c66a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        List<string> result = new List<string>();\n\
    \        foreach (long num in arr) {\n            if (num == 1) {\n          \
    \      result.Add(\"One\");\n            } else if (num == 2) {\n            \
    \    result.Add(\"Two\");\n            } else if (num == 3) {\n              \
    \  result.Add(\"Three\");\n            } else if (num == 4) {\n              \
    \  result.Add(\"Four\");\n            } else if (num == 5) {\n               \
    \ result.Add(\"Five\");\n            } else if (num == 6) {\n                result.Add(\"\
    Six\");\n            } else if (num == 7) {\n                result.Add(\"Seven\"\
    );\n            } else if (num == 8) {\n                result.Add(\"Eight\");\n\
    \            } else if (num == 9) {\n                result.Add(\"Nine\");\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c034fc7d77dd4ede92f3f18061cde89b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c034fc7d77dd4ede92f3f18061cde89b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr) {\n            if (num < 1 || num > 9) continue;\n       \
    \     switch (num) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b519523807b24671b9f4c7eb9719cb0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0 && arr[i] < 10) {\n\
    \                result.Add(arr[i].ToString());\n            }\n        }\n  \
    \      result.Sort();\n        result.Reverse();\n        for (int i = 0; i <\
    \ result.Count; i++) {\n            switch (result[i]) {\n                case\
    \ \"1\":\n                    result[i] = \"One\";\n                    break;\n\
    \                case \"2\":\n                    result[i] = \"Two\";\n     \
    \               break;\n                case \"3\":\n                    result[i]\
    \ = \"Three\";\n                    break;\n                case \"4\":\n    \
    \                result[i] = \"Four\";\n                    break;\n         \
    \       case \"5\":\n                    result[i] = \"Five\";\n             \
    \       break;\n                case \"6\":\n                    result[i] = \"\
    Six\";\n                    break;\n                case \"7\":\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ \"8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ef8b159dbb245bea213712f470f8911>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9339ea13ece4d92b547325731be21cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <64af6c9bf43f496993cc23b5caf33e0a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <64af6c9bf43f496993cc23b5caf33e0a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(\"One\");\n\
    \            }\n            if (i == 2) {\n                result.Add(\"Two\"\
    );\n            }\n            if (i == 3) {\n                result.Add(\"Three\"\
    );\n            }\n            if (i == 4) {\n                result.Add(\"Four\"\
    );\n            }\n            if (i == 5) {\n                result.Add(\"Five\"\
    );\n            }\n            if (i == 6) {\n                result.Add(\"Six\"\
    );\n            }\n            if (i == 7) {\n                result.Add(\"Seven\"\
    );\n            }\n            if (i == 8) {\n                result.Add(\"Eight\"\
    );\n            }\n            if (i == 9) {\n                result.Add(\"Nine\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <543f92a5a2de46e9a525494ee1d9bc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        Dictionary<long,\
    \ string> dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\"\
    );\n        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        arr.Sort();\n        arr.Reverse();\n        foreach (long\
    \ i in arr) {\n            if (i > 0 && i < 10) {\n                result.Add(dict[i]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfb57c771226428d8118f681dc5f112d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfb57c771226428d8118f681dc5f112d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <70275e28c86f4c0bb354ef7b464b35a9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0)\n        {\n            return result;\n        }\n\
    \        arr.Sort();\n        arr.Reverse();\n        foreach (long item in arr)\n\
    \        {\n            if (item > 0 && item < 10)\n            {\n          \
    \      switch (item)\n                {\n                    case 1:\n       \
    \                 result.Add(\"One\");\n                        break;\n     \
    \               case 2:\n                        result.Add(\"Two\");\n      \
    \                  break;\n                    case 3:\n                     \
    \   result.Add(\"Three\");\n                        break;\n                 \
    \   case 4:\n                        result.Add(\"Four\");\n                 \
    \       break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea1edb57eae44e1688dcb65441ea15a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea1edb57eae44e1688dcb65441ea15a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.Where(x\
    \ => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n        sorted.Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ecf3441e0514849831090dfbb1ca562>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i >= 1 &&\
    \ i <= 9) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i >= 1 &&\
    \ i <= 9) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // your code here\n        return new List<string>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4c2ac4e5a6648eabe04ebc1aa8a24db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i < 1 ||\
    \ i > 9) {\n                continue;\n            }\n            switch (i) {\n\
    \                case 1:\n                    result.Add(\"One\");\n         \
    \           break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25deaeaba76a41bbae00d1642ebc49f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25deaeaba76a41bbae00d1642ebc49f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        foreach (var item\
    \ in arr) {\n            if (item < 1 || item > 9) {\n                continue;\n\
    \            }\n            switch (item) {\n                case 1:\n       \
    \             result.Add(\"One\");\n                    break;\n             \
    \   case 2:\n                    result.Add(\"Two\");\n                    break;\n\
    \                case 3:\n                    result.Add(\"Three\");\n       \
    \             break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e21edfd7f4c6413391ea362c539f6434>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e21edfd7f4c6413391ea362c539f6434>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var names = new List<string>()\
    \ { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" };\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > 0 && arr[i] < 10) {\n                result.Add(names[(int)arr[i] - 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40b7fa3a4a1d4a568d788f1a4db28c19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40b7fa3a4a1d4a568d788f1a4db28c19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803564
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i > 0 &&\
    \ i < 10) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136e6cda866447d899965c69cf63e2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803563
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) return result;\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long i in arr) {\n            if (i >= 1 && i <= 9) {\n                switch\
    \ (i) {\n                    case 1:\n                        result.Add(\"One\"\
    );\n                        break;\n                    case 2:\n            \
    \            result.Add(\"Two\");\n                        break;\n          \
    \          case 3:\n                        result.Add(\"Three\");\n         \
    \               break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6661e946417482ab633d25c79279036>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6661e946417482ab633d25c79279036>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        arr.Sort();\n      \
    \  arr.Reverse();\n        foreach (long i in arr) {\n            if (i >= 1 &&\
    \ i <= 9) {\n                switch (i) {\n                    case 1:\n     \
    \                   result.Add(\"One\");\n                        break;\n   \
    \                 case 2:\n                        result.Add(\"Two\");\n    \
    \                    break;\n                    case 3:\n                   \
    \     result.Add(\"Three\");\n                        break;\n               \
    \     case 4:\n                        result.Add(\"Four\");\n               \
    \         break;\n                    case 5:\n                        result.Add(\"\
    Five\");\n                        break;\n                    case 6:\n      \
    \                  result.Add(\"Six\");\n                        break;\n    \
    \                case 7:\n                        result.Add(\"Seven\");\n   \
    \                     break;\n                    case 8:\n                  \
    \      result.Add(\"Eight\");\n                        break;\n              \
    \      case 9:\n                        result.Add(\"Nine\");\n              \
    \          break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <112580c4734945d5ab67cfdbf715a2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item >= 1 && item <= 9) {\n                switch (item)\
    \ {\n                    case 1:\n                        result.Add(\"One\");\n\
    \                        break;\n                    case 2:\n               \
    \         result.Add(\"Two\");\n                        break;\n             \
    \       case 3:\n                        result.Add(\"Three\");\n            \
    \            break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce05cf0be97846c19c5f1f22e6f240b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b3dc856e0de54a02ade664ca1dec4b2e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803561
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        var result = new List<string>();\n        var sorted = arr.OrderBy(x\
    \ => x).ToList();\n        sorted.Reverse();\n        foreach (var item in sorted)\
    \ {\n            if (item > 0 && item < 10) {\n                switch (item) {\n\
    \                    case 1:\n                        result.Add(\"One\");\n \
    \                       break;\n                    case 2:\n                \
    \        result.Add(\"Two\");\n                        break;\n              \
    \      case 3:\n                        result.Add(\"Three\");\n             \
    \           break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d79653bda374079b1b11265bf551153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803562
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2,\
    \ 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    // If the array is empty, return an empty array:\n    // arr = []\n   \
    \ // return []\n    // If the array has any strange number ignore it:\n    //\
    \ arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr\
    \ -> [55, 1, -1]\n    // return = ['One']\n    public static List<string> ByLength(List<long>\
    \ arr) {\n        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n             \
    \   result.Add(\"One\");\n            }\n            if (arr[i] == 2) {\n    \
    \            result.Add(\"Two\");\n            }\n            if (arr[i] == 3)\
    \ {\n                result.Add(\"Three\");\n            }\n            if (arr[i]\
    \ == 4) {\n                result.Add(\"Four\");\n            }\n            if\
    \ (arr[i] == 5) {\n                result.Add(\"Five\");\n            }\n    \
    \        if (arr[i] == 6) {\n                result.Add(\"Six\");\n          \
    \  }\n            if (arr[i] == 7) {\n                result.Add(\"Seven\");\n\
    \            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf62877b6904e299b2543af0bebce07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803561
