language: cs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[l.Count - 1];\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (increasing) {\n                if (l[i - 1] > l[i]) {\n                \
    \    return false;\n                }\n            } else {\n                if\
    \ (l[i - 1] < l[i]) {\n                    return false;\n                }\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i - 1] > l[i]) return\
    \ false;\n            if (!increasing && l[i - 1] < l[i]) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1])\n                increasing = false;\n\
    \            if (l[i] > l[i - 1])\n                decreasing = false;\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i-1] > l[i]) return\
    \ false;\n            if (!increasing && l[i-1] < l[i]) return false;\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        long last\
    \ = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < last) {\n\
    \                increasing = false;\n            }\n            if (l[i] > last)\
    \ {\n                decreasing = false;\n            }\n            last = l[i];\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool inc = l[1] > l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (inc && l[i] < l[i\
    \ - 1]) {\n                return false;\n            }\n            if (!inc\
    \ && l[i] > l[i - 1]) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i-1] > l[i]) return\
    \ false;\n            if (!increasing && l[i-1] < l[i]) return false;\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ >= l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > l[i - 1]) {\n                decreasing = false;\n\
    \            }\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long prev = l[0];\n        bool increasing = true;\n\
    \        foreach (long x in l) {\n            if (x == prev) continue;\n     \
    \       if (x > prev) {\n                if (!increasing) return false;\n    \
    \        } else {\n                if (increasing) increasing = false;\n     \
    \       }\n            prev = x;\n        }\n        return true;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.Zip(l.Skip(1), (a, b) => a.CompareTo(b)).All(x => x <= 0) ||\n           \
    \    l.Zip(l.Skip(1), (a, b) => a.CompareTo(b)).All(x => x >= 0);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i - 1] > l[i]) return\
    \ false;\n            if (!increasing && l[i - 1] < l[i]) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < l[i - 1]) {\n                increasing = false;\n   \
    \         }\n            if (l[i] > l[i - 1]) {\n                decreasing =\
    \ false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i - 1] > l[i]) return\
    \ false;\n            if (!increasing && l[i - 1] < l[i]) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i - 1] > l[i]) return\
    \ false;\n            if (!increasing && l[i - 1] < l[i]) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        if (l[0] < l[1]) {\n \
    \           for (int i = 1; i < l.Count; i++) {\n                if (l[i] < l[i\
    \ - 1]) {\n                    return false;\n                }\n            }\n\
    \        } else if (l[0] > l[1]) {\n            for (int i = 1; i < l.Count; i++)\
    \ {\n                if (l[i] > l[i - 1]) {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        bool inc = l[0] < l[1];\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (inc && l[i-1] > l[i]) return false;\n \
    \           if (!inc && l[i-1] < l[i]) return false;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[l.Count - 1];\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (increasing && l[i - 1] > l[i]) {\n                return false;\n      \
    \      }\n            if (!increasing && l[i - 1] < l[i]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i - 1] > l[i]) {\n                increasing = false;\n\
    \            }\n            if (l[i - 1] < l[i]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < l[i - 1]) {\n                increasing = false;\n   \
    \         }\n            if (l[i] > l[i - 1]) {\n                decreasing =\
    \ false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ l[i - 1]) increasing = false;\n            if (l[i] > l[i - 1]) decreasing =\
    \ false;\n        }\n        return increasing || decreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i - 1] > l[i]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i - 1] < l[i])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool inc\
    \ = true;\n        bool dec = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            inc &= l[i] >= l[i - 1];\n            dec &= l[i] <= l[i - 1];\n\
    \        }\n        return inc || dec;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < l[i - 1]) {\n                increasing = false;\n   \
    \         }\n            if (l[i] > l[i - 1]) {\n                decreasing =\
    \ false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.Zip(l.Skip(1), (a, b) => a.CompareTo(b)).All(x => x <= 0) ||\n           \
    \    l.Zip(l.Skip(1), (a, b) => a.CompareTo(b)).All(x => x >= 0);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing) {\n            \
    \    if (l[i] > l[i + 1]) return false;\n            } else {\n              \
    \  if (l[i] < l[i + 1]) return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i - 1] > l[i]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i - 1] < l[i])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < l[i - 1]) {\n                increasing = false;\n   \
    \         }\n            if (l[i] > l[i - 1]) {\n                decreasing =\
    \ false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i-1] > l[i]) return\
    \ false;\n            if (!increasing && l[i-1] < l[i]) return false;\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[l.Count - 1];\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (increasing && l[i - 1] > l[i]) {\n                return false;\n      \
    \      }\n            if (!increasing && l[i - 1] < l[i]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ >= l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < last) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > last) {\n       \
    \         decreasing = false;\n            }\n            last = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > last) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < last) {\n       \
    \         increasing = false;\n            }\n            last = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i - 1] > l[i]) return\
    \ false;\n            if (!increasing && l[i - 1] < l[i]) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[l.Count - 1];\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (increasing) {\n                if (l[i - 1] > l[i]) {\n                \
    \    return false;\n                }\n            } else {\n                if\
    \ (l[i - 1] < l[i]) {\n                    return false;\n                }\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[l.Count - 1];\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (increasing && l[i - 1] > l[i]) {\n                return false;\n      \
    \      }\n            if (!increasing && l[i - 1] < l[i]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool inc = l[1] >= l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (inc && l[i] < l[i\
    \ - 1]) {\n                return false;\n            }\n            if (!inc\
    \ && l[i] > l[i - 1]) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count - 1; i++) {\n            if (increasing && l[i] > l[i + 1])\
    \ return false;\n            if (!increasing && l[i] < l[i + 1]) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      int dir = 0;\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (l[i] > prev) {\n                if (dir == -1) {\n                    return\
    \ false;\n                }\n                dir = 1;\n            } else if (l[i]\
    \ < prev) {\n                if (dir == 1) {\n                    return false;\n\
    \                }\n                dir = -1;\n            }\n            prev\
    \ = l[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        foreach (long x in l) {\n            if\
    \ (x != prev) {\n                increasing = x > prev;\n            }\n     \
    \       if (increasing != (x >= prev)) {\n                return false;\n    \
    \        }\n            prev = x;\n        }\n        return true;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6adddaf2578d4802b1a840d7278eeb72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6adddaf2578d4802b1a840d7278eeb72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < l[i - 1]) {\n                increasing = false;\n\
    \            }\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool increasing = l[0] < l[1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing && l[i - 1] > l[i]) return\
    \ false;\n            if (!increasing && l[i - 1] < l[i]) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799533
