name: HumanEval_25_factorize
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of prime factors of given integer in the order from\
  \ smallest to largest.\n    // Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n    // Input number\
  \ should be equal to the product of all factors\n    // >>> factorize(8)\n    //\
  \ [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
  \    // [2, 5, 7]\n    public static List<long> Factorize(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
  \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
  \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> factors = new List<long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;", "        List<long> factors = new List<long>();\n     \
    \   long d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n \
    \               factors.Add(d);\n                n /= d;\n            }\n    \
    \        d += 1;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long d = 2;\n        while (n > 1) {\n        \
    \    while (n % d == 0) {\n                factors.Add(d);\n                n\
    \ /= d;\n            }\n            d += 1;\n        }\n        return factors;",
  "        List<long> factors = new List<long>();\n        long d = 2;\n        while\
    \ (n > 1) {\n            while (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;", "        List<long> factors = new List<long>();\n     \
    \   for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n  \
    \              factors.Add(i);\n                n /= i;\n            }\n     \
    \   }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  factors.Add(i);\n                n /= i;\n            }\n        }\n      \
    \  if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
  "        List<long> factors = new List<long>();\n        for (long i = 2; i * i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long d = 2;\n        while (n > 1) {\n\
    \            while (n % d == 0) {\n                factors.Add(d);\n         \
    \       n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long d =\
    \ 2;\n        while (n > 1) {\n            while (n % d == 0) {\n            \
    \    factors.Add(d);\n                n /= d;\n            }\n            d +=\
    \ 1;\n        }\n        return factors;", "        var factors = new List<long>();\n\
    \        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n\
    \        }\n        for (long i = 3; i * i <= n; i += 2) {\n            while\
    \ (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n \
    \           }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n\
    \                factors.Add(i);\n                n /= i;\n            }\n   \
    \     }\n        if (n > 1) {\n            factors.Add(n);\n        }\n      \
    \  return factors;", "        List<long> factors = new List<long>();\n       \
    \ while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n   \
    \     }\n        for (long i = 3; i * i <= n; i += 2) {\n            while (n\
    \ % i == 0) {\n                factors.Add(i);\n                n /= i;\n    \
    \        }\n        }\n        if (n > 1) {\n            factors.Add(n);\n   \
    \     }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n\
    \                factors.Add(i);\n                n /= i;\n            }\n   \
    \     }\n        if (n > 1) {\n            factors.Add(n);\n        }\n      \
    \  return factors;", "        List<long> factors = new List<long>();\n       \
    \ long d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n   \
    \             factors.Add(d);\n                n /= d;\n            }\n      \
    \      d += 1;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   while (n % i == 0) {\n                factors.Add(i);\n                n /=\
    \ i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long d = 2;\n        while (n > 1) {\n            while (n % d == 0)\
    \ {\n                factors.Add(d);\n                n /= d;\n            }\n\
    \            d += 1;\n        }\n        return factors;", "        var factors\
    \ = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   while (n % i == 0) {\n                factors.Add(i);\n                n /=\
    \ i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long d = 2;\n        while (n > 1) {\n            while (n % d == 0)\
    \ {\n                factors.Add(d);\n                n /= d;\n            }\n\
    \            d += 1;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long d = 2;\n        while (n > 1) {\n\
    \            while (n % d == 0) {\n                factors.Add(d);\n         \
    \       n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long d =\
    \ 2;\n        while (n > 1) {\n            while (n % d == 0) {\n            \
    \    factors.Add(d);\n                n /= d;\n            }\n            d +=\
    \ 1;\n        }\n        return factors;"]
stop_tokens:
- "\n    }\n"
