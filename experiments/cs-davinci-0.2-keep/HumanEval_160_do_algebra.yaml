name: HumanEval_160_do_algebra
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n    // the second list is a list of integers. Use the\
  \ two given lists to build the algebric \n    // expression and return the evaluation\
  \ of this expression.\n    // The basic algebra operations:\n    // Addition ( +\
  \ ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division\
  \ ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
  \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
  \ => result = 9\n    // Note:\n    // The length of operator list is equal to the\
  \ length of operand list minus one.\n    // Operand is a list of of non-negative\
  \ integers.\n    // Operator list has at least one operator, and operand list has\
  \ at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>\
  \ operand) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
  \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
  \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
  *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
  \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
  //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
  \ == (8L));\n    }\n\n}\n"
completions: ["        long result = operand[0];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            switch (op[i]) {\n                case \"+\":\n        \
    \            result += operand[i + 1];\n                    break;\n         \
    \       case \"-\":\n                    result -= operand[i + 1];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[i + 1];\n                    break;\n                case \"//\":\n\
    \                    result /= operand[i + 1];\n                    break;\n \
    \               case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n             \
    \   result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n    \
    \            result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;", "        // Write\
    \ your code here\n        return 0;", "        // Write your code here\n     \
    \   long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            if (op[i] == \"+\") {\n                result += operand[i +\
    \ 1];\n            } else if (op[i] == \"-\") {\n                result -= operand[i\
    \ + 1];\n            } else if (op[i] == \"*\") {\n                result *= operand[i\
    \ + 1];\n            } else if (op[i] == \"//\") {\n                result /=\
    \ operand[i + 1];\n            } else if (op[i] == \"**\") {\n               \
    \ result = (long)Math.Pow(result, operand[i + 1]);\n            }\n        }\n\
    \        return result;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", '        return
    0;', "        // Write your code here\n        return 0;", "        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n            }\n        }\n        return result;", "        long\
    \ result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n       \
    \     switch (op[i]) {\n                case \"+\":\n                    result\
    \ += operand[i + 1];\n                    break;\n                case \"-\":\n\
    \                    result -= operand[i + 1];\n                    break;\n \
    \               case \"*\":\n                    result *= operand[i + 1];\n \
    \                   break;\n                case \"//\":\n                   \
    \ result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return 0;", "        long\
    \ result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n       \
    \     if (op[i] == \"+\") {\n                result += operand[i + 1];\n     \
    \       } else if (op[i] == \"-\") {\n                result -= operand[i + 1];\n\
    \            } else if (op[i] == \"*\") {\n                result *= operand[i\
    \ + 1];\n            } else if (op[i] == \"//\") {\n                result /=\
    \ operand[i + 1];\n            } else if (op[i] == \"**\") {\n               \
    \ result = (long)Math.Pow(result, operand[i + 1]);\n            }\n        }\n\
    \        return result;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return 0;", "        //\
    \ Your code here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", "        long result = operand[0];\n        for (int i = 0; i <\
    \ op.Count; i++) {\n            switch (op[i]) {\n                case \"+\":\n\
    \                    result += operand[i + 1];\n                    break;\n \
    \               case \"-\":\n                    result -= operand[i + 1];\n \
    \                   break;\n                case \"*\":\n                    result\
    \ *= operand[i + 1];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[i + 1];\n                    break;\n\
    \                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here.\n        return 0;", "        //\
    \ Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;", "        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n            }\n        }\n        return result;", "        long\
    \ result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n       \
    \     switch (op[i]) {\n                case \"+\":\n                    result\
    \ += operand[i + 1];\n                    break;\n                case \"-\":\n\
    \                    result -= operand[i + 1];\n                    break;\n \
    \               case \"*\":\n                    result *= operand[i + 1];\n \
    \                   break;\n                case \"//\":\n                   \
    \ result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            if (op[i] == \"+\") {\n                result += operand[i + 1];\n\
    \            } else if (op[i] == \"-\") {\n                result -= operand[i\
    \ + 1];\n            } else if (op[i] == \"*\") {\n                result *= operand[i\
    \ + 1];\n            } else if (op[i] == \"//\") {\n                result /=\
    \ operand[i + 1];\n            } else if (op[i] == \"**\") {\n               \
    \ result = (long)Math.Pow(result, operand[i + 1]);\n            }\n        }\n\
    \        return result;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return 0;", "        //\
    \ Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", '        return 0;', "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\"\
    ) {\n                result += operand[i + 1];\n            } else if (op[i] ==\
    \ \"-\") {\n                result -= operand[i + 1];\n            } else if (op[i]\
    \ == \"*\") {\n                result *= operand[i + 1];\n            } else if\
    \ (op[i] == \"//\") {\n                result /= operand[i + 1];\n           \
    \ } else if (op[i] == \"**\") {\n                result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n            }\n        }\n        return result;", "     \
    \   long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            if (op[i] == \"+\") {\n                result += operand[i + 1];\n\
    \            } else if (op[i] == \"-\") {\n                result -= operand[i\
    \ + 1];\n            } else if (op[i] == \"*\") {\n                result *= operand[i\
    \ + 1];\n            } else if (op[i] == \"//\") {\n                result /=\
    \ operand[i + 1];\n            } else if (op[i] == \"**\") {\n               \
    \ result = (long)Math.Pow(result, operand[i + 1]);\n            }\n        }\n\
    \        return result;", "        // Write your code here\n        return 0;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here.\n        return 0;",
  '        return 0;', "        // Write your code here\n        return 0;", "   \
    \     // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        long result = operand[0];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            switch (op[i]) {\n                case \"+\":\n        \
    \            result += operand[i + 1];\n                    break;\n         \
    \       case \"-\":\n                    result -= operand[i + 1];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[i + 1];\n                    break;\n                case \"//\":\n\
    \                    result /= operand[i + 1];\n                    break;\n \
    \               case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // TODO: Implement your code here\n        return\
    \ 0;", "        long result = operand[0];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            switch (op[i]) {\n                case \"+\":\n        \
    \            result += operand[i + 1];\n                    break;\n         \
    \       case \"-\":\n                    result -= operand[i + 1];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[i + 1];\n                    break;\n                case \"//\":\n\
    \                    result /= operand[i + 1];\n                    break;\n \
    \               case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return 0;", "        //\
    \ Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand[0];\n        for (int i\
    \ = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here.\n        return 0;", "        // Write your code here\n        return\
    \ 0;", "        long result = operand[0];\n        for (int i = 0; i < op.Count;\
    \ i++) {\n            switch (op[i]) {\n                case \"+\":\n        \
    \            result += operand[i + 1];\n                    break;\n         \
    \       case \"-\":\n                    result -= operand[i + 1];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[i + 1];\n                    break;\n                case \"//\":\n\
    \                    result /= operand[i + 1];\n                    break;\n \
    \               case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here.\n        return 0;", "        long\
    \ result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n       \
    \     switch (op[i]) {\n                case \"+\":\n                    result\
    \ += operand[i + 1];\n                    break;\n                case \"-\":\n\
    \                    result -= operand[i + 1];\n                    break;\n \
    \               case \"*\":\n                    result *= operand[i + 1];\n \
    \                   break;\n                case \"//\":\n                   \
    \ result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       // Your code goes here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return 0;", "        //\
    \ Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;", "        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n            }\n        }\n        return result;", "        long\
    \ result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n       \
    \     switch (op[i]) {\n                case \"+\":\n                    result\
    \ += operand[i + 1];\n                    break;\n                case \"-\":\n\
    \                    result -= operand[i + 1];\n                    break;\n \
    \               case \"*\":\n                    result *= operand[i + 1];\n \
    \                   break;\n                case \"//\":\n                   \
    \ result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return 0;", " \
    \       long result = operand[0];\n        for (int i = 0; i < op.Count; i++)\
    \ {\n            switch (op[i]) {\n                case \"+\":\n             \
    \       result += operand[i + 1];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[i + 1];\n              \
    \      break;\n                case \"*\":\n                    result *= operand[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          result /= operand[i + 1];\n                    break;\n           \
    \     case \"**\":\n                    result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return 0;", "        //\
    \ Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // TODO: Implement\
    \ your solution here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return 0;", "        // Write your code here\n        return 0;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        return 0;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n\
    \                case \"+\":\n                    result += operand[i + 1];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i + 1];\n                    break;\n                case\
    \ \"*\":\n                    result *= operand[i + 1];\n                    break;\n\
    \                case \"//\":\n                    result /= operand[i + 1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.Pow(result, operand[i + 1]);\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = operand[0];\n\
    \        for (int i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\"\
    ) {\n                result += operand[i + 1];\n            } else if (op[i] ==\
    \ \"-\") {\n                result -= operand[i + 1];\n            } else if (op[i]\
    \ == \"*\") {\n                result *= operand[i + 1];\n            } else if\
    \ (op[i] == \"//\") {\n                result /= operand[i + 1];\n           \
    \ } else if (op[i] == \"**\") {\n                result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n            }\n        }\n        return result;", "     \
    \   long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n\
    \            switch (op[i]) {\n                case \"+\":\n                 \
    \   result += operand[i + 1];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[i + 1];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[i + 1];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    result = (long)Math.Pow(result, operand[i + 1]);\n\
    \                    break;\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
