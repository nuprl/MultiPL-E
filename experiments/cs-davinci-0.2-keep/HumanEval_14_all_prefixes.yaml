name: HumanEval_14_all_prefixes
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of all prefixes from shortest to longest of the\
  \ input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    public\
  \ static List<string> AllPrefixes(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
  \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
  \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
  asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
  WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
  WWW\"}))));\n    }\n\n}\n"
completions: ["        List<string> result = new List<string>();\n        for (int\
    \ i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0, i));\n\
    \        }\n        return result;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        List<string> result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> prefixes = new\
    \ List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n         \
    \   prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        for (int i = 1; i <=\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i));\n        }\n\
    \        return result;", "        var prefixes = new List<string>();\n      \
    \  for (int i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var res = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i));\n        }\n        return res;", "        var prefixes = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> result = new\
    \ List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n         \
    \   result.Add(str.Substring(0, i));\n        }\n        return result;", "  \
    \      List<string> result = new List<string>();\n        for (int i = 1; i <=\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i));\n        }\n\
    \        return result;", "        var result = new List<string>();\n        for\
    \ (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
