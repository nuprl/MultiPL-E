name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return True if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return False.\n    //\
  \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
  \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
  \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict.Count == 0) return false;\n        bool lower = dict.Keys.First().All(char.IsLower);\n\
    \        return dict.Keys.All(k => k.All(char.IsLower) == lower);", "        if\
    \ (dict.Count == 0) return false;\n        bool allUpper = true;\n        bool\
    \ allLower = true;\n        foreach (string key in dict.Keys) {\n            if\
    \ (key.ToUpper() != key) allUpper = false;\n            if (key.ToLower() != key)\
    \ allLower = false;\n        }\n        return allUpper || allLower;", "     \
    \   // TODO: Implement this function.\n        return false;", "        if (dict.Count\
    \ == 0) {\n            return false;\n        }\n        bool allLower = true;\n\
    \        bool allUpper = true;\n        foreach (var kvp in dict) {\n        \
    \    if (kvp.Key.ToLower() != kvp.Key) {\n                allLower = false;\n\
    \            }\n            if (kvp.Key.ToUpper() != kvp.Key) {\n            \
    \    allUpper = false;\n            }\n        }\n        return allLower || allUpper;",
  "        // TODO: Implement this function.\n        return false;", "        if\
    \ (dict.Count == 0) {\n            return false;\n        }\n        bool allLower\
    \ = true;\n        bool allUpper = true;\n        foreach (string key in dict.Keys)\
    \ {\n            if (key.ToUpper() == key) {\n                allLower = false;\n\
    \            }\n            if (key.ToLower() == key) {\n                allUpper\
    \ = false;\n            }\n        }\n        return allLower || allUpper;", " \
    \       // TODO: Implement this function.\n        return false;", '        return
    false;', "        if (dict.Count == 0) {\n            return false;\n        }\n\
    \        bool all_lower = true;\n        bool all_upper = true;\n        foreach\
    \ (string key in dict.Keys) {\n            if (key.ToLower() != key) {\n     \
    \           all_lower = false;\n            }\n            if (key.ToUpper() !=\
    \ key) {\n                all_upper = false;\n            }\n        }\n     \
    \   return all_lower || all_upper;", "        // Your code here\n        return\
    \ false;", "        if (dict.Count == 0) {\n            return false;\n      \
    \  }\n        bool allLower = true;\n        bool allUpper = true;\n        foreach\
    \ (string key in dict.Keys) {\n            if (key.ToLower() != key) {\n     \
    \           allLower = false;\n            }\n            if (key.ToUpper() !=\
    \ key) {\n                allUpper = false;\n            }\n        }\n      \
    \  return allLower || allUpper;", "        if (dict.Count == 0) {\n          \
    \  return false;\n        }\n        bool allLower = true;\n        bool allUpper\
    \ = true;\n        foreach (string key in dict.Keys) {\n            if (key.ToLower()\
    \ != key) {\n                allLower = false;\n            }\n            if\
    \ (key.ToUpper() != key) {\n                allUpper = false;\n            }\n\
    \        }\n        return allLower || allUpper;", "        if (dict.Count ==\
    \ 0) {\n            return false;\n        }\n        bool allLower = true;\n\
    \        bool allUpper = true;\n        foreach (string key in dict.Keys) {\n\
    \            if (key.ToUpper() != key) {\n                allUpper = false;\n\
    \            }\n            if (key.ToLower() != key) {\n                allLower\
    \ = false;\n            }\n        }\n        return allLower || allUpper;", " \
    \       if (dict.Count == 0) {\n            return false;\n        }\n       \
    \ bool isLower = dict.Keys.First().All(char.IsLower);\n        return dict.Keys.All(key\
    \ => key.All(char.IsLower) == isLower);", "        // TODO: Implement this function.\n\
    \        return false;", "        if (dict.Count == 0) {\n            return false;\n\
    \        }\n        bool allLower = true;\n        bool allUpper = true;\n   \
    \     foreach (string key in dict.Keys) {\n            if (key.ToUpper() == key)\
    \ {\n                allLower = false;\n            }\n            if (key.ToLower()\
    \ == key) {\n                allUpper = false;\n            }\n        }\n   \
    \     return allLower || allUpper;", '        return dict.Keys.All(key => key.ToUpper()
    == key) || dict.Keys.All(key => key.ToLower() == key);', "        if (dict.Count\
    \ == 0) return false;\n        bool allLower = true;\n        bool allUpper =\
    \ true;\n        foreach (var kvp in dict) {\n            if (kvp.Key.ToLower()\
    \ != kvp.Key) allLower = false;\n            if (kvp.Key.ToUpper() != kvp.Key)\
    \ allUpper = false;\n        }\n        return allLower || allUpper;", "     \
    \   // TODO: Implement this function.\n        return false;", "        // TODO:\
    \ Implement this function.\n        return false;"]
stop_tokens:
- "\n    }\n"
