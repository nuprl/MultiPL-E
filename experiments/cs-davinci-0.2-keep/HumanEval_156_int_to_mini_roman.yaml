name: HumanEval_156_int_to_mini_roman
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num\
  \ <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
  \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
  \    public static string IntToMiniRoman(long number) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
  xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
  ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n   \
  \ Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
  i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
  xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
  xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n   \
  \ Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
  cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\
  \n}\n"
completions: ["        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n     \
    \   int[] decimal_values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1 };\n        StringBuilder result = new StringBuilder();\n       \
    \ for (int i = 0; i < decimal_values.Length; i++) {\n            while (number\
    \ >= decimal_values[i]) {\n                number -= decimal_values[i];\n    \
    \            result.Append(roman[i]);\n            }\n        }\n        return\
    \ result.ToString();", "        var roman = new StringBuilder();\n        var\
    \ digits = new[] {\n            new { Value = 1000, Symbol = \"m\" },\n      \
    \      new { Value = 900, Symbol = \"cm\" },\n            new { Value = 500, Symbol\
    \ = \"d\" },\n            new { Value = 400, Symbol = \"cd\" },\n            new\
    \ { Value = 100, Symbol = \"c\" },\n            new { Value = 90, Symbol = \"\
    xc\" },\n            new { Value = 50, Symbol = \"l\" },\n            new { Value\
    \ = 40, Symbol = \"xl\" },\n            new { Value = 10, Symbol = \"x\" },\n\
    \            new { Value = 9, Symbol = \"ix\" },\n            new { Value = 5,\
    \ Symbol = \"v\" },\n            new { Value = 4, Symbol = \"iv\" },\n       \
    \     new { Value = 1, Symbol = \"i\" },\n        };\n        foreach (var digit\
    \ in digits) {\n            while (number >= digit.Value) {\n                roman.Append(digit.Symbol);\n\
    \                number -= digit.Value;\n            }\n        }\n        return\
    \ roman.ToString();", "        var sb = new StringBuilder();\n        while (number\
    \ > 0) {\n            if (number >= 1000) {\n                sb.Append('m');\n\
    \                number -= 1000;\n            } else if (number >= 900) {\n  \
    \              sb.Append(\"cm\");\n                number -= 900;\n          \
    \  } else if (number >= 500) {\n                sb.Append('d');\n            \
    \    number -= 500;\n            } else if (number >= 400) {\n               \
    \ sb.Append(\"cd\");\n                number -= 400;\n            } else if (number\
    \ >= 100) {\n                sb.Append('c');\n                number -= 100;\n\
    \            } else if (number >= 90) {\n                sb.Append(\"xc\");\n\
    \                number -= 90;\n            } else if (number >= 50) {\n     \
    \           sb.Append('l');\n                number -= 50;\n            } else\
    \ if (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append('x');\n\
    \                number -= 10;\n            } else if (number >= 9) {\n      \
    \          sb.Append(\"ix\");\n                number -= 9;\n            } else\
    \ if (number >= 5) {\n                sb.Append('v');\n                number\
    \ -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\"\
    );\n                number -= 4;\n            } else if (number >= 1) {\n    \
    \            sb.Append('i');\n                number -= 1;\n            }\n  \
    \      }\n        return sb.ToString();", "        if (number < 1 || number >\
    \ 1000) {\n            throw new ArgumentOutOfRangeException(\"number\", \"Number\
    \ must be between 1 and 1000\");\n        }\n        var roman = new StringBuilder();\n\
    \        var digits = new[] {\n            new { Value = 100, Symbol = 'c' },\n\
    \            new { Value = 10, Symbol = 'x' },\n            new { Value = 1, Symbol\
    \ = 'i' }\n        };\n        foreach (var digit in digits) {\n            var\
    \ count = number / digit.Value;\n            if (count > 0) {\n              \
    \  if (count == 9) {\n                    roman.Append(digit.Symbol);\n      \
    \              roman.Append((char)(digit.Symbol - 1));\n                } else\
    \ if (count >= 5) {\n                    roman.Append((char)(digit.Symbol - 1));\n\
    \                    roman.Append(new string(digit.Symbol, count - 5));\n    \
    \            } else if (count == 4) {\n                    roman.Append(digit.Symbol);\n\
    \                    roman.Append((char)(digit.Symbol - 1));\n               \
    \ } else {\n                    roman.Append(new string(digit.Symbol, count));\n\
    \                }\n            }\n            number %= digit.Value;\n      \
    \  }\n        return roman.ToString();", "        string result = \"\";\n    \
    \    while (number > 0) {\n            if (number >= 1000) {\n               \
    \ result += \"m\";\n                number -= 1000;\n            } else if (number\
    \ >= 900) {\n                result += \"cm\";\n                number -= 900;\n\
    \            } else if (number >= 500) {\n                result += \"d\";\n \
    \               number -= 500;\n            } else if (number >= 400) {\n    \
    \            result += \"cd\";\n                number -= 400;\n            }\
    \ else if (number >= 100) {\n                result += \"c\";\n              \
    \  number -= 100;\n            } else if (number >= 90) {\n                result\
    \ += \"xc\";\n                number -= 90;\n            } else if (number >=\
    \ 50) {\n                result += \"l\";\n                number -= 50;\n   \
    \         } else if (number >= 40) {\n                result += \"xl\";\n    \
    \            number -= 40;\n            } else if (number >= 10) {\n         \
    \       result += \"x\";\n                number -= 10;\n            } else if\
    \ (number >= 9) {\n                result += \"ix\";\n                number -=\
    \ 9;\n            } else if (number >= 5) {\n                result += \"v\";\n\
    \                number -= 5;\n            } else if (number >= 4) {\n       \
    \         result += \"iv\";\n                number -= 4;\n            } else\
    \ if (number >= 1) {\n                result += \"i\";\n                number\
    \ -= 1;\n            }\n        }\n        return result;", "        var roman\
    \ = new StringBuilder();\n        var digits = new List<int>();\n        while\
    \ (number > 0) {\n            digits.Add((int)(number % 10));\n            number\
    \ /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count;\
    \ i++) {\n            var digit = digits[i];\n            if (digit == 0) {\n\
    \                continue;\n            }\n            if (digit <= 3) {\n   \
    \             roman.Append(new string('i', digit));\n            } else if (digit\
    \ == 4) {\n                roman.Append(\"iv\");\n            } else if (digit\
    \ == 5) {\n                roman.Append(\"v\");\n            } else if (digit\
    \ <= 8) {\n                roman.Append(\"v\" + new string('i', digit - 5));\n\
    \            } else if (digit == 9) {\n                roman.Append(\"ix\");\n\
    \            }\n            if (i == 0) {\n                roman.Append(new string('x',\
    \ digits.Count - 1));\n            } else if (i == 1) {\n                roman.Append(new\
    \ string('x', digits.Count - 2));\n            } else if (i == 2) {\n        \
    \        roman.Append(new string('c', digits.Count - 3));\n            } else\
    \ if (i == 3) {\n                roman.Append(new string('m', digits.Count - 4));\n\
    \            }\n        }\n        return roman.ToString();", "        string[]\
    \ roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = new int[]\
    \ { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result\
    \ = \"\";\n        for (int i = 0; i < arabic.Length; i++) {\n            while\
    \ (number >= arabic[i]) {\n                number -= arabic[i];\n            \
    \    result += roman[i];\n            }\n        }\n        return result;", " \
    \       string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] values = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder result\
    \ = new StringBuilder();\n        for (int i = 0; i < values.Length; i++) {\n\
    \            while (number >= values[i]) {\n                number -= values[i];\n\
    \                result.Append(roman[i]);\n            }\n        }\n        return\
    \ result.ToString();", "        var result = new StringBuilder();\n        while\
    \ (number > 0) {\n            if (number >= 1000) {\n                result.Append('m');\n\
    \                number -= 1000;\n            } else if (number >= 900) {\n  \
    \              result.Append(\"cm\");\n                number -= 900;\n      \
    \      } else if (number >= 500) {\n                result.Append('d');\n    \
    \            number -= 500;\n            } else if (number >= 400) {\n       \
    \         result.Append(\"cd\");\n                number -= 400;\n           \
    \ } else if (number >= 100) {\n                result.Append('c');\n         \
    \       number -= 100;\n            } else if (number >= 90) {\n             \
    \   result.Append(\"xc\");\n                number -= 90;\n            } else\
    \ if (number >= 50) {\n                result.Append('l');\n                number\
    \ -= 50;\n            } else if (number >= 40) {\n                result.Append(\"\
    xl\");\n                number -= 40;\n            } else if (number >= 10) {\n\
    \                result.Append('x');\n                number -= 10;\n        \
    \    } else if (number >= 9) {\n                result.Append(\"ix\");\n     \
    \           number -= 9;\n            } else if (number >= 5) {\n            \
    \    result.Append('v');\n                number -= 5;\n            } else if\
    \ (number >= 4) {\n                result.Append(\"iv\");\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return result.ToString();",
  "        // Your code goes here.\n        return \"\";", "        string result\
    \ = \"\";\n        while (number > 0) {\n            if (number >= 1000) {\n \
    \               result += \"m\";\n                number -= 1000;\n          \
    \  } else if (number >= 900) {\n                result += \"cm\";\n          \
    \      number -= 900;\n            } else if (number >= 500) {\n             \
    \   result += \"d\";\n                number -= 500;\n            } else if (number\
    \ >= 400) {\n                result += \"cd\";\n                number -= 400;\n\
    \            } else if (number >= 100) {\n                result += \"c\";\n \
    \               number -= 100;\n            } else if (number >= 90) {\n     \
    \           result += \"xc\";\n                number -= 90;\n            } else\
    \ if (number >= 50) {\n                result += \"l\";\n                number\
    \ -= 50;\n            } else if (number >= 40) {\n                result += \"\
    xl\";\n                number -= 40;\n            } else if (number >= 10) {\n\
    \                result += \"x\";\n                number -= 10;\n           \
    \ } else if (number >= 9) {\n                result += \"ix\";\n             \
    \   number -= 9;\n            } else if (number >= 5) {\n                result\
    \ += \"v\";\n                number -= 5;\n            } else if (number >= 4)\
    \ {\n                result += \"iv\";\n                number -= 4;\n       \
    \     } else if (number >= 1) {\n                result += \"i\";\n          \
    \      number -= 1;\n            }\n        }\n        return result;", "    \
    \    string[] roman = { \"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n \
    \       string result = \"\";\n        int i = 0;\n        while (number > 0)\
    \ {\n            int digit = (int)(number % 10);\n            if (digit == 0)\
    \ {\n                // do nothing\n            } else if (digit <= 3) {\n   \
    \             result = new string(roman[i][0], digit) + result;\n            }\
    \ else if (digit == 4) {\n                result = roman[i] + roman[i + 1] + result;\n\
    \            } else if (digit <= 8) {\n                result = roman[i + 1] +\
    \ new string(roman[i][0], digit - 5) + result;\n            } else {\n       \
    \         result = roman[i] + roman[i + 2] + result;\n            }\n        \
    \    number /= 10;\n            i += 2;\n        }\n        return result;", " \
    \       string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic\
    \ = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n    \
    \    StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arabic.Length;\
    \ i++) {\n            while (number >= arabic[i]) {\n                number -=\
    \ arabic[i];\n                sb.Append(roman[i]);\n            }\n        }\n\
    \        return sb.ToString();", "        if (number < 1 || number > 1000) {\n\
    \            throw new ArgumentOutOfRangeException();\n        }\n        var\
    \ roman = new StringBuilder();\n        var digits = new List<int>();\n      \
    \  while (number > 0) {\n            digits.Add((int)(number % 10));\n       \
    \     number /= 10;\n        }\n        for (int i = digits.Count - 1; i >= 0;\
    \ i--) {\n            var digit = digits[i];\n            if (digit == 0) {\n\
    \                continue;\n            }\n            if (digit < 4) {\n    \
    \            roman.Append(new string('i', digit));\n            } else if (digit\
    \ == 4) {\n                roman.Append(\"iv\");\n            } else if (digit\
    \ == 5) {\n                roman.Append(\"v\");\n            } else if (digit\
    \ < 9) {\n                roman.Append(\"v\" + new string('i', digit - 5));\n\
    \            } else {\n                roman.Append(\"ix\");\n            }\n\
    \            if (i == 2) {\n                roman.Append(new string('c', digit));\n\
    \            } else if (i == 1) {\n                roman.Append(new string('x',\
    \ digit));\n            }\n        }\n        return roman.ToString();", "   \
    \     string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;",
  "        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        var sb = new StringBuilder();\n        while (number\
    \ >= 1000) {\n            sb.Append('m');\n            number -= 1000;\n     \
    \   }\n        if (number >= 900) {\n            sb.Append(\"cm\");\n        \
    \    number -= 900;\n        }\n        if (number >= 500) {\n            sb.Append('d');\n\
    \            number -= 500;\n        }\n        if (number >= 400) {\n       \
    \     sb.Append(\"cd\");\n            number -= 400;\n        }\n        while\
    \ (number >= 100) {\n            sb.Append('c');\n            number -= 100;\n\
    \        }\n        if (number >= 90) {\n            sb.Append(\"xc\");\n    \
    \        number -= 90;\n        }\n        if (number >= 50) {\n            sb.Append('l');\n\
    \            number -= 50;\n        }\n        if (number >= 40) {\n         \
    \   sb.Append(\"xl\");\n            number -= 40;\n        }\n        while (number\
    \ >= 10) {\n            sb.Append('x');\n            number -= 10;\n        }\n\
    \        if (number >= 9) {\n            sb.Append(\"ix\");\n            number\
    \ -= 9;\n        }\n        if (number >= 5) {\n            sb.Append('v');\n\
    \            number -= 5;\n        }\n        if (number >= 4) {\n           \
    \ sb.Append(\"iv\");\n            number -= 4;\n        }\n        while (number\
    \ >= 1) {\n            sb.Append('i');\n            number -= 1;\n        }\n\
    \        return sb.ToString();", "        string[] roman = new string[] { \"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\" };\n        int[] values = new int[] { 1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < values.Length; i++) {\n            while (number\
    \ >= values[i]) {\n                number -= values[i];\n                sb.Append(roman[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        string[] roman\
    \ = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = new int[] { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder result\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result.Append(roman[i]);\n            }\n        }\n        return\
    \ result.ToString();", "        var roman = new StringBuilder();\n        var\
    \ numeral = new Dictionary<int, string> {\n            { 1, \"i\" },\n       \
    \     { 5, \"v\" },\n            { 10, \"x\" },\n            { 50, \"l\" },\n\
    \            { 100, \"c\" },\n            { 500, \"d\" },\n            { 1000,\
    \ \"m\" }\n        };\n        var numeral_keys = numeral.Keys.ToList();\n   \
    \     numeral_keys.Sort();\n        numeral_keys.Reverse();\n        foreach (var\
    \ key in numeral_keys) {\n            var count = number / key;\n            number\
    \ %= key;\n            if (count == 4) {\n                roman.Append(numeral[key]);\n\
    \                roman.Append(numeral[key * 5]);\n            } else if (count\
    \ == 9) {\n                roman.Append(numeral[key]);\n                roman.Append(numeral[key\
    \ * 10]);\n            } else {\n                if (count >= 5) {\n         \
    \           roman.Append(numeral[key * 5]);\n                    count -= 5;\n\
    \                }\n                for (var i = 0; i < count; i++) {\n      \
    \              roman.Append(numeral[key]);\n                }\n            }\n\
    \        }\n        return roman.ToString();", "        string[] romans = new\
    \ string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\" };\n        int[] numbers = new int[] { 1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < numbers.Length; i++) {\n     \
    \       while (number >= numbers[i]) {\n                sb.Append(romans[i]);\n\
    \                number -= numbers[i];\n            }\n        }\n        return\
    \ sb.ToString();"]
stop_tokens:
- "\n    }\n"
