language: cs
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \n"
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Write your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8339fb165c764d1f943911ab328f4207>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8339fb165c764d1f943911ab328f4207>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Write your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8339fb165c764d1f943911ab328f4207>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8339fb165c764d1f943911ab328f4207>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ return s.Length >= 3 && s.Substring(0, 3).Distinct().Count() == 3;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\"\
    )) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ee3108246714e9abf616dcc02f2e23a>:0 \n"
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code goes here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \n"
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code goes here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"\
    a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement me\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479a037be70041ae983a358fa271fe6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479a037be70041ae983a358fa271fe6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce6ca4b4089642b6a76af23305d25754>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce6ca4b4089642b6a76af23305d25754>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \n"
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca7e7d8132654266b9687d6d9269f34e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca7e7d8132654266b9687d6d9269f34e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce6ca4b4089642b6a76af23305d25754>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce6ca4b4089642b6a76af23305d25754>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"\
    a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code goes here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ac284313b004c3798fba8d4b3d39f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \n"
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"\
    a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement me\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479a037be70041ae983a358fa271fe6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479a037be70041ae983a358fa271fe6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: implement this method\n        //throw new NotImplementedException();\n\
    \        if (s.Length < 3)\n            return false;\n        for (int i = 0;\
    \ i < s.Length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"\
    a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7464981087514692ad2cdcac8fee0338>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba4a231a51b14c8d9f49d67d4f6505a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce6ca4b4089642b6a76af23305d25754>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce6ca4b4089642b6a76af23305d25754>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code goes here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement me\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479a037be70041ae983a358fa271fe6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479a037be70041ae983a358fa271fe6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ if (s.Length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n\
    \    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
    abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
    adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
    iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc13a3d85b0472481009498770ff028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ // Your code goes here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f54fe761ed24b71aaab88a1d8602af7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800331
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static bool IsHappy(string s) {\n       \
    \ for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"\
    aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"\
    aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"\
    xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n \
    \   Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1b6b1d7887148b987003d2913876c66>:0 \n"
  stdout: ''
  timestamp: 1659800331
