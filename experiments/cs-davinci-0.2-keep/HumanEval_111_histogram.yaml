name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b':\
  \ 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
  \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n   \
  \ // histogram('') == {}\n    public static Dictionary<string,long> Histogram(string\
  \ test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        var result = new Dictionary<string,long>();\n        var letters\
    \ = test.Split(' ');\n        foreach (var letter in letters) {\n            if\
    \ (result.ContainsKey(letter)) {\n                result[letter]++;\n        \
    \    } else {\n                result[letter] = 1;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      Dictionary<string,long> letterCount = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (letterCount.ContainsKey(letter))\
    \ {\n                letterCount[letter]++;\n            } else {\n          \
    \      letterCount[letter] = 1;\n            }\n        }\n        long max =\
    \ letterCount.Values.Max();\n        foreach (KeyValuePair<string,long> entry\
    \ in letterCount) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        string[]\
    \ letters = test.Split(' ');\n        foreach (string letter in letters) {\n \
    \           if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter] += 1;\n            } else {\n            \
    \    result[letter] = 1;\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.Split(' ')) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter]++;\n            } else {\n                dict[letter]\
    \ = 1;\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> letterCount = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (letterCount.ContainsKey(letter))\
    \ {\n                letterCount[letter] += 1;\n            } else {\n       \
    \         letterCount[letter] = 1;\n            }\n        }\n        long max\
    \ = letterCount.Values.Max();\n        foreach (string letter in letterCount.Keys)\
    \ {\n            if (letterCount[letter] == max) {\n                result[letter]\
    \ = max;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        return dict;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test == \"\") {\n            return\
    \ result;\n        }\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ counts = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = counts.Values.Max();\n        foreach (string letter\
    \ in counts.Keys) {\n            if (counts[letter] == max) {\n              \
    \  result[letter] = max;\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    Dictionary<string,long> temp = new Dictionary<string,long>();\n        string[]\
    \ words = test.Split(' ');\n        foreach (string word in words) {\n       \
    \     if (temp.ContainsKey(word)) {\n                temp[word]++;\n         \
    \   } else {\n                temp.Add(word, 1);\n            }\n        }\n \
    \       long max = 0;\n        foreach (KeyValuePair<string,long> item in temp)\
    \ {\n            if (item.Value > max) {\n                max = item.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> item in\
    \ temp) {\n            if (item.Value == max) {\n                result.Add(item.Key,\
    \ item.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> temp = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (temp.ContainsKey(letter)) {\n                temp[letter]++;\n\
    \            } else {\n                temp.Add(letter, 1);\n            }\n \
    \       }\n        long max = temp.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ kvp in temp) {\n            if (kvp.Value == max) {\n                result.Add(kvp.Key,\
    \ kvp.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> temp\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        foreach (string letter in letters) {\n            if (temp.ContainsKey(letter))\
    \ {\n                temp[letter]++;\n            } else {\n                temp.Add(letter,\
    \ 1);\n            }\n        }\n        long max = temp.Values.Max();\n     \
    \   foreach (KeyValuePair<string,long> pair in temp) {\n            if (pair.Value\
    \ == max) {\n                result.Add(pair.Key, pair.Value);\n            }\n\
    \        }\n        return result;"]
stop_tokens:
- "\n    }\n"
