name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b':\
  \ 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
  \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n   \
  \ // histogram('') == {}\n    public static Dictionary<string,long> Histogram(string\
  \ test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        var result = new Dictionary<string,long>();\n        var letters\
    \ = test.Split(' ');\n        foreach (var letter in letters) {\n            if\
    \ (result.ContainsKey(letter)) {\n                result[letter]++;\n        \
    \    } else {\n                result[letter] = 1;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      Dictionary<string,long> letterCount = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (letterCount.ContainsKey(letter))\
    \ {\n                letterCount[letter]++;\n            } else {\n          \
    \      letterCount[letter] = 1;\n            }\n        }\n        long max =\
    \ letterCount.Values.Max();\n        foreach (KeyValuePair<string,long> entry\
    \ in letterCount) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        string[]\
    \ letters = test.Split(' ');\n        foreach (string letter in letters) {\n \
    \           if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter] += 1;\n            } else {\n            \
    \    result[letter] = 1;\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.Split(' ')) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter]++;\n            } else {\n                dict[letter]\
    \ = 1;\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> letterCount = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (letterCount.ContainsKey(letter))\
    \ {\n                letterCount[letter] += 1;\n            } else {\n       \
    \         letterCount[letter] = 1;\n            }\n        }\n        long max\
    \ = letterCount.Values.Max();\n        foreach (string letter in letterCount.Keys)\
    \ {\n            if (letterCount[letter] == max) {\n                result[letter]\
    \ = max;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        return dict;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test == \"\") {\n            return\
    \ result;\n        }\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ counts = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = counts.Values.Max();\n        foreach (string letter\
    \ in counts.Keys) {\n            if (counts[letter] == max) {\n              \
    \  result[letter] = max;\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    Dictionary<string,long> temp = new Dictionary<string,long>();\n        string[]\
    \ words = test.Split(' ');\n        foreach (string word in words) {\n       \
    \     if (temp.ContainsKey(word)) {\n                temp[word]++;\n         \
    \   } else {\n                temp.Add(word, 1);\n            }\n        }\n \
    \       long max = 0;\n        foreach (KeyValuePair<string,long> item in temp)\
    \ {\n            if (item.Value > max) {\n                max = item.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> item in\
    \ temp) {\n            if (item.Value == max) {\n                result.Add(item.Key,\
    \ item.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> temp = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (temp.ContainsKey(letter)) {\n                temp[letter]++;\n\
    \            } else {\n                temp.Add(letter, 1);\n            }\n \
    \       }\n        long max = temp.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ kvp in temp) {\n            if (kvp.Value == max) {\n                result.Add(kvp.Key,\
    \ kvp.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> temp\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        foreach (string letter in letters) {\n            if (temp.ContainsKey(letter))\
    \ {\n                temp[letter]++;\n            } else {\n                temp.Add(letter,\
    \ 1);\n            }\n        }\n        long max = temp.Values.Max();\n     \
    \   foreach (KeyValuePair<string,long> pair in temp) {\n            if (pair.Value\
    \ == max) {\n                result.Add(pair.Key, pair.Value);\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (histogram.ContainsKey(word)) {\n                histogram[word]++;\n\
    \            } else {\n                histogram[word] = 1;\n            }\n \
    \       }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> dict = new Dictionary<string,long>();\n       \
    \ string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (dict.ContainsKey(letter)) {\n                dict[letter]++;\n\
    \            } else {\n                dict.Add(letter, 1);\n            }\n \
    \       }\n        return dict;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      Dictionary<string,long> counts = new Dictionary<string,long>();\n     \
    \   foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = 0;\n  \
    \      foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ > max) {\n                max = pair.Value;\n            }\n        }\n    \
    \    foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ == max) {\n                result[pair.Key] = pair.Value;\n            }\n \
    \       }\n        return result;", "        Dictionary<string,long> dict = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter] += 1;\n            } else {\n              \
    \  dict[letter] = 1;\n            }\n        }\n        return dict;", "     \
    \   Dictionary<string,long> result = new Dictionary<string,long>();\n        string[]\
    \ letters = test.Split(' ');\n        foreach (string letter in letters) {\n \
    \           if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] words = test.Split(' ');\n    \
    \    foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n     \
    \           histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> temp\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (temp.ContainsKey(word))\
    \ {\n                temp[word]++;\n            } else {\n                temp.Add(word,\
    \ 1);\n            }\n        }\n        long max = temp.Values.Max();\n     \
    \   foreach (KeyValuePair<string,long> pair in temp) {\n            if (pair.Value\
    \ == max) {\n                result.Add(pair.Key, pair.Value);\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> hist = new\
    \ Dictionary<string,long>();\n        foreach (string s in test.Split(' ')) {\n\
    \            if (hist.ContainsKey(s)) {\n                hist[s]++;\n        \
    \    } else {\n                hist[s] = 1;\n            }\n        }\n      \
    \  return hist;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (result.ContainsKey(letter)) {\n\
    \                result[letter]++;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string letter in result.Keys)\
    \ {\n            if (result[letter] == max) {\n                final[letter] =\
    \ result[letter];\n            }\n        }\n        return final;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        string[]\
    \ letters = test.Split(' ');\n        foreach (string letter in letters) {\n \
    \           if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.Split(' ')) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] words = test.Split(' ');\n        Dictionary<string,long> dict =\
    \ new Dictionary<string,long>();\n        foreach (string word in words) {\n \
    \           if (dict.ContainsKey(word)) {\n                dict[word]++;\n   \
    \         } else {\n                dict[word] = 1;\n            }\n        }\n\
    \        long max = 0;\n        foreach (KeyValuePair<string,long> entry in dict)\
    \ {\n            if (entry.Value > max) {\n                max = entry.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> entry in\
    \ dict) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        Dictionary<string,long>\
    \ temp = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (temp.ContainsKey(letter))\
    \ {\n                temp[letter]++;\n            } else {\n                temp.Add(letter,\
    \ 1);\n            }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ pair in temp) {\n            if (pair.Value > max) {\n                max =\
    \ pair.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ pair in temp) {\n            if (pair.Value == max) {\n                result.Add(pair.Key,\
    \ pair.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] testArray = test.Split('\
    \ ');\n        foreach (string s in testArray) {\n            if (result.ContainsKey(s))\
    \ {\n                result[s]++;\n            } else {\n                result.Add(s,\
    \ 1);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> dict = new Dictionary<string,long>();\n       \
    \ if (test.Length == 0) {\n            return dict;\n        }\n        string[]\
    \ letters = test.Split(' ');\n        foreach (string letter in letters) {\n \
    \           if (dict.ContainsKey(letter)) {\n                dict[letter] += 1;\n\
    \            } else {\n                dict[letter] = 1;\n            }\n    \
    \    }\n        long max = dict.Values.Max();\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ entry in dict) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        if\
    \ (test.Length == 0) return result;\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> dict = new Dictionary<string,long>();\n     \
    \   foreach (string word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word]++;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n        }\n        long max = dict.Values.Max();\n    \
    \    foreach (KeyValuePair<string,long> pair in dict) {\n            if (pair.Value\
    \ == max) {\n                result[pair.Key] = pair.Value;\n            }\n \
    \       }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        long max = 0;\n        foreach (string letter in letters) {\n       \
    \     if (result.ContainsKey(letter)) {\n                result[letter]++;\n \
    \           } else {\n                result[letter] = 1;\n            }\n   \
    \         if (result[letter] > max) {\n                max = result[letter];\n\
    \            }\n        }\n        Dictionary<string,long> result2 = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> pair in result) {\n            if\
    \ (pair.Value == max) {\n                result2[pair.Key] = pair.Value;\n   \
    \         }\n        }\n        return result2;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> count = new Dictionary<string,long>();\n    \
    \    foreach (string word in words) {\n            if (count.ContainsKey(word))\
    \ {\n                count[word]++;\n            } else {\n                count[word]\
    \ = 1;\n            }\n        }\n        long max = count.Values.Max();\n   \
    \     foreach (string word in count.Keys) {\n            if (count[word] == max)\
    \ {\n                result[word] = max;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \        var letters = test.Split(' ');\n        foreach (var letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> dict = new Dictionary<string,long>();\n       \
    \ string[] words = test.Split(' ');\n        foreach (string word in words) {\n\
    \            if (dict.ContainsKey(word)) {\n                dict[word] += 1;\n\
    \            } else {\n                dict[word] = 1;\n            }\n      \
    \  }\n        return dict;", "        Dictionary<string,long> d = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) return d;\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (d.ContainsKey(word))\
    \ {\n                d[word]++;\n            } else {\n                d[word]\
    \ = 1;\n            }\n        }\n        long max = d.Values.Max();\n       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        foreach\
    \ (KeyValuePair<string,long> kvp in d) {\n            if (kvp.Value == max) {\n\
    \                result[kvp.Key] = kvp.Value;\n            }\n        }\n    \
    \    return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   if (test.Length == 0) {\n            return result;\n        }\n        string[]\
    \ words = test.Split(' ');\n        Dictionary<string,long> hist = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (hist.ContainsKey(word))\
    \ {\n                hist[word]++;\n            } else {\n                hist[word]\
    \ = 1;\n            }\n        }\n        long max = hist.Values.Max();\n    \
    \    foreach (KeyValuePair<string,long> entry in hist) {\n            if (entry.Value\
    \ == max) {\n                result[entry.Key] = entry.Value;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\
    \ {\n            if (result.ContainsKey(s)) {\n                result[s]++;\n\
    \            } else {\n                result[s] = 1;\n            }\n       \
    \ }\n        return result;", "        Dictionary<string,long> histogram = new\
    \ Dictionary<string,long>();\n        foreach (string letter in test.Split(' '))\
    \ {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter] += 1;\n            } else {\n            \
    \    result[letter] = 1;\n            }\n        }\n        return result;", " \
    \       var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kvp in dict) {\n            if (kvp.Value == max) {\n  \
    \              result[kvp.Key] = kvp.Value;\n            }\n        }\n      \
    \  return result;", "        Dictionary<string,long> dict = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (dict.ContainsKey(letter)) {\n                dict[letter]++;\n\
    \            } else {\n                dict.Add(letter, 1);\n            }\n \
    \       }\n        return dict;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]\
    \ += 1;\n            } else {\n                counts[letter] = 1;\n         \
    \   }\n        }\n        long max = counts.Values.Max();\n        foreach (string\
    \ letter in counts.Keys) {\n            if (counts[letter] == max) {\n       \
    \         result[letter] = max;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> kvp in counts) {\n            if (kvp.Value\
    \ == max) {\n                result[kvp.Key] = kvp.Value;\n            }\n   \
    \     }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ result;\n        }\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ letterCount = new Dictionary<string,long>();\n        foreach (string letter\
    \ in letters) {\n            if (letterCount.ContainsKey(letter)) {\n        \
    \        letterCount[letter]++;\n            } else {\n                letterCount[letter]\
    \ = 1;\n            }\n        }\n        long max = letterCount.Values.Max();\n\
    \        foreach (string letter in letterCount.Keys) {\n            if (letterCount[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> hist = new Dictionary<string,long>();\n       \
    \ foreach (string s in test.Split(' ')) {\n            if (hist.ContainsKey(s))\
    \ {\n                hist[s]++;\n            } else {\n                hist[s]\
    \ = 1;\n            }\n        }\n        return hist;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in counts) {\n            if\
    \ (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (result.ContainsKey(letter)) {\n\
    \                result[letter]++;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ pair in result) {\n            if (pair.Value == max) {\n                final[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        if (letters.Length == 0) {\n            return result;\n      \
    \  }\n        long max = 0;\n        foreach (string letter in letters) {\n  \
    \          if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \          if (result[letter] > max) {\n                max = result[letter];\n\
    \            }\n        }\n        Dictionary<string,long> maxResult = new Dictionary<string,long>();\n\
    \        foreach (string letter in result.Keys) {\n            if (result[letter]\
    \ == max) {\n                maxResult[letter] = max;\n            }\n       \
    \ }\n        return maxResult;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] words = test.Split(' ');\n    \
    \    foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> letterCount = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (letterCount.ContainsKey(letter))\
    \ {\n                letterCount[letter] += 1;\n            } else {\n       \
    \         letterCount[letter] = 1;\n            }\n        }\n        long maxCount\
    \ = letterCount.Values.Max();\n        foreach (KeyValuePair<string,long> kvp\
    \ in letterCount) {\n            if (kvp.Value == maxCount) {\n              \
    \  result[kvp.Key] = kvp.Value;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   if (test.Length == 0) {\n            return result;\n        }\n        string[]\
    \ letters = test.Split(' ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   var letters = test.Split(' ');\n        foreach (var letter in letters) {\n\
    \            if (result.ContainsKey(letter)) {\n                result[letter]\
    \ += 1;\n            } else {\n                result[letter] = 1;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        for (int i = 0; i < letters.Length;\
    \ i++) {\n            if (result.ContainsKey(letters[i])) {\n                result[letters[i]]++;\n\
    \            } else {\n                result.Add(letters[i], 1);\n          \
    \  }\n        }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> hist\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (hist.ContainsKey(s)) {\n                hist[s]++;\n\
    \            } else {\n                hist[s] = 1;\n            }\n        }\n\
    \        return hist;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> hist = new\
    \ Dictionary<string,long>();\n        foreach (string s in test.Split(' ')) {\n\
    \            if (hist.ContainsKey(s)) {\n                hist[s]++;\n        \
    \    } else {\n                hist[s] = 1;\n            }\n        }\n      \
    \  return hist;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n  \
    \      foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   Dictionary<string,long> counts = new Dictionary<string,long>();\n        string[]\
    \ letters = test.Split(' ');\n        foreach (string letter in letters) {\n \
    \           if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = 0;\n        foreach (KeyValuePair<string,long> pair\
    \ in counts) {\n            if (pair.Value > max) {\n                max = pair.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> pair in\
    \ counts) {\n            if (pair.Value == max) {\n                result[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test == \"\") {\n     \
    \       return result;\n        }\n        string[] letters = test.Split(' ');\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> hist = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')) {\n            if (hist.ContainsKey(s))\
    \ {\n                hist[s]++;\n            } else {\n                hist[s]\
    \ = 1;\n            }\n        }\n        return hist;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) return\
    \ result;\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ counts = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = counts.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value == max) {\n                result[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> pair in counts) {\n            if\
    \ (pair.Value == max) {\n                result[pair.Key] = pair.Value;\n    \
    \        }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test == \"\") {\n     \
    \       return result;\n        }\n        string[] letters = test.Split(' ');\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] letters = test.Split(' ');\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = counts.Values.Max();\n        foreach (string letter\
    \ in counts.Keys) {\n            if (counts[letter] == max) {\n              \
    \  result[letter] = max;\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> hist\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (hist.ContainsKey(s)) {\n                hist[s]++;\n\
    \            } else {\n                hist[s] = 1;\n            }\n        }\n\
    \        return hist;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n     \
    \           histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        var dict\
    \ = new Dictionary<string,long>();\n        var max = 0;\n        var max_key\
    \ = \"\";\n        foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n            if (dict[c] > max) {\n                max =\
    \ (int)dict[c];\n                max_key = c;\n            }\n        }\n    \
    \    var result = new Dictionary<string,long>();\n        foreach (var key in\
    \ dict.Keys) {\n            if (dict[key] == max) {\n                result[key]\
    \ = max;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> count = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (count.ContainsKey(letter))\
    \ {\n                count[letter]++;\n            } else {\n                count[letter]\
    \ = 1;\n            }\n        }\n        long max = count.Values.Max();\n   \
    \     foreach (KeyValuePair<string,long> entry in count) {\n            if (entry.Value\
    \ == max) {\n                result[entry.Key] = entry.Value;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        long max = 0;\n        foreach (string letter in letters) {\n       \
    \     if (result.ContainsKey(letter)) {\n                result[letter]++;\n \
    \           } else {\n                result[letter] = 1;\n            }\n   \
    \         if (result[letter] > max) {\n                max = result[letter];\n\
    \            }\n        }\n        Dictionary<string,long> final = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> entry in result) {\n            if\
    \ (entry.Value == max) {\n                final[entry.Key] = entry.Value;\n  \
    \          }\n        }\n        return final;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (result.ContainsKey(letter)) {\n\
    \                result[letter]++;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ maxes = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ kvp in result) {\n            if (kvp.Value == max) {\n                maxes[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return maxes;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> temp\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        long max = 0;\n        foreach (string letter in letters) {\n       \
    \     if (temp.ContainsKey(letter)) {\n                temp[letter]++;\n     \
    \       } else {\n                temp.Add(letter, 1);\n            }\n      \
    \      if (temp[letter] > max) {\n                max = temp[letter];\n      \
    \      }\n        }\n        foreach (KeyValuePair<string,long> entry in temp)\
    \ {\n            if (entry.Value == max) {\n                result.Add(entry.Key,\
    \ entry.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        // Your code here\n        return null;", " \
    \       var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        return dict;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> dict = new Dictionary<string,long>();\n       \
    \ foreach (string s in test.Split(' ')) {\n            if (dict.ContainsKey(s))\
    \ {\n                dict[s]++;\n            } else {\n                dict[s]\
    \ = 1;\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> temp = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (temp.ContainsKey(letter)) {\n\
    \                temp[letter]++;\n            } else {\n                temp.Add(letter,\
    \ 1);\n            }\n            if (temp[letter] > max) {\n                max\
    \ = temp[letter];\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in temp) {\n            if (entry.Value == max) {\n                result.Add(entry.Key,\
    \ entry.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        return dict;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> temp = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (temp.ContainsKey(letter)) {\n\
    \                temp[letter]++;\n            } else {\n                temp.Add(letter,\
    \ 1);\n            }\n            if (temp[letter] > max) {\n                max\
    \ = temp[letter];\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ kvp in temp) {\n            if (kvp.Value == max) {\n                result.Add(kvp.Key,\
    \ kvp.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter]++;\n            } else {\n                dict.Add(letter,\
    \ 1);\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test == \"\") {\n            return\
    \ result;\n        }\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ count = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (count.ContainsKey(letter)) {\n                count[letter]\
    \ += 1;\n            } else {\n                count[letter] = 1;\n          \
    \  }\n        }\n        long max = count.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ entry in count) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        Dictionary<string,long>\
    \ counts = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word]++;\n            } else {\n                counts[word]\
    \ = 1;\n            }\n        }\n        long max = counts.Values.Max();\n  \
    \      foreach (string key in counts.Keys) {\n            if (counts[key] == max)\
    \ {\n                result[key] = max;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        long max = 0;\n        foreach (string letter in test.Split(' ')) {\n\
    \            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \          if (result[letter] > max) {\n                max = result[letter];\n\
    \            }\n        }\n        Dictionary<string,long> final = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> kvp in result) {\n            if (kvp.Value\
    \ == max) {\n                final[kvp.Key] = kvp.Value;\n            }\n    \
    \    }\n        return final;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] words = test.Split(' ');\n    \
    \    foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word] += 1;\n            } else {\n              \
    \  result[word] = 1;\n            }\n        }\n        return result;", "   \
    \     Dictionary<string,long> result = new Dictionary<string,long>();\n      \
    \  string[] words = test.Split(' ');\n        foreach (string word in words) {\n\
    \            if (result.ContainsKey(word)) {\n                result[word] +=\
    \ 1;\n            } else {\n                result[word] = 1;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        Dictionary<string,long> letterCount = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (letterCount.ContainsKey(letter))\
    \ {\n                letterCount[letter]++;\n            } else {\n          \
    \      letterCount[letter] = 1;\n            }\n        }\n        long max =\
    \ letterCount.Values.Max();\n        foreach (KeyValuePair<string,long> pair in\
    \ letterCount) {\n            if (pair.Value == max) {\n                result[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ hist = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (hist.ContainsKey(s)) {\n                hist[s]++;\n\
    \            } else {\n                hist[s] = 1;\n            }\n        }\n\
    \        return hist;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ count = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (count.ContainsKey(letter)) {\n                count[letter]++;\n\
    \            } else {\n                count[letter] = 1;\n            }\n   \
    \     }\n        long max = count.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ pair in count) {\n            if (pair.Value == max) {\n                result[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        long max = 0;\n        foreach (string word in words) {\n     \
    \       if (result.ContainsKey(word)) {\n                result[word]++;\n   \
    \         } else {\n                result[word] = 1;\n            }\n       \
    \     if (result[word] > max) {\n                max = result[word];\n       \
    \     }\n        }\n        Dictionary<string,long> result2 = new Dictionary<string,long>();\n\
    \        foreach (string word in result.Keys) {\n            if (result[word]\
    \ == max) {\n                result2[word] = max;\n            }\n        }\n\
    \        return result2;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (histogram.ContainsKey(word)) {\n                histogram[word]++;\n\
    \            } else {\n                histogram[word] = 1;\n            }\n \
    \       }\n        return histogram;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> dict\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        foreach (string letter in letters) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter]++;\n            } else {\n                dict.Add(letter,\
    \ 1);\n            }\n        }\n        return dict;", "        var dict = new\
    \ Dictionary<string,long>();\n        var max = 0;\n        foreach (var c in\
    \ test.Split(' ')) {\n            if (dict.ContainsKey(c)) {\n               \
    \ dict[c]++;\n            } else {\n                dict[c] = 1;\n           \
    \ }\n            if (dict[c] > max) {\n                max = (int)dict[c];\n \
    \           }\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var k in dict.Keys) {\n            if (dict[k] == max) {\n \
    \               result[k] = max;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (result.ContainsKey(letter)) {\n\
    \                result[letter]++;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ kvp in result) {\n            if (kvp.Value == max) {\n                final[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n     \
    \           histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> d = new Dictionary<string,long>();\n        string[]\
    \ s = test.Split(' ');\n        foreach (string str in s) {\n            if (d.ContainsKey(str))\
    \ {\n                d[str]++;\n            } else {\n                d.Add(str,\
    \ 1);\n            }\n        }\n        return d;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> count\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        long max = 0;\n        foreach (string letter in letters) {\n       \
    \     if (count.ContainsKey(letter)) {\n                count[letter]++;\n   \
    \         } else {\n                count[letter] = 1;\n            }\n      \
    \      if (count[letter] > max) {\n                max = count[letter];\n    \
    \        }\n        }\n        foreach (string letter in count.Keys) {\n     \
    \       if (count[letter] == max) {\n                result[letter] = max;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter]++;\n            } else {\n                dict.Add(letter,\
    \ 1);\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n     \
    \           histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        string[] arr = test.Split(' ');\n\
    \        foreach (string s in arr) {\n            if (dict.ContainsKey(s)) {\n\
    \                dict[s]++;\n            } else {\n                dict.Add(s,\
    \ 1);\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n     \
    \           histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   Dictionary<string,long> temp = new Dictionary<string,long>();\n        string[]\
    \ words = test.Split(' ');\n        foreach (string word in words) {\n       \
    \     if (temp.ContainsKey(word)) {\n                temp[word]++;\n         \
    \   } else {\n                temp.Add(word, 1);\n            }\n        }\n \
    \       long max = temp.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ item in temp) {\n            if (item.Value == max) {\n                result.Add(item.Key,\
    \ item.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ hist = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (hist.ContainsKey(s)) {\n                hist[s]++;\n\
    \            } else {\n                hist[s] = 1;\n            }\n        }\n\
    \        return hist;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> dict = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (dict.ContainsKey(word)) {\n                dict[word]++;\n\
    \            } else {\n                dict[word] = 1;\n            }\n      \
    \  }\n        return dict;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ result;\n        }\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> letterCount = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (letterCount.ContainsKey(letter))\
    \ {\n                letterCount[letter]++;\n            } else {\n          \
    \      letterCount[letter] = 1;\n            }\n        }\n        long max =\
    \ letterCount.Values.Max();\n        foreach (KeyValuePair<string,long> entry\
    \ in letterCount) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
