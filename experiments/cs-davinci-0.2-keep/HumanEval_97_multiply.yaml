name: HumanEval_97_multiply
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Complete the function that takes two integers and returns \n\
  \    // the product of their unit digits.\n    // Assume the input is always valid.\n\
  \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
  \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    // multiply(14,-15)\
  \ should return 20.\n    public static long Multiply(long a, long b) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
  \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L),\
  \ (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L),\
  \ (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
  \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n}\n"
completions: ["        long result = 1;\n        while (a > 0) {\n            result\
    \ *= a % 10;\n            a /= 10;\n        }\n        while (b > 0) {\n     \
    \       result *= b % 10;\n            b /= 10;\n        }\n        return result;",
  '        return (a % 10) * (b % 10);', '        return (a % 10) * (b % 10);', '        return
    (a % 10) * (b % 10);', '        return (a % 10) * (b % 10);', '        return
    (a % 10) * (b % 10);', '        return (a % 10) * (b % 10);', '        return
    (a%10)*(b%10);', '        return Math.Abs(a % 10) * Math.Abs(b % 10);', '        return
    (a % 10) * (b % 10);', '        return (a % 10) * (b % 10);', '        return
    Math.Abs(a % 10) * Math.Abs(b % 10);', '        return (a % 10) * (b % 10);',
  '        return Math.Abs(a % 10) * Math.Abs(b % 10);', '        return (a % 10)
    * (b % 10);', '        return (a % 10) * (b % 10);', '        return (a % 10)
    * (b % 10);', '        return (a % 10) * (b % 10);', '        return (a % 10)
    * (b % 10);', '        return (a % 10) * (b % 10);']
stop_tokens:
- "\n    }\n"
