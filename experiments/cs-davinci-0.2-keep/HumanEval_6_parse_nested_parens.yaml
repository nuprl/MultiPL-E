name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
  \ paren_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (paren_string[i] == ')') {\n                current_depth--;\n   \
    \         } else if (paren_string[i] == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level += 1;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level -= 1;\n            } else if (c == ' ') {\n   \
    \             result.Add(max_level);\n                max_level = 0;\n       \
    \         current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_stack = new Stack<char>();\n \
    \       var max_depth = 0;\n        foreach (var c in paren_string) {\n      \
    \      if (c == '(') {\n                paren_stack.Push(c);\n               \
    \ max_depth = Math.Max(max_depth, paren_stack.Count);\n            } else if (c\
    \ == ')') {\n                paren_stack.Pop();\n            } else if (c == '\
    \ ') {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \            }\n        }\n        result.Add(max_depth);\n        return result;",
  "        var result = new List<long>();\n        var paren_stack = new Stack<long>();\n\
    \        var max_depth = 0;\n        foreach (var c in paren_string) {\n     \
    \       if (c == '(') {\n                paren_stack.Push(1);\n              \
    \  max_depth = Math.Max(max_depth, paren_stack.Count);\n            } else if\
    \ (c == ')') {\n                paren_stack.Pop();\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        // TODO: Implement this function.\n        List<long> result\
    \ = new List<long>();\n        int max = 0;\n        int count = 0;\n        foreach\
    \ (char c in paren_string)\n        {\n            if (c == '(')\n           \
    \ {\n                count++;\n                if (count > max)\n            \
    \    {\n                    max = count;\n                }\n            }\n \
    \           else if (c == ')')\n            {\n                count--;\n    \
    \        }\n            else if (c == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int depth = 0;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // Write your code here\n        List<long>\
    \ result = new List<long>();\n        long count = 0;\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        int max = 0;\n        int count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        var result =\
    \ new List<long>();\n        var current_level = 0;\n        var max_level = 0;\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            current_level += 1;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level\
    \ -= 1;\n            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long depth = 0;\n        foreach (char c in paren_string) {\n        \
    \    if (c == '(') {\n                depth += 1;\n                max_depth =\
    \ Math.Max(max_depth, depth);\n            } else if (c == ')') {\n          \
    \      depth -= 1;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int cur_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                cur_depth += 1;\n                max_depth = Math.Max(max_depth,\
    \ cur_depth);\n            } else if (c == ')') {\n                cur_depth -=\
    \ 1;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                cur_depth = 0;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max_depth = 0;\n       \
    \ long depth = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long depth = 0;\n        long max_depth\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (paren_string[i] == ')')\
    \ {\n                depth--;\n            } else if (paren_string[i] == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_level = 0;\n        int current_level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = Math.Max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     // TODO: Implement this function.\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int depth =\
    \ 0;\n        foreach (char c in paren_string) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // Fill in your code here\n        List<long>\
    \ result = new List<long>();\n        long count = 0;\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        // Write your code here\n        List<long>\
    \ result = new List<long>();\n        int max = 0;\n        int count = 0;\n \
    \       for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level += 1;\n      \
    \          max_level = Math.Max(max_level, current_level);\n            } else\
    \ if (c == ')') {\n                current_level -= 1;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        // Fill in your code\
    \ here\n        List<long> result = new List<long>();\n        int count = 0;\n\
    \        int max = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n\
    \        {\n            if (paren_string[i] == '(')\n            {\n         \
    \       count++;\n                if (count > max)\n                {\n      \
    \              max = count;\n                }\n            }\n            else\
    \ if (paren_string[i] == ')')\n            {\n                count--;\n     \
    \       }\n            else if (paren_string[i] == ' ')\n            {\n     \
    \           result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        // TODO: Implement this function.\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        var result = new List<long>();\n        var current_level = 0;\n      \
    \  var max_level = 0;\n        foreach (var c in paren_string) {\n           \
    \ if (c == '(') {\n                current_level += 1;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level -= 1;\n            } else if (c == ' ') {\n   \
    \             result.Add(max_level);\n                max_level = 0;\n       \
    \         current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        var max_depth = 0;\n        var depth =\
    \ 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                stack.Push(c);\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        if (stack.Count == 0) {\n                    throw new Exception(\"Unmatched\
    \ right paren\");\n                }\n                stack.Pop();\n         \
    \       depth--;\n            } else if (c == ' ') {\n                if (stack.Count\
    \ != 0) {\n                    throw new Exception(\"Unmatched left paren\");\n\
    \                }\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            } else {\n                throw\
    \ new Exception(\"Invalid character\");\n            }\n        }\n        if\
    \ (stack.Count != 0) {\n            throw new Exception(\"Unmatched left paren\"\
    );\n        }\n        result.Add(max_depth);\n        return result;", "    \
    \    // TODO: Implement this function.\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        int max_depth = 0;\n   \
    \     int depth = 0;\n        foreach (char c in paren_string) {\n           \
    \ if (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long level = 0;\n        long max_level\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                level++;\n                max_level\
    \ = Math.Max(max_level, level);\n            } else if (paren_string[i] == ')')\
    \ {\n                level--;\n            } else if (paren_string[i] == ' ')\
    \ {\n                result.Add(max_level);\n                max_level = 0;\n\
    \                level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long count = 0;\n        long max = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                count++;\n                if\
    \ (count > max) {\n                    max = count;\n                }\n     \
    \       } else if (c == ')') {\n                count--;\n            } else if\
    \ (c == ' ') {\n                result.Add(max);\n                max = 0;\n \
    \               count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth\
    \ += 1;\n                max_depth = Math.Max(max_depth, current_depth);\n   \
    \         } else if (c == ')') {\n                current_depth -= 1;\n      \
    \      } else if (c == ' ') {\n                result.Add(max_depth);\n      \
    \          max_depth = 0;\n                current_depth = 0;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        int max_depth = 0;\n        int\
    \ depth = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        // Fill\
    \ in your code here\n        List<long> result = new List<long>();\n        long\
    \ count = 0;\n        long max = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                count++;\n                if\
    \ (count > max) {\n                    max = count;\n                }\n     \
    \       } else if (c == ')') {\n                count--;\n            } else if\
    \ (c == ' ') {\n                result.Add(max);\n                max = 0;\n \
    \               count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        // Fill in your code here\n        List<long>\
    \ result = new List<long>();\n        //string[] groups = paren_string.Split('\
    \ ');\n        //foreach (string group in groups) {\n        //    int max = 0;\n\
    \        //    int count = 0;\n        //    foreach (char c in group) {\n   \
    \     //        if (c == '(') {\n        //            count++;\n        //  \
    \          if (count > max) {\n        //                max = count;\n      \
    \  //            }\n        //        } else if (c == ')') {\n        //     \
    \       count--;\n        //        }\n        //    }\n        //    result.Add(max);\n\
    \        //}\n        //return result;\n        int max = 0;\n        int count\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                count++;\n                if (count > max) {\n          \
    \          max = count;\n                }\n            } else if (c == ')') {\n\
    \                count--;\n            } else if (c == ' ') {\n              \
    \  result.Add(max);\n                max = 0;\n                count = 0;\n  \
    \          }\n        }\n        result.Add(max);\n        return result;", " \
    \       List<long> result = new List<long>();\n        int max = 0;\n        int\
    \ count = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                count++;\n                if (count > max) {\n     \
    \               max = count;\n                }\n            } else if (c == ')')\
    \ {\n                count--;\n            } else if (c == ' ') {\n          \
    \      result.Add(max);\n                max = 0;\n                count = 0;\n\
    \            }\n        }\n        result.Add(max);\n        return result;",
  "        // Fill in your code here.\n        List<long> result = new List<long>();\n\
    \        string[] groups = paren_string.Split(' ');\n        foreach (string group\
    \ in groups) {\n            long max = 0;\n            long count = 0;\n     \
    \       foreach (char c in group) {\n                if (c == '(') {\n       \
    \             count++;\n                    if (count > max) {\n             \
    \           max = count;\n                    }\n                } else if (c\
    \ == ')') {\n                    count--;\n                }\n            }\n\
    \            result.Add(max);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        // Fill\
    \ in your code here.\n        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long count = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                count++;\n                if\
    \ (count > max) {\n                    max = count;\n                }\n     \
    \       } else if (c == ')') {\n                count--;\n            } else if\
    \ (c == ' ') {\n                result.Add(max);\n                max = 0;\n \
    \               count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<long>();\n        long current_max = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Push(0);\n\
    \            } else if (c == ')') {\n                if (stack.Count == 0) {\n\
    \                    result.Add(current_max);\n                    current_max\
    \ = 0;\n                } else {\n                    var depth = stack.Pop();\n\
    \                    if (stack.Count == 0) {\n                        result.Add(depth);\n\
    \                        current_max = 0;\n                    } else {\n    \
    \                    stack.Push(stack.Pop() + depth + 1);\n                  \
    \      current_max = Math.Max(current_max, stack.Peek());\n                  \
    \  }\n                }\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_nesting = 0;\n\
    \        long current_nesting = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_nesting += 1;\n        \
    \        max_nesting = Math.Max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting -= 1;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_nesting);\n                max_nesting\
    \ = 0;\n                current_nesting = 0;\n            }\n        }\n     \
    \   result.Add(max_nesting);\n        return result;", "        var result = new\
    \ List<long>();\n        var current_level = 0;\n        var max_level = 0;\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            current_level += 1;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level\
    \ -= 1;\n            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        // TODO: Implement this\
    \ function.\n        return result;", "        List<long> result = new List<long>();\n\
    \        // TODO: Implement this function.\n        return result;", "       \
    \ var result = new List<long>();\n        var current_level = 0;\n        var\
    \ max_level = 0;\n        foreach (var c in paren_string) {\n            if (c\
    \ == '(') {\n                current_level += 1;\n                max_level =\
    \ Math.Max(max_level, current_level);\n            } else if (c == ')') {\n  \
    \              current_level -= 1;\n            } else if (c == ' ') {\n     \
    \           result.Add(max_level);\n                max_level = 0;\n         \
    \       current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level += 1;\n      \
    \          max_level = Math.Max(max_level, current_level);\n            } else\
    \ if (c == ')') {\n                current_level -= 1;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        var result = new List<long>();\n\
    \        var current = 0;\n        var max = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current++;\n               \
    \ max = Math.Max(max, current);\n            } else if (c == ')') {\n        \
    \        current--;\n            } else if (c == ' ') {\n                result.Add(max);\n\
    \                max = 0;\n                current = 0;\n            }\n     \
    \   }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_nest = 0;\n        long cur_nest\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                cur_nest++;\n                max_nest = Math.Max(max_nest,\
    \ cur_nest);\n            } else if (c == ')') {\n                cur_nest--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_nest);\n \
    \               max_nest = 0;\n                cur_nest = 0;\n            }\n\
    \        }\n        result.Add(max_nest);\n        return result;", "        //\
    \ TODO: Implement this function.\n        List<long> result = new List<long>();\n\
    \        long count = 0;\n        long max = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long current_depth = 0;\n        foreach (char c in paren_string) {\n \
    \           if (c == '(') {\n                current_depth += 1;\n           \
    \     max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth -= 1;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        int max = 0;\n        int count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth += 1;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth -= 1;\n           \
    \ } else if (c == ' ') {\n                result.Add(max_depth);\n           \
    \     max_depth = 0;\n                depth = 0;\n            }\n        }\n \
    \       result.Add(max_depth);\n        return result;", "        var result =\
    \ new List<long>();\n        var current_level = 0;\n        var max_level = 0;\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            current_level += 1;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level\
    \ -= 1;\n            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (paren_string[i] == ')') {\n                current_depth--;\n   \
    \         } else if (paren_string[i] == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0;\n            var depth = 0;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth += 1;\n      \
    \              max_depth = Math.Max(max_depth, depth);\n                } else\
    \ if (c == ')') {\n                    depth -= 1;\n                }\n      \
    \      }\n            result.Add(max_depth);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long depth = 0;\n        foreach (char c in paren_string) {\n         \
    \   if (c == '(') {\n                depth += 1;\n                max_depth =\
    \ Math.Max(max_depth, depth);\n            } else if (c == ')') {\n          \
    \      depth -= 1;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int depth =\
    \ 0;\n        foreach (char c in paren_string) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth\
    \ += 1;\n                max_depth = Math.Max(max_depth, current_depth);\n   \
    \         } else if (c == ')') {\n                current_depth -= 1;\n      \
    \      } else if (c == ' ') {\n                result.Add(max_depth);\n      \
    \          max_depth = 0;\n                current_depth = 0;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        // TODO: Implement this function.\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long current_level = 0;\n        long max_level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level\
    \ += 1;\n                max_level = Math.Max(max_level, current_level);\n   \
    \         } else if (c == ')') {\n                current_level -= 1;\n      \
    \      } else if (c == ' ') {\n                result.Add(max_level);\n      \
    \          max_level = 0;\n                current_level = 0;\n            }\n\
    \        }\n        result.Add(max_level);\n        return result;", "       \
    \ // Fill in your code here\n        List<long> result = new List<long>();\n \
    \       string[] groups = paren_string.Split(' ');\n        foreach (string group\
    \ in groups) {\n            long max_level = 0;\n            long level = 0;\n\
    \            foreach (char c in group) {\n                if (c == '(') {\n  \
    \                  level++;\n                    max_level = Math.Max(max_level,\
    \ level);\n                } else if (c == ')') {\n                    level--;\n\
    \                }\n            }\n            result.Add(max_level);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth\
    \ += 1;\n                max_depth = Math.Max(max_depth, current_depth);\n   \
    \         } else if (c == ')') {\n                current_depth -= 1;\n      \
    \      } else if (c == ' ') {\n                result.Add(max_depth);\n      \
    \          max_depth = 0;\n                current_depth = 0;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        int max_depth = 0;\n        int\
    \ depth = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        var result\
    \ = new List<long>();\n        var paren_groups = paren_string.Split(' ');\n \
    \       foreach (var group in paren_groups) {\n            var max_depth = 0;\n\
    \            var depth = 0;\n            foreach (var c in group) {\n        \
    \        if (c == '(') {\n                    depth++;\n                    max_depth\
    \ = Math.Max(max_depth, depth);\n                } else if (c == ')') {\n    \
    \                depth--;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_nesting = 0;\n        long current_nesting = 0;\n        for\
    \ (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                current_nesting++;\n                max_nesting =\
    \ Math.Max(max_nesting, current_nesting);\n            } else if (paren_string[i]\
    \ == ')') {\n                current_nesting--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max_nesting);\n                max_nesting\
    \ = 0;\n                current_nesting = 0;\n            }\n        }\n     \
    \   result.Add(max_nesting);\n        return result;", "        var result = new\
    \ List<long>();\n        var paren_groups = paren_string.Split(' ');\n       \
    \ foreach (var paren_group in paren_groups) {\n            var max_depth = 0;\n\
    \            var current_depth = 0;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    current_depth += 1;\n\
    \                    max_depth = Math.Max(max_depth, current_depth);\n       \
    \         } else if (c == ')') {\n                    current_depth -= 1;\n  \
    \              }\n            }\n            result.Add(max_depth);\n        }\n\
    \        return result;", "        List<long> ret = new List<long>();\n      \
    \  int depth = 0;\n        int max_depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                ret.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        ret.Add(max_depth);\n        return ret;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int depth =\
    \ 0;\n        foreach (char c in paren_string) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ parens = paren_string.Split(' ');\n        foreach (var paren in parens) {\n\
    \            var count = 0;\n            var max = 0;\n            foreach (var\
    \ c in paren) {\n                if (c == '(') {\n                    count++;\n\
    \                    if (count > max) {\n                        max = count;\n\
    \                    }\n                } else if (c == ')') {\n             \
    \       count--;\n                }\n            }\n            result.Add(max);\n\
    \        }\n        return result;", "        // TODO: Implement this function\n\
    \        List<long> result = new List<long>();\n        int max = 0;\n       \
    \ int count = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n  \
    \          if (paren_string[i] == '(') {\n                count++;\n         \
    \       if (count > max) {\n                    max = count;\n               \
    \ }\n            }\n            if (paren_string[i] == ')') {\n              \
    \  count--;\n            }\n            if (paren_string[i] == ' ') {\n      \
    \          result.Add(max);\n                max = 0;\n                count =\
    \ 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        int max = 0;\n        int\
    \ current = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n    \
    \        if (paren_string[i] == '(') {\n                current++;\n         \
    \       if (current > max) {\n                    max = current;\n           \
    \     }\n            } else if (paren_string[i] == ')') {\n                current--;\n\
    \            } else if (paren_string[i] == ' ') {\n                result.Add(max);\n\
    \                max = 0;\n                current = 0;\n            }\n     \
    \   }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        // Write your code here.\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                depth += 1;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth -= 1;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        var\
    \ result = new List<long>();\n        var stack = new Stack<long>();\n       \
    \ var max = 0L;\n        foreach (var c in paren_string) {\n            if (c\
    \ == '(') {\n                stack.Push(max);\n                max = 0;\n    \
    \        } else if (c == ')') {\n                result.Add(max);\n          \
    \      max = stack.Pop();\n            } else if (c == ' ') {\n              \
    \  max = Math.Max(max, 0);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long depth = 0;\n        foreach (char c in paren_string) {\n         \
    \   if (c == '(') {\n                depth += 1;\n                max_depth =\
    \ Math.Max(max_depth, depth);\n            } else if (c == ')') {\n          \
    \      depth -= 1;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long depth = 0;\n        long max_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        // TODO:\
    \ Implement this function.\n        List<long> result = new List<long>();\n  \
    \      long max = 0;\n        long count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        var result = new List<long>();\n        var current_level = 0;\n      \
    \  var max_level = 0;\n        foreach (var c in paren_string) {\n           \
    \ if (c == '(') {\n                current_level += 1;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level -= 1;\n            } else if (c == ' ') {\n   \
    \             result.Add(max_level);\n                max_level = 0;\n       \
    \         current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        string[] groups = paren_string.Split('\
    \ ');\n        foreach (string group in groups) {\n            long max_depth\
    \ = 0;\n            long current_depth = 0;\n            foreach (char c in group)\
    \ {\n                if (c == '(') {\n                    current_depth++;\n \
    \                   if (current_depth > max_depth) {\n                       \
    \ max_depth = current_depth;\n                    }\n                } else if\
    \ (c == ')') {\n                    current_depth--;\n                }\n    \
    \        }\n            result.Add(max_depth);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long current_depth = 0;\n        foreach (char c in paren_string) {\n \
    \           if (c == '(') {\n                current_depth += 1;\n           \
    \     max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth -= 1;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string[i] == ')') {\n             \
    \   count--;\n            } else if (paren_string[i] == ' ') {\n             \
    \   result.Add(max);\n                max = 0;\n                count = 0;\n \
    \           }\n        }\n        result.Add(max);\n        return result;", " \
    \       // Write your code here\n        List<long> result = new List<long>();\n\
    \        int max = 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string[i] == ')') {\n             \
    \   count--;\n            } else if (paren_string[i] == ' ') {\n             \
    \   result.Add(max);\n                max = 0;\n                count = 0;\n \
    \           }\n        }\n        result.Add(max);\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level += 1;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level -= 1;\n            } else if (c == ' ') {\n   \
    \             result.Add(max_level);\n                max_level = 0;\n       \
    \         current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level += 1;\n      \
    \          max_level = Math.Max(max_level, current_level);\n            } else\
    \ if (c == ')') {\n                current_level -= 1;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        // Write your code\
    \ here\n        List<long> result = new List<long>();\n        int count = 0;\n\
    \        int max = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n\
    \            if (paren_string[i] == '(') {\n                count++;\n       \
    \         if (count > max) {\n                    max = count;\n             \
    \   }\n            } else if (paren_string[i] == ')') {\n                count--;\n\
    \            } else if (paren_string[i] == ' ') {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_nesting = 0;\n        int current_nesting\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_nesting += 1;\n                max_nesting = Math.Max(max_nesting,\
    \ current_nesting);\n            } else if (c == ')') {\n                current_nesting\
    \ -= 1;\n            } else if (c == ' ') {\n                result.Add(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n        }\n        result.Add(max_nesting);\n        return result;",
  "        // TODO: implement this function\n        return new List<long>();", " \
    \       List<long> result = new List<long>();\n        int pos = 0;\n        while\
    \ (pos < paren_string.Length) {\n            int start = paren_string.IndexOf('(',\
    \ pos);\n            int end = paren_string.IndexOf(')', pos);\n            if\
    \ (start == -1 || end == -1) {\n                break;\n            }\n      \
    \      pos = end + 1;\n            int level = 0;\n            for (int i = start;\
    \ i < end; i++) {\n                if (paren_string[i] == '(') {\n           \
    \         level++;\n                }\n            }\n            result.Add(level);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int count = 0;\n        int max = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string[i] == ')') {\n             \
    \   count--;\n            } else if (paren_string[i] == ' ') {\n             \
    \   result.Add(max);\n                max = 0;\n                count = 0;\n \
    \           }\n        }\n        result.Add(max);\n        return result;", " \
    \       // Fill in your code here.\n        List<long> result = new List<long>();\n\
    \        string[] parens = paren_string.Split(' ');\n        foreach (string paren\
    \ in parens) {\n            long max = 0;\n            long current = 0;\n   \
    \         foreach (char c in paren) {\n                if (c == '(') {\n     \
    \               current++;\n                    if (current > max) {\n       \
    \                 max = current;\n                    }\n                } else\
    \ {\n                    current--;\n                }\n            }\n      \
    \      result.Add(max);\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        var current_level = 0;\n        var max_level =\
    \ 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                current_level += 1;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level\
    \ -= 1;\n            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        int depth = 0;\n      \
    \  int max_depth = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n\
    \            if (paren_string[i] == '(') {\n                depth++;\n       \
    \         max_depth = Math.Max(max_depth, depth);\n            } else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level += 1;\n      \
    \          max_level = Math.Max(max_level, current_level);\n            } else\
    \ if (c == ')') {\n                current_level -= 1;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        var result = new List<long>();\n\
    \        var current_level = 0;\n        var max_level = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level\
    \ += 1;\n                max_level = Math.Max(max_level, current_level);\n   \
    \         } else if (c == ')') {\n                current_level -= 1;\n      \
    \      } else if (c == ' ') {\n                result.Add(max_level);\n      \
    \          max_level = 0;\n                current_level = 0;\n            }\n\
    \        }\n        result.Add(max_level);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        int max = 0;\n        int count\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                count++;\n                if (count > max) {\n          \
    \          max = count;\n                }\n            } else if (c == ')') {\n\
    \                count--;\n            } else if (c == ' ') {\n              \
    \  result.Add(max);\n                max = 0;\n                count = 0;\n  \
    \          }\n        }\n        result.Add(max);\n        return result;", " \
    \       // TODO: Implement this function.\n        List<long> result = new List<long>();\n\
    \        long count = 0;\n        long max = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long current_depth = 0;\n        foreach (char c in paren_string) {\n \
    \           if (c == '(') {\n                current_depth++;\n              \
    \  max_depth = Math.Max(max_depth, current_depth);\n            } else if (c ==\
    \ ')') {\n                current_depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string[i] == ')') {\n             \
    \   count--;\n            } else if (paren_string[i] == ' ') {\n             \
    \   result.Add(max);\n                max = 0;\n                count = 0;\n \
    \           }\n        }\n        result.Add(max);\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level += 1;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level -= 1;\n            } else if (c == ' ') {\n   \
    \             result.Add(max_level);\n                max_level = 0;\n       \
    \         current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        long count = 0;\n        long\
    \ max = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n\
    \            if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long count = 0;\n      \
    \  for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        // Fill in your code here\n        List<long>\
    \ result = new List<long>();\n        string[] parens = paren_string.Split(' ');\n\
    \        foreach (string paren in parens) {\n            int count = 0;\n    \
    \        int max = 0;\n            foreach (char c in paren) {\n             \
    \   if (c == '(') {\n                    count++;\n                    if (count\
    \ > max) {\n                        max = count;\n                    }\n    \
    \            } else if (c == ')') {\n                    count--;\n          \
    \      }\n            }\n            result.Add(max);\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var current_level\
    \ = 0;\n        var max_level = 0;\n        foreach (var c in paren_string) {\n\
    \            if (c == '(') {\n                current_level += 1;\n          \
    \      max_level = Math.Max(max_level, current_level);\n            } else if\
    \ (c == ')') {\n                current_level -= 1;\n            } else if (c\
    \ == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int depth = 0;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
