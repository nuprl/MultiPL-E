name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
  \ paren_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (paren_string[i] == ')') {\n                current_depth--;\n   \
    \         } else if (paren_string[i] == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level += 1;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level -= 1;\n            } else if (c == ' ') {\n   \
    \             result.Add(max_level);\n                max_level = 0;\n       \
    \         current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_stack = new Stack<char>();\n \
    \       var max_depth = 0;\n        foreach (var c in paren_string) {\n      \
    \      if (c == '(') {\n                paren_stack.Push(c);\n               \
    \ max_depth = Math.Max(max_depth, paren_stack.Count);\n            } else if (c\
    \ == ')') {\n                paren_stack.Pop();\n            } else if (c == '\
    \ ') {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \            }\n        }\n        result.Add(max_depth);\n        return result;",
  "        var result = new List<long>();\n        var paren_stack = new Stack<long>();\n\
    \        var max_depth = 0;\n        foreach (var c in paren_string) {\n     \
    \       if (c == '(') {\n                paren_stack.Push(1);\n              \
    \  max_depth = Math.Max(max_depth, paren_stack.Count);\n            } else if\
    \ (c == ')') {\n                paren_stack.Pop();\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        // TODO: Implement this function.\n        List<long> result\
    \ = new List<long>();\n        int max = 0;\n        int count = 0;\n        foreach\
    \ (char c in paren_string)\n        {\n            if (c == '(')\n           \
    \ {\n                count++;\n                if (count > max)\n            \
    \    {\n                    max = count;\n                }\n            }\n \
    \           else if (c == ')')\n            {\n                count--;\n    \
    \        }\n            else if (c == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int depth = 0;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // Write your code here\n        List<long>\
    \ result = new List<long>();\n        long count = 0;\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        int max = 0;\n        int count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        var result =\
    \ new List<long>();\n        var current_level = 0;\n        var max_level = 0;\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            current_level += 1;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level\
    \ -= 1;\n            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long depth = 0;\n        foreach (char c in paren_string) {\n        \
    \    if (c == '(') {\n                depth += 1;\n                max_depth =\
    \ Math.Max(max_depth, depth);\n            } else if (c == ')') {\n          \
    \      depth -= 1;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int cur_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                cur_depth += 1;\n                max_depth = Math.Max(max_depth,\
    \ cur_depth);\n            } else if (c == ')') {\n                cur_depth -=\
    \ 1;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                cur_depth = 0;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max_depth = 0;\n       \
    \ long depth = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long depth = 0;\n        long max_depth\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (paren_string[i] == ')')\
    \ {\n                depth--;\n            } else if (paren_string[i] == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_level = 0;\n        int current_level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = Math.Max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     // TODO: Implement this function.\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int depth =\
    \ 0;\n        foreach (char c in paren_string) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // Fill in your code here\n        List<long>\
    \ result = new List<long>();\n        long count = 0;\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
