language: cs
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  long min = long.MaxValue;\n        int minIndex = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        List<long> result = new List<long>();\n   \
    \     long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index != -1) {\n            result.Add(min);\n       \
    \     result.Add(index);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a4da2481824d3fb525011adf860dcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a4da2481824d3fb525011adf860dcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  long min = long.MaxValue;\n        int minIndex = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  if (arr.Count == 0) return new List<long>();\n        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) return new List<long>();\n        return new List<long> { min, minIndex\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c282d691c98245d7bc0247099896624d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c282d691c98245d7bc0247099896624d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <a36b923150234459819c10466023252c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <a36b923150234459819c10466023252c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  long min = long.MaxValue;\n        long minIndex = -1;\n        for (long i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i]\
    \ < min) {\n                min = arr[(int)i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long> { min, minIndex };\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2989e6d6697a4c41a6580018b12948c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2989e6d6697a4c41a6580018b12948c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <a36b923150234459819c10466023252c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <a36b923150234459819c10466023252c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  long minEven = long.MaxValue;\n        long minEvenIndex = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < minEven) {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return new List<long>();\n        }\n        return new List<long>() { minEven,\
    \ minEvenIndex };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61dd4bd5efdd42b894d67e656a700bd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61dd4bd5efdd42b894d67e656a700bd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  var min = arr.Where(x => x % 2 == 0).Min();\n        var minIndex = arr.IndexOf(min);\n\
    \        return new List<long> { min, minIndex };\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3738c2b12940415e9c47b2fe0efeccff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3738c2b12940415e9c47b2fe0efeccff>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00026] in\
    \ <3738c2b12940415e9c47b2fe0efeccff>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  long min = long.MaxValue;\n        int minIndex = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  if (arr.Count == 0) {\n            return new List<long>();\n        }\n  \
    \      var minEven = arr.Where(x => x % 2 == 0).Min();\n        var minEvenIndex\
    \ = arr.IndexOf(minEven);\n        return new List<long> { minEven, minEvenIndex\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29bc23f84f0149138343a6df7e5af954>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29bc23f84f0149138343a6df7e5af954>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Write your code here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <eb6ba18afb2048ab80788fded5acec87>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <eb6ba18afb2048ab80788fded5acec87>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  var result = new List<long>();\n        var min = long.MaxValue;\n        var\
    \ minIndex = -1;\n        for (var i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n        if (minIndex == -1)\
    \ {\n            return result;\n        }\n        result.Add(min);\n       \
    \ result.Add(minIndex);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <075d95c2932f4e528c34b5530bba0f75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <075d95c2932f4e528c34b5530bba0f75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  if (arr.Count == 0) {\n            return new List<long>();\n        }\n  \
    \      long minEven = long.MaxValue;\n        long minEvenIndex = -1;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < minEven) {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n        \
    \    return new List<long>();\n        }\n        return new List<long> { minEven,\
    \ minEvenIndex };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6e723002a734a35b0e534d08790e28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6e723002a734a35b0e534d08790e28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  List<long> result = new List<long>();\n        if (arr.Count == 0) {\n    \
    \        return result;\n        }\n        long min = arr[0];\n        int minIndex\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (!found) {\n     \
    \               min = arr[i];\n                    minIndex = i;\n           \
    \         found = true;\n                } else {\n                    if (arr[i]\
    \ < min) {\n                        min = arr[i];\n                        minIndex\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       if (found) {\n            result.Add(min);\n            result.Add(minIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <729f639c717a42a5b5ae100fcf27c87e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <729f639c717a42a5b5ae100fcf27c87e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  if (arr.Count == 0) {\n            return new List<long>();\n        }\n  \
    \      long min = arr.Min();\n        if (min % 2 == 0) {\n            return\
    \ new List<long> { min, arr.IndexOf(min) };\n        }\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <349b505ac2a7484f848a2b4cc1ac91ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <349b505ac2a7484f848a2b4cc1ac91ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  var min = arr.Where(x => x % 2 == 0).Min();\n        var minIndex = arr.IndexOf(min);\n\
    \        return new List<long>() { min, minIndex };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e80f5d85104d4f1781d8dd5a4b2e3569>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e80f5d85104d4f1781d8dd5a4b2e3569>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00026] in\
    \ <e80f5d85104d4f1781d8dd5a4b2e3569>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  List<long> result = new List<long>();\n        long min = Int64.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.Add(min);\n            result.Add(index);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf2db12a33d244a5a8409af5f54dfc46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf2db12a33d244a5a8409af5f54dfc46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <8be6988fe5f341f1bf4ae52a48b02f37>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4233298de0e647adaf8455ea1c0ae7e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code here\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <95e80863fc2b4d67ba4fbae27c91a9a6>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <95e80863fc2b4d67ba4fbae27c91a9a6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798497
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <814ba697203a43948798a1ca3e62f397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  long min = long.MaxValue;\n        int minIndex = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd76f5fd72e244509b0117da9b1c38c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code here\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <a36b923150234459819c10466023252c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <a36b923150234459819c10466023252c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <d998b1943b664557a2469492bc0e7f8b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <5d84ac65e528480aaf7effd94fe5eca9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <702aa3e3dea3465c9801fa6f730a3dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4bf2163afe14b48a08bb1eee12ccc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // TODO: Implement your solution here\n        return new List<long>();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16d5c2dc0a8c43828adb2e75e38b34f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16d5c2dc0a8c43828adb2e75e38b34f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798497
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Input:\
    \ [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n\
    \    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    //\
    \ Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are\
    \ two zeros,\n    // so we will choose the first zero, which has the smallest\
    \ index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0\
    \ <= node.value\n    public static List<long> Pluck(List<long> arr) {\n      \
    \  // Your code goes here.\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db1ec1e962a349ca800a6ab9e4517da2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798496
