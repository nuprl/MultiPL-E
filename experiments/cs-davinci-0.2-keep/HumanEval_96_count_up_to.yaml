name: HumanEval_96_count_up_to
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Implement a function that takes an non-negative integer and\
  \ returns an array of the first n\n    // integers that are prime numbers and less\
  \ than n.\n    // for example:\n    // count_up_to(5) => [2,3]\n    // count_up_to(11)\
  \ => [2,3,5,7]\n    // count_up_to(0) => []\n    // count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
  \    // count_up_to(1) => []\n    // count_up_to(18) => [2,3,5,7,11,13,17]\n   \
  \ public static List<long> CountUpTo(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpTo((5L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(CountUpTo((6L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((7L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((10L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(CountUpTo((0L)).Equals((new\
  \ List<long>())));\n    Debug.Assert(CountUpTo((22L)).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L,\
  \ (long)19L}))));\n    Debug.Assert(CountUpTo((1L)).Equals((new List<long>())));\n\
  \    Debug.Assert(CountUpTo((18L)).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(CountUpTo((47L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L,\
  \ (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L}))));\n\
  \    Debug.Assert(CountUpTo((101L)).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L,\
  \ (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L, (long)53L, (long)59L,\
  \ (long)61L, (long)67L, (long)71L, (long)73L, (long)79L, (long)83L, (long)89L, (long)97L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> primes = new List<long>();\n        if (n < 2) {\n\
    \            return primes;\n        }\n        primes.Add(2);\n        for (long\
    \ i = 3; i < n; i += 2) {\n            if (IsPrime(i)) {\n                primes.Add(i);\n\
    \            }\n        }\n        return primes;", "        List<long> primes\
    \ = new List<long>();\n        if (n < 2) {\n            return primes;\n    \
    \    }\n        primes.Add(2);\n        for (long i = 3; i < n; i += 2) {\n  \
    \          bool isPrime = true;\n            foreach (long prime in primes) {\n\
    \                if (i % prime == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                primes.Add(i);\n            }\n        }\n    \
    \    return primes;", "        List<long> primes = new List<long>();\n       \
    \ if (n < 2) {\n            return primes;\n        }\n        primes.Add(2);\n\
    \        for (long i = 3; i < n; i += 2) {\n            bool isPrime = true;\n\
    \            foreach (long prime in primes) {\n                if (i % prime ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        return primes;", "        List<long> primes\
    \ = new List<long>();\n        if (n < 2) {\n            return primes;\n    \
    \    }\n        primes.Add(2);\n        for (long i = 3; i < n; i += 2) {\n  \
    \          bool isPrime = true;\n            for (int j = 0; j < primes.Count;\
    \ j++) {\n                if (i % primes[j] == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                primes.Add(i);\n            }\n    \
    \    }\n        return primes;", "        List<long> primes = new List<long>();\n\
    \        if (n < 2) {\n            return primes;\n        }\n        primes.Add(2);\n\
    \        for (long i = 3; i < n; i += 2) {\n            bool isPrime = true;\n\
    \            for (int j = 0; j < primes.Count; j++) {\n                if (i %\
    \ primes[j] == 0) {\n                    isPrime = false;\n                  \
    \  break;\n                }\n            }\n            if (isPrime) {\n    \
    \            primes.Add(i);\n            }\n        }\n        return primes;",
  "        List<long> primes = new List<long>();\n        for (long i = 2; i < n;\
    \ i++) {\n            if (IsPrime(i)) {\n                primes.Add(i);\n    \
    \        }\n        }\n        return primes;", "        List<long> primes = new\
    \ List<long>();\n        for (long i = 2; i < n; i++) {\n            bool isPrime\
    \ = true;\n            for (long j = 2; j < i; j++) {\n                if (i %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.Add(i);\n            }\n        }\n        return primes;", "      \
    \  List<long> primes = new List<long>();\n        if (n < 2) {\n            return\
    \ primes;\n        }\n        primes.Add(2);\n        for (long i = 3; i < n;\
    \ i += 2) {\n            bool isPrime = true;\n            foreach (long p in\
    \ primes) {\n                if (i % p == 0) {\n                    isPrime =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (isPrime) {\n                primes.Add(i);\n            }\n      \
    \  }\n        return primes;", "        List<long> primes = new List<long>();\n\
    \        for (long i = 2; i < n; i++) {\n            bool isPrime = true;\n  \
    \          for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        return primes;", "        List<long> primes\
    \ = new List<long>();\n        if (n <= 1) {\n            return primes;\n   \
    \     }\n        primes.Add(2);\n        for (long i = 3; i < n; i += 2) {\n \
    \           bool isPrime = true;\n            for (int j = 0; j < primes.Count;\
    \ j++) {\n                if (i % primes[j] == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                primes.Add(i);\n            }\n    \
    \    }\n        return primes;", "        List<long> primes = new List<long>();\n\
    \        for (long i = 2; i < n; i++) {\n            bool isPrime = true;\n  \
    \          for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        return primes;", "        List<long> result\
    \ = new List<long>();\n        if (n < 2) {\n            return result;\n    \
    \    }\n        result.Add(2);\n        for (long i = 3; i < n; i += 2) {\n  \
    \          bool isPrime = true;\n            foreach (long prime in result) {\n\
    \                if (i % prime == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result.Add(i);\n            }\n        }\n    \
    \    return result;", "        List<long> primes = new List<long>();\n       \
    \ if (n < 2) {\n            return primes;\n        }\n        primes.Add(2);\n\
    \        for (long i = 3; i < n; i += 2) {\n            bool isPrime = true;\n\
    \            foreach (long prime in primes) {\n                if (i % prime ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        return primes;", "        List<long> primes\
    \ = new List<long>();\n        if (n == 0) {\n            return primes;\n   \
    \     }\n        if (n == 1) {\n            return primes;\n        }\n      \
    \  if (n == 2) {\n            primes.Add(2);\n            return primes;\n   \
    \     }\n        if (n == 3) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            return primes;\n        }\n        primes.Add(2);\n        primes.Add(3);\n\
    \        for (long i = 4; i < n; i++) {\n            bool isPrime = true;\n  \
    \          foreach (long prime in primes) {\n                if (i % prime ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        return primes;", "        List<long> primes\
    \ = new List<long>();\n        if (n < 2) return primes;\n        primes.Add(2);\n\
    \        for (long i = 3; i < n; i += 2) {\n            bool isPrime = true;\n\
    \            for (int j = 0; j < primes.Count; j++) {\n                if (i %\
    \ primes[j] == 0) {\n                    isPrime = false;\n                  \
    \  break;\n                }\n            }\n            if (isPrime) primes.Add(i);\n\
    \        }\n        return primes;", "        List<long> primes = new List<long>();\n\
    \        if (n < 2) {\n            return primes;\n        }\n        primes.Add(2);\n\
    \        for (long i = 3; i < n; i += 2) {\n            bool isPrime = true;\n\
    \            for (int j = 0; j < primes.Count; j++) {\n                if (i %\
    \ primes[j] == 0) {\n                    isPrime = false;\n                  \
    \  break;\n                }\n            }\n            if (isPrime) {\n    \
    \            primes.Add(i);\n            }\n        }\n        return primes;",
  "        List<long> primes = new List<long>();\n        if (n < 2) {\n         \
    \   return primes;\n        }\n        primes.Add(2);\n        for (long i = 3;\
    \ i < n; i += 2) {\n            bool isPrime = true;\n            foreach (long\
    \ prime in primes) {\n                if (i % prime == 0) {\n                \
    \    isPrime = false;\n                    break;\n                }\n       \
    \     }\n            if (isPrime) {\n                primes.Add(i);\n        \
    \    }\n        }\n        return primes;", "        List<long> result = new List<long>();\n\
    \        if (n < 2) {\n            return result;\n        }\n        result.Add(2);\n\
    \        for (long i = 3; i < n; i += 2) {\n            if (IsPrime(i)) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n <= 1) {\n        \
    \    return result;\n        }\n        result.Add(2);\n        for (long i =\
    \ 3; i < n; i += 2) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> primes\
    \ = new List<long>();\n        if (n < 2) {\n            return primes;\n    \
    \    }\n        primes.Add(2);\n        for (long i = 3; i < n; i += 2) {\n  \
    \          bool isPrime = true;\n            foreach (long prime in primes) {\n\
    \                if (i % prime == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                primes.Add(i);\n            }\n        }\n    \
    \    return primes;"]
stop_tokens:
- "\n    }\n"
