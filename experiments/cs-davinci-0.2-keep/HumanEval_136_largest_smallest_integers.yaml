name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4, 1, 3,\
  \ 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n  \
  \  // largest_smallest_integers([0]) == (None, None)\n    public static Tuple<Nullable<long>,\
  \ Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return null;", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (var i in lst) {\n \
    \           if (i > 0) {\n                if (min == null || i < min) {\n    \
    \                min = i;\n                }\n            } else if (i < 0) {\n\
    \                if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        if (lst.Count == 0) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        long\
    \ min = long.MaxValue;\n        long max = long.MinValue;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                max = Math.Max(max, i);\n\
    \            }\n            if (i > 0) {\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        if (min == long.MaxValue) {\n       \
    \     min = null;\n        }\n        if (max == long.MinValue) {\n          \
    \  max = null;\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long? min = null;\n        long? max = null;\n        foreach\
    \ (var i in lst) {\n            if (i > 0) {\n                if (min == null\
    \ || i < min) {\n                    min = i;\n                }\n           \
    \ } else if (i < 0) {\n                if (max == null || i > max) {\n       \
    \             max = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(null, null);", "        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(\n            lst.Where(x => x < 0).DefaultIfEmpty().Max(),\n\
    \            lst.Where(x => x > 0).DefaultIfEmpty().Min()\n        );", "    \
    \    var min = lst.Where(x => x > 0).Min();\n        var max = lst.Where(x =>\
    \ x < 0).Max();\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long? maxNeg = null;\n        long? minPos = null;\n      \
    \  foreach (long x in lst) {\n            if (x < 0) {\n                if (maxNeg\
    \ == null || x > maxNeg) {\n                    maxNeg = x;\n                }\n\
    \            } else if (x > 0) {\n                if (minPos == null || x < minPos)\
    \ {\n                    minPos = x;\n                }\n            }\n     \
    \   }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        long? a = null;\n        long? b = null;\n        foreach (var i in lst)\
    \ {\n            if (i > 0) {\n                if (b == null || i < b) {\n   \
    \                 b = i;\n                }\n            } else if (i < 0) {\n\
    \                if (a == null || i > a) {\n                    a = i;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        // Write your code here\n        return null;",
  "        long? min = null;\n        long? max = null;\n        foreach (var i in\
    \ lst) {\n            if (i > 0) {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            } else if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", '        return new Tuple<Nullable<long>, Nullable<long>>(lst.Where(x
    => x < 0).DefaultIfEmpty().Max(), lst.Where(x => x > 0).DefaultIfEmpty().Min());',
  "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n\
    \        foreach (long i in lst) {\n            if (i < 0)\n                maxNeg\
    \ = Math.Max(maxNeg, i);\n            if (i > 0)\n                minPos = Math.Min(minPos,\
    \ i);\n        }\n        if (maxNeg == long.MinValue)\n            maxNeg = (long?)null;\n\
    \        if (minPos == long.MaxValue)\n            minPos = (long?)null;\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "  \
    \      // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return null;", "        // Write your code here\n        return null;", "  \
    \      // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;"]
stop_tokens:
- "\n    }\n"
