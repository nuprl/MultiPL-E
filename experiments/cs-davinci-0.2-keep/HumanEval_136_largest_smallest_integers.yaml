name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4, 1, 3,\
  \ 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n  \
  \  // largest_smallest_integers([0]) == (None, None)\n    public static Tuple<Nullable<long>,\
  \ Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return null;", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (var i in lst) {\n \
    \           if (i > 0) {\n                if (min == null || i < min) {\n    \
    \                min = i;\n                }\n            } else if (i < 0) {\n\
    \                if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        if (lst.Count == 0) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        long\
    \ min = long.MaxValue;\n        long max = long.MinValue;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                max = Math.Max(max, i);\n\
    \            }\n            if (i > 0) {\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        if (min == long.MaxValue) {\n       \
    \     min = null;\n        }\n        if (max == long.MinValue) {\n          \
    \  max = null;\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long? min = null;\n        long? max = null;\n        foreach\
    \ (var i in lst) {\n            if (i > 0) {\n                if (min == null\
    \ || i < min) {\n                    min = i;\n                }\n           \
    \ } else if (i < 0) {\n                if (max == null || i > max) {\n       \
    \             max = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(null, null);", "        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(\n            lst.Where(x => x < 0).DefaultIfEmpty().Max(),\n\
    \            lst.Where(x => x > 0).DefaultIfEmpty().Min()\n        );", "    \
    \    var min = lst.Where(x => x > 0).Min();\n        var max = lst.Where(x =>\
    \ x < 0).Max();\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long? maxNeg = null;\n        long? minPos = null;\n      \
    \  foreach (long x in lst) {\n            if (x < 0) {\n                if (maxNeg\
    \ == null || x > maxNeg) {\n                    maxNeg = x;\n                }\n\
    \            } else if (x > 0) {\n                if (minPos == null || x < minPos)\
    \ {\n                    minPos = x;\n                }\n            }\n     \
    \   }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        long? a = null;\n        long? b = null;\n        foreach (var i in lst)\
    \ {\n            if (i > 0) {\n                if (b == null || i < b) {\n   \
    \                 b = i;\n                }\n            } else if (i < 0) {\n\
    \                if (a == null || i > a) {\n                    a = i;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        // Write your code here\n        return null;",
  "        long? min = null;\n        long? max = null;\n        foreach (var i in\
    \ lst) {\n            if (i > 0) {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            } else if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", '        return new Tuple<Nullable<long>, Nullable<long>>(lst.Where(x
    => x < 0).DefaultIfEmpty().Max(), lst.Where(x => x > 0).DefaultIfEmpty().Min());',
  "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n\
    \        foreach (long i in lst) {\n            if (i < 0)\n                maxNeg\
    \ = Math.Max(maxNeg, i);\n            if (i > 0)\n                minPos = Math.Min(minPos,\
    \ i);\n        }\n        if (maxNeg == long.MinValue)\n            maxNeg = (long?)null;\n\
    \        if (minPos == long.MaxValue)\n            minPos = (long?)null;\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "  \
    \      // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return null;", "        // Write your code here\n        return null;", "  \
    \      // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Your code here\n        long?\
    \ largest = null;\n        long? smallest = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largest == null || i >\
    \ largest) {\n                    largest = i;\n                }\n          \
    \  } else if (i > 0) {\n                if (smallest == null || i < smallest)\
    \ {\n                    smallest = i;\n                }\n            }\n   \
    \     }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long maxNeg = 0;\n        long minPos = 0;\n        bool hasNeg\
    \ = false;\n        bool hasPos = false;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (!hasNeg) {\n                  \
    \  maxNeg = i;\n                    hasNeg = true;\n                }\n      \
    \          else if (i > maxNeg)\n                    maxNeg = i;\n           \
    \ }\n            else if (i > 0) {\n                if (!hasPos) {\n         \
    \           minPos = i;\n                    hasPos = true;\n                }\n\
    \                else if (i < minPos)\n                    minPos = i;\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(hasNeg\
    \ ? (Nullable<long>)maxNeg : null, hasPos ? (Nullable<long>)minPos : null);",
  "        var min = lst.Where(x => x > 0).Min();\n        var max = lst.Where(x =>\
    \ x < 0).Max();\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // Your code goes here\n        return null;", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (var i in lst) {\n \
    \           if (i > 0) {\n                if (min == null || i < min) {\n    \
    \                min = i;\n                }\n            } else if (i < 0) {\n\
    \                if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long? maxNegative = null;\n        long?\
    \ minPositive = null;\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                if (maxNegative == null || i > maxNegative) {\n      \
    \              maxNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (minPositive == null || i < minPositive) {\n      \
    \              minPositive = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);",
  "        long? min = null;\n        long? max = null;\n        foreach (var i in\
    \ lst) {\n            if (i > 0) {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            } else if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", '        return new Tuple<Nullable<long>, Nullable<long>>(null,
    null);', "        // Write your code here\n        return null;", "        long?\
    \ largestNegative = null;\n        long? smallestPositive = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (largestNegative\
    \ == null || i > largestNegative) {\n                    largestNegative = i;\n\
    \                }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        long? maxNeg\
    \ = null;\n        long? minPos = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else if (i\
    \ > 0) {\n                if (minPos == null || i < minPos) {\n              \
    \      minPos = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "        Nullable<long>\
    \ largestNegative = null;\n        Nullable<long> smallestPositive = null;\n \
    \       foreach (long i in lst) {\n            if (i < 0) {\n                if\
    \ (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return null;", "        // Your code here\n        return null;", "        if\
    \ (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long maxNegative = long.MinValue;\n        long minPositive\
    \ = long.MaxValue;\n        foreach (long num in lst) {\n            if (num <\
    \ 0) {\n                maxNegative = Math.Max(maxNegative, num);\n          \
    \  } else if (num > 0) {\n                minPositive = Math.Min(minPositive,\
    \ num);\n            }\n        }\n        if (maxNegative == long.MinValue) {\n\
    \            maxNegative = (long?)null;\n        }\n        if (minPositive ==\
    \ long.MaxValue) {\n            minPositive = (long?)null;\n        }\n      \
    \  return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);",
  "        long? a = null;\n        long? b = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (a == null || i > a) {\n   \
    \                 a = i;\n                }\n            } else if (i > 0) {\n\
    \                if (b == null || i < b) {\n                    b = i;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        // Write your code here\n        return null;",
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        long? maxNeg = null;\n        long? minPos =\
    \ null;\n        foreach (long i in lst) {\n            if (i < 0) {\n       \
    \         if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n\
    \                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Your code here\n        return null;", "        long?\
    \ largest = null;\n        long? smallest = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largest == null || i >\
    \ largest) {\n                    largest = i;\n                }\n          \
    \  } else if (i > 0) {\n                if (smallest == null || i < smallest)\
    \ {\n                    smallest = i;\n                }\n            }\n   \
    \     }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  '        return null;', "        // write your code here\n        return null;",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long maxNeg = long.MinValue;\n        long minPos\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                maxNeg = Math.Max(maxNeg, i);\n            } else if (i >\
    \ 0) {\n                minPos = Math.Min(minPos, i);\n            }\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg == long.MinValue\
    \ ? null : (Nullable<long>)maxNeg, minPos == long.MaxValue ? null : (Nullable<long>)minPos);",
  "        long? min = null;\n        long? max = null;\n        foreach (var i in\
    \ lst) {\n            if (i > 0) {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            } else if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        return\
    \ null;", "        // Write your code here\n        return null;", "        var\
    \ a = lst.Where(x => x < 0).Max();\n        var b = lst.Where(x => x > 0).Min();\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        //\
    \ Write your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        var min = lst.Where(x => x > 0).Min();\n    \
    \    var max = lst.Where(x => x < 0).Max();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        if (lst.Count == 0) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        foreach (long i in lst) {\n\
    \            if (i > 0) {\n                if (i < min) {\n                  \
    \  min = i;\n                }\n            } else {\n                if (i >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        if (min == lst[0]) {\n            min = 0;\n        }\n     \
    \   if (max == lst[0]) {\n            max = 0;\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(max, min);", "        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else if (i > 0) {\n\
    \                if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long maxNeg = long.MinValue;\n \
    \       long minPos = long.MaxValue;\n        foreach (long i in lst) {\n    \
    \        if (i < 0) {\n                if (i > maxNeg) {\n                   \
    \ maxNeg = i;\n                }\n            } else if (i > 0) {\n          \
    \      if (i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        if (maxNeg == long.MinValue) {\n          \
    \  maxNeg = (long?)null;\n        }\n        if (minPos == long.MaxValue) {\n\
    \            minPos = (long?)null;\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  return null;", "        var min = lst.Where(x => x > 0).Min();\n        var\
    \ max = lst.Where(x => x < 0).Max();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        if (lst.Count == 0)\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long min = lst[0];\n\
    \        long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < min)\n                min = lst[i];\n            if (lst[i]\
    \ > max)\n                max = lst[i];\n        }\n        if (min > 0)\n   \
    \         min = 0;\n        if (max < 0)\n            max = 0;\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        var max = lst.Where(x\
    \ => x < 0).DefaultIfEmpty().Max();\n        var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", '        return
    new Tuple<Nullable<long>, Nullable<long>>(null, null);', "        long? maxNeg\
    \ = null;\n        long? minPos = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else if (i\
    \ > 0) {\n                if (minPos == null || i < minPos) {\n              \
    \      minPos = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (var item in lst) {\n\
    \            if (item > 0) {\n                if (min == null || item < min) {\n\
    \                    min = item;\n                }\n            } else if (item\
    \ < 0) {\n                if (max == null || item > max) {\n                 \
    \   max = item;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(max, min);", "        if (lst.Count ==\
    \ 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        long maxNegative = long.MinValue;\n        long minPositive\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                maxNegative = Math.Max(maxNegative, i);\n            } else\
    \ if (i > 0) {\n                minPositive = Math.Min(minPositive, i);\n    \
    \        }\n        }\n        if (maxNegative == long.MinValue) {\n         \
    \   maxNegative = (long?)null;\n        }\n        if (minPositive == long.MaxValue)\
    \ {\n            minPositive = (long?)null;\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNegative, minPositive);", "        // Write your code here\n\
    \        return null;", "        // Your code goes here\n        return null;",
  "        // Your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        long? maxNeg = null;\n        long? minPos =\
    \ null;\n        foreach (long i in lst) {\n            if (i < 0) {\n       \
    \         if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n\
    \                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Your code here\n        return null;", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (var i in lst) {\n \
    \           if (i > 0) {\n                if (min == null || i < min) {\n    \
    \                min = i;\n                }\n            } else if (i < 0) {\n\
    \                if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long? largestNegative = null;\n      \
    \  long? smallestPositive = null;\n        foreach (long num in lst) {\n     \
    \       if (num < 0) {\n                if (largestNegative == null || num > largestNegative)\
    \ {\n                    largestNegative = num;\n                }\n         \
    \   } else if (num > 0) {\n                if (smallestPositive == null || num\
    \ < smallestPositive) {\n                    smallestPositive = num;\n       \
    \         }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        if (lst.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long min = lst[0];\n        long max = lst[0];\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (i > max) {\n                    max = i;\n                }\n          \
    \  } else {\n                if (i < min) {\n                    min = i;\n  \
    \              }\n            }\n        }\n        if (min > 0) {\n         \
    \   min = 0;\n        }\n        if (max < 0) {\n            max = 0;\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", " \
    \       // Write your code here\n        return null;", '        return new Tuple<Nullable<long>,
    Nullable<long>>(lst.Where(x => x < 0).Max(), lst.Where(x => x > 0).Min());', " \
    \       // Your code goes here\n        return null;", "        if (lst.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long min = lst[0];\n        long max = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min = lst[i];\n            }\n            if (lst[i] > max)\
    \ {\n                max = lst[i];\n            }\n        }\n        if (min\
    \ > 0) {\n            min = 0;\n        }\n        if (max < 0) {\n          \
    \  max = 0;\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // Write your code here\n        return null;", "        long?\
    \ maxNeg = null;\n        long? minPos = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (maxNeg == null || i > maxNeg)\
    \ {\n                    maxNeg = i;\n                }\n            } else if\
    \ (i > 0) {\n                if (minPos == null || i < minPos) {\n           \
    \         minPos = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "        long?\
    \ maxNegative = null;\n        long? minPositive = null;\n        foreach (long\
    \ n in lst) {\n            if (n < 0) {\n                if (maxNegative == null\
    \ || n > maxNegative) {\n                    maxNegative = n;\n              \
    \  }\n            } else if (n > 0) {\n                if (minPositive == null\
    \ || n < minPositive) {\n                    minPositive = n;\n              \
    \  }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        // Write your code here\n        return null;", " \
    \       // Your code here\n        return null;", "        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else if (i > 0) {\n\
    \                if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Your code here\n        Nullable<long>\
    \ largest = null;\n        Nullable<long> smallest = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (largest == null ||\
    \ i > largest) {\n                    largest = i;\n                }\n      \
    \      } else if (i > 0) {\n                if (smallest == null || i < smallest)\
    \ {\n                    smallest = i;\n                }\n            }\n   \
    \     }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       // Your code goes here\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Your code goes here\n        return\
    \ null;", "        // your code here\n        return null;", "        var min\
    \ = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        var max = lst.Where(x\
    \ => x < 0).DefaultIfEmpty().Max();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        return\
    \ null;", "        long? min = null;\n        long? max = null;\n        foreach\
    \ (var i in lst) {\n            if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (min == null || i < min) {\n       \
    \             min = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        // TODO: Implement\
    \ this function\n        return null;", "        // Write your code here\n   \
    \     return null;", "        // Write your code here\n        return null;",
  "        // Your code here\n        return null;", "        // Write your code here\n\
    \        return null;", '        return new Tuple<Nullable<long>, Nullable<long>>(null,
    null);', "        // Write your code here\n        return null;", "        //\
    \ Write your code here\n        return null;", "        // Your code here\n  \
    \      return null;", "        // Your code goes here\n        return null;",
  "        long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       // Write your code here\n        return null;", "        var min = lst.Where(x\
    \ => x > 0).DefaultIfEmpty().Min();\n        var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "     \
    \   long? min = null;\n        long? max = null;\n        foreach (var x in lst)\
    \ {\n            if (x > 0) {\n                if (min == null || x < min) {\n\
    \                    min = x;\n                }\n            } else if (x < 0)\
    \ {\n                if (max == null || x > max) {\n                    max =\
    \ x;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        return\
    \ null;", "        // TODO: Implement this function\n        return null;", " \
    \       long? min = null;\n        long? max = null;\n        foreach (var i in\
    \ lst) {\n            if (i > 0) {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            } else if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Your code here\n        return null;",
  "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var b =\
    \ lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        var min = lst.Where(x => x > 0).Min();\n \
    \       var max = lst.Where(x => x < 0).Max();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        var min = lst.Where(x => x > 0).Min();\n\
    \        var max = lst.Where(x => x < 0).Max();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        if (lst.Count == 0) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        long\
    \ maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n        foreach\
    \ (long num in lst) {\n            if (num < 0) {\n                maxNeg = Math.Max(maxNeg,\
    \ num);\n            } else if (num > 0) {\n                minPos = Math.Min(minPos,\
    \ num);\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg\
    \ == long.MinValue ? null : (Nullable<long>)maxNeg, minPos == long.MaxValue ?\
    \ null : (Nullable<long>)minPos);", "        // Write your code here\n       \
    \ return null;", "        Nullable<long> largestNegative = null;\n        Nullable<long>\
    \ smallestPositive = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largestNegative == null || i > largestNegative) {\n          \
    \          largestNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long? a = null;\n        long? b = null;\n   \
    \     foreach (long x in lst) {\n            if (x < 0) {\n                if\
    \ (a == null || x > a) {\n                    a = x;\n                }\n    \
    \        } else if (x > 0) {\n                if (b == null || x < b) {\n    \
    \                b = x;\n                }\n            }\n        }\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        if (lst.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long maxNegative = long.MinValue;\n        long minPositive\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                maxNegative = Math.Max(maxNegative, i);\n            } else\
    \ if (i > 0) {\n                minPositive = Math.Min(minPositive, i);\n    \
    \        }\n        }\n        if (maxNegative == long.MinValue) {\n         \
    \   maxNegative = (long?)null;\n        }\n        if (minPositive == long.MaxValue)\
    \ {\n            minPositive = (long?)null;\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNegative, minPositive);", "        if (lst.Count == 0) {\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        long maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ maxNeg = Math.Max(maxNeg, i);\n            } else if (i > 0) {\n           \
    \     minPos = Math.Min(minPos, i);\n            }\n        }\n        if (maxNeg\
    \ == long.MinValue) {\n            maxNeg = null;\n        }\n        if (minPos\
    \ == long.MaxValue) {\n            minPos = null;\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "        long? maxNeg\
    \ = null;\n        long? minPos = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else if (i\
    \ > 0) {\n                if (minPos == null || i < minPos) {\n              \
    \      minPos = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (var item in lst) {\n\
    \            if (item > 0) {\n                if (min == null || item < min) {\n\
    \                    min = item;\n                }\n            } else if (item\
    \ < 0) {\n                if (max == null || item > max) {\n                 \
    \   max = item;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(max, min);", "        var maxNeg = lst.Where(x\
    \ => x < 0).DefaultIfEmpty().Max();\n        var minPos = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       // Write your code here\n        return null;", "        if (lst.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long maxNeg = long.MinValue;\n        long minPos\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                maxNeg = Math.Max(maxNeg, i);\n            } else if (i >\
    \ 0) {\n                minPos = Math.Min(minPos, i);\n            }\n       \
    \ }\n        if (maxNeg == long.MinValue) {\n            maxNeg = 0;\n       \
    \ }\n        if (minPos == long.MaxValue) {\n            minPos = 0;\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        // Write your code here\n        long? max = null;\n        long? min =\
    \ null;\n        foreach (var item in lst)\n        {\n            if (item <\
    \ 0)\n            {\n                if (max == null)\n                {\n   \
    \                 max = item;\n                }\n                else\n     \
    \           {\n                    if (item > max)\n                    {\n  \
    \                      max = item;\n                    }\n                }\n\
    \            }\n            else\n            {\n                if (min == null)\n\
    \                {\n                    min = item;\n                }\n     \
    \           else\n                {\n                    if (item < min)\n   \
    \                 {\n                        min = item;\n                   \
    \ }\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNeg == null || i > maxNeg) {\n                    maxNeg =\
    \ i;\n                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        long? min = null;\n        long? max = null;\n        foreach\
    \ (var item in lst) {\n            if (item > 0) {\n                if (min ==\
    \ null || item < min) {\n                    min = item;\n                }\n\
    \            } else if (item < 0) {\n                if (max == null || item >\
    \ max) {\n                    max = item;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);",
  "        // Write your code here\n        return null;", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        long? smallest\
    \ = null;\n        long? largest = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (largest == null || i > largest)\
    \ {\n                    largest = i;\n                }\n            } else if\
    \ (i > 0) {\n                if (smallest == null || i < smallest) {\n       \
    \             smallest = i;\n                }\n            }\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", " \
    \       long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        if (lst.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long maxNeg = long.MinValue;\n        long minPos\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                maxNeg = Math.Max(maxNeg, i);\n            } else if (i >\
    \ 0) {\n                minPos = Math.Min(minPos, i);\n            }\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg == long.MinValue\
    \ ? null : (Nullable<long>)maxNeg, minPos == long.MaxValue ? null : (Nullable<long>)minPos);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        long? maxNegative\
    \ = null;\n        long? minPositive = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (maxNegative == null || i >\
    \ maxNegative) {\n                    maxNegative = i;\n                }\n  \
    \          } else if (i > 0) {\n                if (minPositive == null || i <\
    \ minPositive) {\n                    minPositive = i;\n                }\n  \
    \          }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        // Write your\
    \ code here\n        return null;", "        if (lst.Count == 0) {\n         \
    \   return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n\
    \        long min = lst[0];\n        long max = lst[0];\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (i > max) {\n    \
    \                max = i;\n                }\n            } else {\n         \
    \       if (i < min) {\n                    min = i;\n                }\n    \
    \        }\n        }\n        if (min > 0) {\n            min = 0;\n        }\n\
    \        if (max < 0) {\n            max = 0;\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long? smallest = null;\n        long?\
    \ largest = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (largest == null || i > largest) {\n                    largest\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallest == null || i < smallest) {\n                    smallest = i;\n  \
    \              }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        // Write your code here\n   \
    \     return null;", "        var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        if (lst.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largestNegative = long.MinValue;\n        long\
    \ smallestPositive = long.MaxValue;\n        foreach (long num in lst) {\n   \
    \         if (num < 0) {\n                largestNegative = Math.Max(largestNegative,\
    \ num);\n            } else if (num > 0) {\n                smallestPositive =\
    \ Math.Min(smallestPositive, num);\n            }\n        }\n        if (largestNegative\
    \ == long.MinValue) {\n            largestNegative = (long?)null;\n        }\n\
    \        if (smallestPositive == long.MaxValue) {\n            smallestPositive\
    \ = (long?)null;\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long? largest = null;\n        long? smallest\
    \ = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n     \
    \           if (smallest == null || i < smallest) {\n                    smallest\
    \ = i;\n                }\n            } else if (i < 0) {\n                if\
    \ (largest == null || i > largest) {\n                    largest = i;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long? maxNeg = null;\n      \
    \  long? minPos = null;\n        foreach (long i in lst) {\n            if (i\
    \ < 0) {\n                if (maxNeg == null || i > maxNeg) {\n              \
    \      maxNeg = i;\n                }\n            } else if (i > 0) {\n     \
    \           if (minPos == null || i < minPos) {\n                    minPos =\
    \ i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  return null;", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Write your code here\n        return null;", "      \
    \  long? min = null;\n        long? max = null;\n        foreach (var item in\
    \ lst) {\n            if (item > 0) {\n                if (min == null || item\
    \ < min) {\n                    min = item;\n                }\n            }\
    \ else if (item < 0) {\n                if (max == null || item > max) {\n   \
    \                 max = item;\n                }\n            }\n        }\n \
    \       return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "      \
    \  // Write your code here\n        return null;", "        if (lst.Count == 0)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        long min = lst[0];\n        long max = lst[0];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         min = lst[i];\n            }\n            if (lst[i] > max) {\n    \
    \            max = lst[i];\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Your code goes here\n        return\
    \ null;", "        // Write your code here\n        return null;", "        //\
    \ your code here\n        return null;", "        if (lst.Count == 0) {\n    \
    \        return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n     \
    \   }\n        long largestNegative = 0;\n        long smallestPositive = 0;\n\
    \        bool hasNegative = false;\n        bool hasPositive = false;\n      \
    \  foreach (long num in lst) {\n            if (num < 0) {\n                hasNegative\
    \ = true;\n                if (num > largestNegative) {\n                    largestNegative\
    \ = num;\n                }\n            } else if (num > 0) {\n             \
    \   hasPositive = true;\n                if (smallestPositive == 0 || num < smallestPositive)\
    \ {\n                    smallestPositive = num;\n                }\n        \
    \    }\n        }\n        if (!hasNegative) {\n            largestNegative =\
    \ null;\n        }\n        if (!hasPositive) {\n            smallestPositive\
    \ = null;\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return null;",
  "        long maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n  \
    \      foreach (long i in lst) {\n            if (i < 0) {\n                if\
    \ (i > maxNeg) maxNeg = i;\n            } else if (i > 0) {\n                if\
    \ (i < minPos) minPos = i;\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg == long.MinValue ? null : (Nullable<long>)maxNeg, minPos\
    \ == long.MaxValue ? null : (Nullable<long>)minPos);", "        // Write your\
    \ code here\n        return null;", "        long? largestNegative = null;\n \
    \       long? smallestPositive = null;\n        foreach (long i in lst) {\n  \
    \          if (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);"]
stop_tokens:
- "\n    }\n"
