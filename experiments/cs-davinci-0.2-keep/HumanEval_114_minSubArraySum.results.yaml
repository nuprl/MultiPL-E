language: cs
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85400bd55d5c4e33893bd0c6177ccc7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85400bd55d5c4e33893bd0c6177ccc7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = nums[0];\n        for (int i = 1; i < nums.Count; i++) {\n            sum
    = Math.Min(nums[i], sum + nums[i]);\n            min = Math.Min(min, sum);\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // Write your code here\n        long
    min = nums[0];\n        long sum = 0;\n        for (int i = 0; i < nums.Count;
    i++) {\n            sum += nums[i];\n            if (sum < min) {\n                min
    = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n
    \           }\n        }\n        return min;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L})))
    == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e364715625e4eea837ebce1eddd95aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e364715625e4eea837ebce1eddd95aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // O(n)\n        long min = nums[0];\n
    \       long sum = nums[0];\n        for (int i = 1; i < nums.Count; i++) {\n
    \           sum = Math.Min(sum + nums[i], nums[i]);\n            min = Math.Min(min,
    sum);\n        }\n        return min;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L})))
    == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        var min = long.MaxValue;\n        var
    sum = 0L;\n        var start = 0;\n        var end = 0;\n        while (end <
    nums.Count) {\n            sum += nums[end];\n            while (sum >= 0) {\n
    \               min = Math.Min(min, sum);\n                sum -= nums[start];\n
    \               start++;\n            }\n            end++;\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Minsubarraysum
    (System.Collections.Generic.List`1[T] nums) [0x0002a] in <0e754fcab50945a99df776a9d144051c>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0e754fcab50945a99df776a9d144051c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Minsubarraysum
    (System.Collections.Generic.List`1[T] nums) [0x0002a] in <0e754fcab50945a99df776a9d144051c>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0e754fcab50945a99df776a9d144051c>:0
    \n"
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n            if
    (sum < min) {\n                min = sum;\n            }\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long currentSum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n
    \           currentSum += nums[i];\n            if (currentSum < minSum) {\n                minSum
    = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum
    = 0;\n            }\n        }\n        return minSum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement your solution
    here\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L})))
    == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cc04f1b062641f19abf83c8e13111de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cc04f1b062641f19abf83c8e13111de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = 0;\n        long
    currentSum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            currentSum
    += nums[i];\n            if (currentSum < minSum) {\n                minSum =
    currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum
    = 0;\n            }\n        }\n        return minSum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecefe0f8ca4748048d530253dbfcc8a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecefe0f8ca4748048d530253dbfcc8a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // Your code here\n        long
    min = nums[0];\n        long sum = 0;\n        for (int i = 0; i < nums.Count;
    i++) {\n            sum += nums[i];\n            if (sum < min) {\n                min
    = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n
    \           }\n        }\n        return min;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L})))
    == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        var min = nums[0];\n        var
    sum = 0;\n        foreach (var num in nums) {\n            sum += num;\n            if
    (sum < min) {\n                min = sum;\n            }\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfiafwaj.cs(18,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = nums[0];\n        for (int i = 1; i < nums.Count; i++) {\n            sum
    = Math.Min(nums[i], sum + nums[i]);\n            min = Math.Min(min, sum);\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement your solution
    here\n        long min = long.MaxValue;\n        long sum = 0;\n        for (int
    i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum
    < min) {\n                min = sum;\n            }\n            if (sum > 0)
    {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement your solution
    here\n        long min = long.MaxValue;\n        long sum = 0;\n        for (int
    i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum
    < min) {\n                min = sum;\n            }\n            if (sum > 0)
    {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement me\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5eebb90b6cb74a1e913f06ad8f4a54f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5eebb90b6cb74a1e913f06ad8f4a54f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this method\n
    \       long min = nums[0];\n        long sum = 0;\n        for (int i = 0; i
    < nums.Count; i++) {\n            sum += nums[i];\n            if (sum < min)
    {\n                min = sum;\n            }\n            if (sum > 0) {\n                sum
    = 0;\n            }\n        }\n        return min;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this method\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56706eedec824be8be26b20b90eaf502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56706eedec824be8be26b20b90eaf502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e364715625e4eea837ebce1eddd95aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e364715625e4eea837ebce1eddd95aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = nums[0];\n        for (int i = 1; i < nums.Count; i++) {\n            sum
    = Math.Min(nums[i], sum + nums[i]);\n            min = Math.Min(min, sum);\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = nums[0];\n        for (int i = 1; i < nums.Count; i++) {\n            sum
    = Math.Min(nums[i], sum + nums[i]);\n            min = Math.Min(min, sum);\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n            if
    (sum < min) {\n                min = sum;\n            }\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = nums[0];\n        for (int i = 1; i < nums.Count; i++) {\n            sum
    = Math.Min(nums[i], sum + nums[i]);\n            min = Math.Min(min, sum);\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this method\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56706eedec824be8be26b20b90eaf502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56706eedec824be8be26b20b90eaf502>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long currSum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            currSum
    += nums[i];\n            if (currSum < minSum) {\n                minSum = currSum;\n
    \           }\n            if (currSum > 0) {\n                currSum = 0;\n
    \           }\n        }\n        return minSum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L})))
    == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement me\n        long
    min = nums[0];\n        long sum = 0;\n        for (int i = 0; i < nums.Count;
    i++) {\n            sum += nums[i];\n            if (sum < min) {\n                min
    = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n
    \           }\n        }\n        return min;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L})))
    == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this function\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <516cdd7c12314d67a6c5110445c86434>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <516cdd7c12314d67a6c5110445c86434>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85400bd55d5c4e33893bd0c6177ccc7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85400bd55d5c4e33893bd0c6177ccc7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement your solution
    here\n        long min = nums[0];\n        long sum = 0;\n        for (int i =
    0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum <
    min) {\n                min = sum;\n            }\n            if (sum > 0) {\n
    \               sum = 0;\n            }\n        }\n        return min;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement me\n        long
    min = nums[0];\n        long sum = 0;\n        for (int i = 0; i < nums.Count;
    i++) {\n            sum += nums[i];\n            if (sum < min) {\n                min
    = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n
    \           }\n        }\n        return min;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L})))
    == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = nums[0];\n        for (int i = 1; i < nums.Count; i++) {\n            sum
    = Math.Min(nums[i], sum + nums[i]);\n            min = Math.Min(min, sum);\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this method\n
    \       //throw new NotImplementedException();\n        long min = nums[0];\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++)\n        {\n
    \           sum += nums[i];\n            if (sum < min)\n            {\n                min
    = sum;\n            }\n            if (sum > 0)\n            {\n                sum
    = 0;\n            }\n        }\n        return min;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805038
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            minSum = Math.Min(minSum, sum);\n            if (sum
    > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long minSum = long.MaxValue;\n
    \       long currentSum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n
    \           currentSum += nums[i];\n            if (currentSum < minSum) {\n                minSum
    = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum
    = 0;\n            }\n        }\n        return minSum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this function\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <516cdd7c12314d67a6c5110445c86434>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <516cdd7c12314d67a6c5110445c86434>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = nums[0];\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = 0;\n        long sum
    = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6af513ac72b3499cb45734239f341279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6af513ac72b3499cb45734239f341279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805038
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        // TODO: Implement this function\n
    \       long min = nums[0];\n        long sum = 0;\n        for (int i = 0; i
    < nums.Count; i++) {\n            sum += nums[i];\n            if (sum < min)
    {\n                min = sum;\n            }\n            if (sum > 0) {\n                sum
    = 0;\n            }\n        }\n        return min;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805038
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of integers nums, find the minimum sum of any
    non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,
    3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static
    long Minsubarraysum(List<long> nums) {\n        long min = long.MaxValue;\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum < min) {\n                min = sum;\n            }\n            if
    (sum > 0) {\n                sum = 0;\n            }\n        }\n        return
    min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))
    == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n
    \   Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))
    == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new
    long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))
    == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))
    == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,
    (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new
    List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805037
