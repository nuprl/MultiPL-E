name: HumanEval_143_words_in_sentence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string representing a sentence,\n    // the\
  \ sentence contains some words separated by a space,\n    // and you have to return\
  \ a string that contains the words from the original sentence,\n    // whose lengths\
  \ are prime numbers,\n    // the order of the words in the new string should be\
  \ the same as the original one.\n    // Example 1:\n    // Input: sentence = \"\
  This is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
  \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n \
  \   // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n  \
  \  public static string WordsInSentence(string sentence) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
  This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
  \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
  there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
  Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
  go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\"\
  )).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
  is\")));\n    }\n\n}\n"
completions: ["        var words = sentence.Split(' ');\n        var primeWords =\
    \ new List<string>();\n        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                primeWords.Add(word);\n            }\n        }\n       \
    \ return string.Join(\" \", primeWords);", "        var words = sentence.Split('\
    \ ');\n        var sb = new StringBuilder();\n        foreach (var word in words)\
    \ {\n            if (IsPrime(word.Length)) {\n                sb.Append(word);\n\
    \                sb.Append(' ');\n            }\n        }\n        return sb.ToString().Trim();",
  "        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => 'a' <= c && c <= 'z'));\n        // * 1\
    \ <= len(word) <= 100\n        Debug.Assert(sentence.Split(' ').All(word => 1\
    \ <= word.Length && word.Length <= 100));\n        // * word contains only letters\n\
    \        Debug.Assert(sentence.Split(' ').All(word => word.All(c => 'a' <= c &&\
    \ c <= 'z')));\n        // * 1 <= len(result) <= 100\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => 1 <= word.Length && word.Length\
    \ <= 100));\n        // * result contains only letters\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => word.All(c => 'a' <= c &&\
    \ c <= 'z')));\n        return string.Join(\" \", sentence.Split(' ').Where(word\
    \ => IsPrime(word.Length)));", "        var words = sentence.Split(' ');\n   \
    \     var sb = new StringBuilder();\n        foreach (var word in words) {\n \
    \           if (IsPrime(word.Length)) {\n                sb.Append(word);\n  \
    \              sb.Append(' ');\n            }\n        }\n        return sb.ToString().Trim();",
  "        var words = sentence.Split(' ');\n        var result = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Append(word);\n                result.Append(' ');\n\
    \            }\n        }\n        return result.ToString().Trim();", "      \
    \  // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length &&\
    \ sentence.Length <= 100);\n        // * sentence contains only letters\n    \
    \    Debug.Assert(sentence.All(c => 'a' <= c && c <= 'z'));\n        // * 1 <=\
    \ len(word) <= 100\n        Debug.Assert(sentence.Split(' ').All(word => 1 <=\
    \ word.Length && word.Length <= 100));\n        // * word contains only letters\n\
    \        Debug.Assert(sentence.Split(' ').All(word => word.All(c => 'a' <= c &&\
    \ c <= 'z')));\n        // * 1 <= len(result) <= 100\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => 1 <= word.Length && word.Length\
    \ <= 100));\n        // * result contains only letters\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => word.All(c => 'a' <= c &&\
    \ c <= 'z')));\n        // * 1 <= len(result) <= 100\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => 1 <= word.Length && word.Length\
    \ <= 100));\n        // * result contains only letters\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => word.All(c => 'a' <= c &&\
    \ c <= 'z')));\n        // * 1 <= len(result) <= 100\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => 1 <= word.Length && word.Length\
    \ <= 100));\n        // * result contains only letters\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime(word.Length)).All(word => word.All(c => 'a' <= c &&\
    \ c <= 'z')));\n        // * 1 <= len(result) <= 100\n        Debug.Assert(sentence.Split('\
    \ ').Where(word => IsPrime", "        // * 1 <= len(sentence) <= 100\n       \
    \ Debug.Assert(1 <= sentence.Length && sentence.Length <= 100);\n        // *\
    \ sentence contains only letters\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n\
    \        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => char.IsLetter(c)));\n        // * 1 <=\
    \ len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length && sentence.Length\
    \ <= 100);\n        // * sentence contains only letters\n        Debug.Assert(sentence.All(c\
    \ => char.IsLetter(c)));\n        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n \
    \       // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => char.IsLetter(c)));\n        // * 1 <=\
    \ len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length && sentence.Length\
    \ <= 100);\n        // * sentence contains only letters\n        Debug.Assert(sentence.All(c\
    \ => char.IsLetter(c)));\n        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n \
    \       // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => char.IsLetter(c)));\n        // * 1 <=\
    \ len(sentence) <= 100\n        Debug", "        // * 1 <= len(sentence) <= 100\n\
    \        Debug.Assert(1 <= sentence.Length && sentence.Length <= 100);\n     \
    \   // * sentence contains only letters\n        Debug.Assert(sentence.All(c =>\
    \ char.IsLetter(c)));\n        // The sentence contains some words separated by\
    \ a space\n        var words = sentence.Split(' ');\n        // You have to return\
    \ a string that contains the words from the original sentence,\n        // whose\
    \ lengths are prime numbers,\n        // the order of the words in the new string\
    \ should be the same as the original one.\n        return string.Join(\" \", words.Where(w\
    \ => IsPrime(w.Length)));", "        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n \
    \       // * 1 <= len(word) <= 100\n        Debug.Assert(sentence.Split(' ').All(word\
    \ => 1 <= word.Length && word.Length <= 100));\n        // * word contains only\
    \ letters\n        Debug.Assert(sentence.Split(' ').All(word => word.All(c =>\
    \ char.IsLetter(c))));\n        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n \
    \       // * 1 <= len(word) <= 100\n        Debug.Assert(sentence.Split(' ').All(word\
    \ => 1 <= word.Length && word.Length <= 100));\n        // * word contains only\
    \ letters\n        Debug.Assert(sentence.Split(' ').All(word => word.All(c =>\
    \ char.IsLetter(c))));\n        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n \
    \       // * 1 <= len(word) <= 100\n        Debug.Assert(sentence.Split(' ').All(word\
    \ => 1 <= word.Length && word.Length <= 100));\n        // * word contains only\
    \ letters\n        Debug.Assert(sentence.Split(' ').All(word => word.All(c =>\
    \ char.IsLetter(c))));\n        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n \
    \       // * 1 <= len(word) <= 100\n        Debug.Assert", "        var words\
    \ = sentence.Split(' ');\n        var sb = new StringBuilder();\n        foreach\
    \ (var word in words) {\n            if (IsPrime(word.Length)) {\n           \
    \     sb.Append(word);\n                sb.Append(' ');\n            }\n     \
    \   }\n        return sb.ToString().Trim();", "        var words = sentence.Split('\
    \ ');\n        var result = new StringBuilder();\n        foreach (var word in\
    \ words) {\n            if (IsPrime(word.Length)) {\n                result.Append(word);\n\
    \                result.Append(' ');\n            }\n        }\n        return\
    \ result.ToString().Trim();", "        var words = sentence.Split(' ');\n    \
    \    var result = new StringBuilder();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                result.Append(word);\n\
    \                result.Append(' ');\n            }\n        }\n        if (result.Length\
    \ > 0) {\n            result.Length -= 1;\n        }\n        return result.ToString();",
  "        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => c >= 'a' && c <= 'z'));\n        // split\
    \ the sentence into words\n        var words = sentence.Split(' ');\n        //\
    \ create a list of words whose lengths are prime numbers\n        var primeWords\
    \ = new List<string>();\n        // for each word in the sentence\n        foreach\
    \ (var word in words) {\n            // if the length of the word is a prime number\n\
    \            if (IsPrime(word.Length)) {\n                // add the word to the\
    \ list of prime words\n                primeWords.Add(word);\n            }\n\
    \        }\n        // return the list of prime words as a string\n        return\
    \ string.Join(\" \", primeWords);", "        var words = sentence.Split(' ');\n\
    \        var result = new StringBuilder();\n        foreach (var word in words)\
    \ {\n            if (IsPrime(word.Length)) {\n                result.Append(word);\n\
    \                result.Append(' ');\n            }\n        }\n        return\
    \ result.ToString().Trim();", "        // * 1 <= len(sentence) <= 100\n      \
    \  Debug.Assert(1 <= sentence.Length && sentence.Length <= 100);\n        // *\
    \ sentence contains only letters\n        Debug.Assert(sentence.All(c => 'a' <=\
    \ c && c <= 'z'));\n        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => 'a' <= c && c <= 'z'));\n\
    \        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => 'a' <= c && c <= 'z'));\n        // * 1\
    \ <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length && sentence.Length\
    \ <= 100);\n        // * sentence contains only letters\n        Debug.Assert(sentence.All(c\
    \ => 'a' <= c && c <= 'z'));\n        // * 1 <= len(sentence) <= 100\n       \
    \ Debug.Assert(1 <= sentence.Length && sentence.Length <= 100);\n        // *\
    \ sentence contains only letters\n        Debug.Assert(sentence.All(c => 'a' <=\
    \ c && c <= 'z'));\n        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1\
    \ <= sentence.Length && sentence.Length <= 100);\n        // * sentence contains\
    \ only letters\n        Debug.Assert(sentence.All(c => 'a' <= c && c <= 'z'));\n\
    \        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => 'a' <= c && c <= 'z'));\n        // * 1\
    \ <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length && sentence.Length\
    \ <= 100);\n        // * sentence contains only letters\n        Debug.Assert(sentence.",
  "        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => char.IsLetter(c)));\n        // split the\
    \ sentence into words\n        var words = sentence.Split(' ');\n        // create\
    \ a list of words whose lengths are prime numbers\n        var primeWords = new\
    \ List<string>();\n        // loop over the words\n        foreach (var word in\
    \ words) {\n            // check if the length of the word is a prime number\n\
    \            if (IsPrime(word.Length)) {\n                // add the word to the\
    \ list of prime words\n                primeWords.Add(word);\n            }\n\
    \        }\n        // return the list of prime words as a string\n        return\
    \ string.Join(\" \", primeWords);", "        var words = sentence.Split(' ');\n\
    \        var sb = new StringBuilder();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                sb.Append(word);\n \
    \               sb.Append(' ');\n            }\n        }\n        return sb.ToString().Trim();",
  "        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                sb.Append(word);\n                sb.Append(' ');\n     \
    \       }\n        }\n        return sb.ToString().Trim();", "        var words\
    \ = sentence.Split(' ');\n        var sb = new StringBuilder();\n        foreach\
    \ (var word in words) {\n            if (IsPrime(word.Length)) {\n           \
    \     sb.Append(word);\n                sb.Append(' ');\n            }\n     \
    \   }\n        return sb.ToString().Trim();", "        var words = sentence.Split('\
    \ ');\n        var result = new StringBuilder();\n        foreach (var word in\
    \ words) {\n            if (IsPrime(word.Length)) {\n                result.Append(word);\n\
    \                result.Append(' ');\n            }\n        }\n        return\
    \ result.ToString().Trim();"]
stop_tokens:
- "\n    }\n"
