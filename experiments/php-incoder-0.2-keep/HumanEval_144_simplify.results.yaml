name: HumanEval_144_simplify
language: php
results:
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99qgjd2i.php:18\n\
    Stack trace:\n#0 /tmp/tmp99qgjd2i.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp99qgjd2i.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4eizlg14.php:18\n\
    Stack trace:\n#0 /tmp/tmp4eizlg14.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4eizlg14.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqobftxwo.php:18\n\
    Stack trace:\n#0 /tmp/tmpqobftxwo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqobftxwo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65e524bq.php:18\n\
    Stack trace:\n#0 /tmp/tmp65e524bq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp65e524bq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2gf9cnx.php:18\n\
    Stack trace:\n#0 /tmp/tmpu2gf9cnx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu2gf9cnx.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgioyhlvz.php:18\n\
    Stack trace:\n#0 /tmp/tmpgioyhlvz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgioyhlvz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmabq4qi.php:18\n\
    Stack trace:\n#0 /tmp/tmpgmabq4qi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgmabq4qi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2esxe9ql.php:18\n\
    Stack trace:\n#0 /tmp/tmp2esxe9ql.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2esxe9ql.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6okk588c.php:18\n\
    Stack trace:\n#0 /tmp/tmp6okk588c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6okk588c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3hyn2xj.php:18\n\
    Stack trace:\n#0 /tmp/tmpe3hyn2xj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe3hyn2xj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvr2kb10.php:18\n\
    Stack trace:\n#0 /tmp/tmpwvr2kb10.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwvr2kb10.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1361w7gi.php:18\n\
    Stack trace:\n#0 /tmp/tmp1361w7gi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1361w7gi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjp51dpy.php:18\n\
    Stack trace:\n#0 /tmp/tmpmjp51dpy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmjp51dpy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjjgwz4s.php:18\n\
    Stack trace:\n#0 /tmp/tmpzjjgwz4s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzjjgwz4s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppundu4kn.php:18\n\
    Stack trace:\n#0 /tmp/tmppundu4kn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppundu4kn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmm7jkrvr.php:18\n\
    Stack trace:\n#0 /tmp/tmpmm7jkrvr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmm7jkrvr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprt7ztla2.php:18\n\
    Stack trace:\n#0 /tmp/tmprt7ztla2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprt7ztla2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxr2r11d.php:18\n\
    Stack trace:\n#0 /tmp/tmpqxr2r11d.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqxr2r11d.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsrsvrt1.php:18\n\
    Stack trace:\n#0 /tmp/tmplsrsvrt1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplsrsvrt1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyvpvlsn.php:18\n\
    Stack trace:\n#0 /tmp/tmpyyvpvlsn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyyvpvlsn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp777jgmhb.php:18\n\
    Stack trace:\n#0 /tmp/tmp777jgmhb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp777jgmhb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75freina.php:18\n\
    Stack trace:\n#0 /tmp/tmp75freina.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp75freina.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7m9vz8vu.php:18\n\
    Stack trace:\n#0 /tmp/tmp7m9vz8vu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7m9vz8vu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7g4vykug.php:18\n\
    Stack trace:\n#0 /tmp/tmp7g4vykug.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7g4vykug.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9xkl0a5.php:18\n\
    Stack trace:\n#0 /tmp/tmpr9xkl0a5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr9xkl0a5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptoow848u.php:18\n\
    Stack trace:\n#0 /tmp/tmptoow848u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptoow848u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefgrqkyv.php:18\n\
    Stack trace:\n#0 /tmp/tmpefgrqkyv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpefgrqkyv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp18uu7e1.php:18\n\
    Stack trace:\n#0 /tmp/tmpp18uu7e1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpp18uu7e1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvl4bgmnj.php:18\n\
    Stack trace:\n#0 /tmp/tmpvl4bgmnj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvl4bgmnj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqaj5_x5v.php:18\n\
    Stack trace:\n#0 /tmp/tmpqaj5_x5v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqaj5_x5v.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjy5fu5_6.php:18\n\
    Stack trace:\n#0 /tmp/tmpjy5fu5_6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjy5fu5_6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0fw2r7c.php:18\n\
    Stack trace:\n#0 /tmp/tmpa0fw2r7c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa0fw2r7c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqsbyqh_.php:18\n\
    Stack trace:\n#0 /tmp/tmprqsbyqh_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprqsbyqh_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbi69bzwr.php:18\n\
    Stack trace:\n#0 /tmp/tmpbi69bzwr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbi69bzwr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvidklpi.php:18\n\
    Stack trace:\n#0 /tmp/tmpjvidklpi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjvidklpi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h1o5y0l.php:18\n\
    Stack trace:\n#0 /tmp/tmp8h1o5y0l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8h1o5y0l.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpkn8vvv.php:18\n\
    Stack trace:\n#0 /tmp/tmprpkn8vvv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprpkn8vvv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz07s4p4.php:18\n\
    Stack trace:\n#0 /tmp/tmpaz07s4p4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpaz07s4p4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0wf1gnv.php:18\n\
    Stack trace:\n#0 /tmp/tmpw0wf1gnv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpw0wf1gnv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ovxbcm7.php:18\n\
    Stack trace:\n#0 /tmp/tmp3ovxbcm7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3ovxbcm7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgv1fiijm.php:18\n\
    Stack trace:\n#0 /tmp/tmpgv1fiijm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgv1fiijm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmu1jv5z.php:18\n\
    Stack trace:\n#0 /tmp/tmpwmu1jv5z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwmu1jv5z.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pgxn2kq.php:18\n\
    Stack trace:\n#0 /tmp/tmp5pgxn2kq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5pgxn2kq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fkh3r41.php:18\n\
    Stack trace:\n#0 /tmp/tmp6fkh3r41.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6fkh3r41.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4yk372u.php:18\n\
    Stack trace:\n#0 /tmp/tmpd4yk372u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd4yk372u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5wbkm8z.php:18\n\
    Stack trace:\n#0 /tmp/tmpe5wbkm8z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe5wbkm8z.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg2iz9ft.php:18\n\
    Stack trace:\n#0 /tmp/tmpmg2iz9ft.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmg2iz9ft.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_kinzowg.php:18\n\
    Stack trace:\n#0 /tmp/tmp_kinzowg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_kinzowg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1glh3bu7.php:18\n\
    Stack trace:\n#0 /tmp/tmp1glh3bu7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1glh3bu7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzn0xcpxu.php:18\n\
    Stack trace:\n#0 /tmp/tmpzn0xcpxu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzn0xcpxu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjz8zhgou.php:18\n\
    Stack trace:\n#0 /tmp/tmpjz8zhgou.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjz8zhgou.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75ir8k_c.php:18\n\
    Stack trace:\n#0 /tmp/tmp75ir8k_c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp75ir8k_c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6maetb93.php:18\n\
    Stack trace:\n#0 /tmp/tmp6maetb93.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6maetb93.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw38fvsq7.php:18\n\
    Stack trace:\n#0 /tmp/tmpw38fvsq7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpw38fvsq7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkw2otmme.php:18\n\
    Stack trace:\n#0 /tmp/tmpkw2otmme.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkw2otmme.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwt16ejq.php:18\n\
    Stack trace:\n#0 /tmp/tmppwt16ejq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppwt16ejq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzwcjhax.php:18\n\
    Stack trace:\n#0 /tmp/tmprzwcjhax.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprzwcjhax.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8gi_qlh.php:18\n\
    Stack trace:\n#0 /tmp/tmpr8gi_qlh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr8gi_qlh.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapn6gbwp.php:18\n\
    Stack trace:\n#0 /tmp/tmpapn6gbwp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpapn6gbwp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_gib9az.php:18\n\
    Stack trace:\n#0 /tmp/tmpi_gib9az.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi_gib9az.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7mqon8i7.php:18\n\
    Stack trace:\n#0 /tmp/tmp7mqon8i7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7mqon8i7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpicd9r84f.php:18\n\
    Stack trace:\n#0 /tmp/tmpicd9r84f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpicd9r84f.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu17wwtmj.php:18\n\
    Stack trace:\n#0 /tmp/tmpu17wwtmj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu17wwtmj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhh18io0.php:18\n\
    Stack trace:\n#0 /tmp/tmprhh18io0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprhh18io0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9nicv9a.php:18\n\
    Stack trace:\n#0 /tmp/tmpa9nicv9a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa9nicv9a.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvx87458.php:18\n\
    Stack trace:\n#0 /tmp/tmpzvx87458.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzvx87458.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk1k4nu3.php:18\n\
    Stack trace:\n#0 /tmp/tmpgk1k4nu3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgk1k4nu3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yz51co8.php:18\n\
    Stack trace:\n#0 /tmp/tmp9yz51co8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9yz51co8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kco3i3s.php:18\n\
    Stack trace:\n#0 /tmp/tmp4kco3i3s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kco3i3s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0aq1krq3.php:18\n\
    Stack trace:\n#0 /tmp/tmp0aq1krq3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0aq1krq3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3b2wjxkz.php:18\n\
    Stack trace:\n#0 /tmp/tmp3b2wjxkz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3b2wjxkz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2op3xs2.php:18\n\
    Stack trace:\n#0 /tmp/tmpr2op3xs2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr2op3xs2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxghwkc0_.php:18\n\
    Stack trace:\n#0 /tmp/tmpxghwkc0_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxghwkc0_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3db7f5q.php:18\n\
    Stack trace:\n#0 /tmp/tmph3db7f5q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph3db7f5q.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkozktu8.php:18\n\
    Stack trace:\n#0 /tmp/tmpvkozktu8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvkozktu8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxidemnx8.php:18\n\
    Stack trace:\n#0 /tmp/tmpxidemnx8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxidemnx8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ttt9ren.php:18\n\
    Stack trace:\n#0 /tmp/tmp8ttt9ren.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8ttt9ren.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30zcdfb7.php:18\n\
    Stack trace:\n#0 /tmp/tmp30zcdfb7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp30zcdfb7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ea3x1k4.php:18\n\
    Stack trace:\n#0 /tmp/tmp8ea3x1k4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8ea3x1k4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqiq61uf.php:18\n\
    Stack trace:\n#0 /tmp/tmpfqiq61uf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfqiq61uf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdan09u0.php:18\n\
    Stack trace:\n#0 /tmp/tmpzdan09u0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzdan09u0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8s2ipdu.php:18\n\
    Stack trace:\n#0 /tmp/tmpv8s2ipdu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv8s2ipdu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabveizfy.php:18\n\
    Stack trace:\n#0 /tmp/tmpabveizfy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpabveizfy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyb3zuwmi.php:18\n\
    Stack trace:\n#0 /tmp/tmpyb3zuwmi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyb3zuwmi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9983w69y.php:18\n\
    Stack trace:\n#0 /tmp/tmp9983w69y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9983w69y.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpit6rutwj.php:18\n\
    Stack trace:\n#0 /tmp/tmpit6rutwj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpit6rutwj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rhkf_b3.php:18\n\
    Stack trace:\n#0 /tmp/tmp_rhkf_b3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_rhkf_b3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87kcchju.php:18\n\
    Stack trace:\n#0 /tmp/tmp87kcchju.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp87kcchju.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6w3c4ej.php:18\n\
    Stack trace:\n#0 /tmp/tmpd6w3c4ej.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd6w3c4ej.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpispnymi4.php:18\n\
    Stack trace:\n#0 /tmp/tmpispnymi4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpispnymi4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ukp8p5r.php:18\n\
    Stack trace:\n#0 /tmp/tmp_ukp8p5r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_ukp8p5r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpal149mde.php:18\n\
    Stack trace:\n#0 /tmp/tmpal149mde.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpal149mde.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdg26zsd2.php:18\n\
    Stack trace:\n#0 /tmp/tmpdg26zsd2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdg26zsd2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_o626_vg.php:18\n\
    Stack trace:\n#0 /tmp/tmp_o626_vg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_o626_vg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscrx0rxq.php:18\n\
    Stack trace:\n#0 /tmp/tmpscrx0rxq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpscrx0rxq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsay1hum2.php:18\n\
    Stack trace:\n#0 /tmp/tmpsay1hum2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsay1hum2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1az5yk0.php:18\n\
    Stack trace:\n#0 /tmp/tmpo1az5yk0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo1az5yk0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb1let6f.php:18\n\
    Stack trace:\n#0 /tmp/tmpqb1let6f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqb1let6f.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xp5ey9g.php:18\n\
    Stack trace:\n#0 /tmp/tmp7xp5ey9g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7xp5ey9g.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xex23uf.php:18\n\
    Stack trace:\n#0 /tmp/tmp9xex23uf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9xex23uf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiycgzmva.php:18\n\
    Stack trace:\n#0 /tmp/tmpiycgzmva.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiycgzmva.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowlpxwpk.php:18\n\
    Stack trace:\n#0 /tmp/tmpowlpxwpk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpowlpxwpk.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa88bx09v.php:18\n\
    Stack trace:\n#0 /tmp/tmpa88bx09v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa88bx09v.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbo7avm9.php:18\n\
    Stack trace:\n#0 /tmp/tmphbo7avm9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphbo7avm9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxokf08yb.php:18\n\
    Stack trace:\n#0 /tmp/tmpxokf08yb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxokf08yb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa7aioc6.php:18\n\
    Stack trace:\n#0 /tmp/tmpqa7aioc6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqa7aioc6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefpuropo.php:18\n\
    Stack trace:\n#0 /tmp/tmpefpuropo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpefpuropo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3k281y7.php:18\n\
    Stack trace:\n#0 /tmp/tmpx3k281y7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx3k281y7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnfegb94.php:18\n\
    Stack trace:\n#0 /tmp/tmpxnfegb94.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxnfegb94.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjg_d6rw.php:18\n\
    Stack trace:\n#0 /tmp/tmprjg_d6rw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprjg_d6rw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwajplvt6.php:18\n\
    Stack trace:\n#0 /tmp/tmpwajplvt6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwajplvt6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplx0sb1q2.php:18\n\
    Stack trace:\n#0 /tmp/tmplx0sb1q2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplx0sb1q2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u9a89xk.php:18\n\
    Stack trace:\n#0 /tmp/tmp4u9a89xk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4u9a89xk.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq_5izz9.php:18\n\
    Stack trace:\n#0 /tmp/tmpnq_5izz9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnq_5izz9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxp4au83.php:18\n\
    Stack trace:\n#0 /tmp/tmplxp4au83.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplxp4au83.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx2u3wcg.php:18\n\
    Stack trace:\n#0 /tmp/tmppx2u3wcg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppx2u3wcg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5_q_tio.php:18\n\
    Stack trace:\n#0 /tmp/tmpu5_q_tio.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu5_q_tio.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjc9y_kx.php:18\n\
    Stack trace:\n#0 /tmp/tmpkjc9y_kx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkjc9y_kx.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvgh5ang.php:18\n\
    Stack trace:\n#0 /tmp/tmpcvgh5ang.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcvgh5ang.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadpgpwtr.php:18\n\
    Stack trace:\n#0 /tmp/tmpadpgpwtr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpadpgpwtr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0yhmrfn.php:18\n\
    Stack trace:\n#0 /tmp/tmpv0yhmrfn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv0yhmrfn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjt0g_sij.php:18\n\
    Stack trace:\n#0 /tmp/tmpjt0g_sij.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjt0g_sij.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_54siu_.php:18\n\
    Stack trace:\n#0 /tmp/tmpa_54siu_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa_54siu_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dtzsxtu.php:18\n\
    Stack trace:\n#0 /tmp/tmp8dtzsxtu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8dtzsxtu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbzwm3dz.php:18\n\
    Stack trace:\n#0 /tmp/tmpqbzwm3dz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqbzwm3dz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gx_rq2r.php:18\n\
    Stack trace:\n#0 /tmp/tmp_gx_rq2r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_gx_rq2r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsjff7rq.php:18\n\
    Stack trace:\n#0 /tmp/tmpzsjff7rq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzsjff7rq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp646vvttf.php:18\n\
    Stack trace:\n#0 /tmp/tmp646vvttf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp646vvttf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84709igr.php:18\n\
    Stack trace:\n#0 /tmp/tmp84709igr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp84709igr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z92rquh.php:18\n\
    Stack trace:\n#0 /tmp/tmp2z92rquh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2z92rquh.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsm6oqil4.php:18\n\
    Stack trace:\n#0 /tmp/tmpsm6oqil4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsm6oqil4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6da5wxl.php:18\n\
    Stack trace:\n#0 /tmp/tmpz6da5wxl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz6da5wxl.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcwgalve.php:18\n\
    Stack trace:\n#0 /tmp/tmpbcwgalve.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbcwgalve.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp639n_w3_.php:18\n\
    Stack trace:\n#0 /tmp/tmp639n_w3_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp639n_w3_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz53lyhdi.php:18\n\
    Stack trace:\n#0 /tmp/tmpz53lyhdi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz53lyhdi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf2prt9w.php:18\n\
    Stack trace:\n#0 /tmp/tmppf2prt9w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppf2prt9w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpkgspw4.php:18\n\
    Stack trace:\n#0 /tmp/tmprpkgspw4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprpkgspw4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf0ru29s.php:18\n\
    Stack trace:\n#0 /tmp/tmpbf0ru29s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbf0ru29s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7apzixp.php:18\n\
    Stack trace:\n#0 /tmp/tmpd7apzixp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd7apzixp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lm5khuj.php:18\n\
    Stack trace:\n#0 /tmp/tmp4lm5khuj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4lm5khuj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj0yhn4t.php:18\n\
    Stack trace:\n#0 /tmp/tmpdj0yhn4t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdj0yhn4t.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabr6q2p1.php:18\n\
    Stack trace:\n#0 /tmp/tmpabr6q2p1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpabr6q2p1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckt9hcr0.php:18\n\
    Stack trace:\n#0 /tmp/tmpckt9hcr0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpckt9hcr0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhmh6jq9.php:18\n\
    Stack trace:\n#0 /tmp/tmpqhmh6jq9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqhmh6jq9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7pzkee1.php:18\n\
    Stack trace:\n#0 /tmp/tmpd7pzkee1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd7pzkee1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecl2p9ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpecl2p9ic.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpecl2p9ic.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo9hpvlsm.php:18\n\
    Stack trace:\n#0 /tmp/tmpo9hpvlsm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo9hpvlsm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaot57er5.php:18\n\
    Stack trace:\n#0 /tmp/tmpaot57er5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpaot57er5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yz1deyt.php:18\n\
    Stack trace:\n#0 /tmp/tmp7yz1deyt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7yz1deyt.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9iofofk.php:18\n\
    Stack trace:\n#0 /tmp/tmpa9iofofk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa9iofofk.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpma_2zcvp.php:18\n\
    Stack trace:\n#0 /tmp/tmpma_2zcvp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpma_2zcvp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmm5fv2xf.php:18\n\
    Stack trace:\n#0 /tmp/tmpmm5fv2xf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmm5fv2xf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lewlblr.php:18\n\
    Stack trace:\n#0 /tmp/tmp9lewlblr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9lewlblr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_r2d4tt.php:18\n\
    Stack trace:\n#0 /tmp/tmpl_r2d4tt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl_r2d4tt.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1l214vi.php:18\n\
    Stack trace:\n#0 /tmp/tmpr1l214vi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr1l214vi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyoptov8c.php:18\n\
    Stack trace:\n#0 /tmp/tmpyoptov8c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyoptov8c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7e7l016q.php:18\n\
    Stack trace:\n#0 /tmp/tmp7e7l016q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7e7l016q.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6065k0f.php:18\n\
    Stack trace:\n#0 /tmp/tmpb6065k0f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb6065k0f.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwq4feso.php:18\n\
    Stack trace:\n#0 /tmp/tmptwq4feso.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptwq4feso.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvldf15kd.php:18\n\
    Stack trace:\n#0 /tmp/tmpvldf15kd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvldf15kd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rizt49s.php:18\n\
    Stack trace:\n#0 /tmp/tmp7rizt49s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7rizt49s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk1ckits.php:18\n\
    Stack trace:\n#0 /tmp/tmppk1ckits.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppk1ckits.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrqxiffn.php:18\n\
    Stack trace:\n#0 /tmp/tmpyrqxiffn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyrqxiffn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedrr0mk9.php:18\n\
    Stack trace:\n#0 /tmp/tmpedrr0mk9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpedrr0mk9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiob7q9zc.php:18\n\
    Stack trace:\n#0 /tmp/tmpiob7q9zc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiob7q9zc.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8cgft17.php:18\n\
    Stack trace:\n#0 /tmp/tmpc8cgft17.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc8cgft17.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qk66_rr.php:18\n\
    Stack trace:\n#0 /tmp/tmp6qk66_rr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6qk66_rr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2l5b0q65.php:18\n\
    Stack trace:\n#0 /tmp/tmp2l5b0q65.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2l5b0q65.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nl_b0ej.php:18\n\
    Stack trace:\n#0 /tmp/tmp1nl_b0ej.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1nl_b0ej.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4z9ibwg.php:18\n\
    Stack trace:\n#0 /tmp/tmpe4z9ibwg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe4z9ibwg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzs46_vr5.php:18\n\
    Stack trace:\n#0 /tmp/tmpzs46_vr5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzs46_vr5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx97l82y.php:18\n\
    Stack trace:\n#0 /tmp/tmpqx97l82y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqx97l82y.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5lpo3pus.php:18\n\
    Stack trace:\n#0 /tmp/tmp5lpo3pus.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5lpo3pus.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzeg757j.php:18\n\
    Stack trace:\n#0 /tmp/tmptzeg757j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptzeg757j.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0pvtlyn.php:18\n\
    Stack trace:\n#0 /tmp/tmpx0pvtlyn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx0pvtlyn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32odgsj3.php:18\n\
    Stack trace:\n#0 /tmp/tmp32odgsj3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp32odgsj3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5yk6vu0.php:18\n\
    Stack trace:\n#0 /tmp/tmpi5yk6vu0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi5yk6vu0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcsfh0m0.php:18\n\
    Stack trace:\n#0 /tmp/tmpzcsfh0m0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzcsfh0m0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnjsvtx1.php:18\n\
    Stack trace:\n#0 /tmp/tmpfnjsvtx1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfnjsvtx1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3um_q02c.php:18\n\
    Stack trace:\n#0 /tmp/tmp3um_q02c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3um_q02c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25sll603.php:18\n\
    Stack trace:\n#0 /tmp/tmp25sll603.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp25sll603.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0n5b84h_.php:18\n\
    Stack trace:\n#0 /tmp/tmp0n5b84h_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0n5b84h_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31582j2w.php:18\n\
    Stack trace:\n#0 /tmp/tmp31582j2w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp31582j2w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecw6e25w.php:18\n\
    Stack trace:\n#0 /tmp/tmpecw6e25w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpecw6e25w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxlfwe76.php:18\n\
    Stack trace:\n#0 /tmp/tmpgxlfwe76.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgxlfwe76.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3dm3ry7.php:18\n\
    Stack trace:\n#0 /tmp/tmpv3dm3ry7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv3dm3ry7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1zg06ai.php:18\n\
    Stack trace:\n#0 /tmp/tmps1zg06ai.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps1zg06ai.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna4fvaal.php:18\n\
    Stack trace:\n#0 /tmp/tmpna4fvaal.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpna4fvaal.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v41kv9c.php:18\n\
    Stack trace:\n#0 /tmp/tmp_v41kv9c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_v41kv9c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb96_q46q.php:18\n\
    Stack trace:\n#0 /tmp/tmpb96_q46q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb96_q46q.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqyviwogq.php:18\n\
    Stack trace:\n#0 /tmp/tmpqyviwogq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqyviwogq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvcnjo84.php:18\n\
    Stack trace:\n#0 /tmp/tmpuvcnjo84.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuvcnjo84.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ers4ejz.php:18\n\
    Stack trace:\n#0 /tmp/tmp1ers4ejz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1ers4ejz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx64_urg.php:18\n\
    Stack trace:\n#0 /tmp/tmpzx64_urg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzx64_urg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvakhmrt.php:18\n\
    Stack trace:\n#0 /tmp/tmprvakhmrt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprvakhmrt.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2tegd55.php:18\n\
    Stack trace:\n#0 /tmp/tmpm2tegd55.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpm2tegd55.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpuu7izs.php:18\n\
    Stack trace:\n#0 /tmp/tmpxpuu7izs.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxpuu7izs.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3c9a6m6a.php:18\n\
    Stack trace:\n#0 /tmp/tmp3c9a6m6a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3c9a6m6a.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_nd9w170.php:18\n\
    Stack trace:\n#0 /tmp/tmp_nd9w170.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_nd9w170.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlarc_7g.php:18\n\
    Stack trace:\n#0 /tmp/tmpvlarc_7g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvlarc_7g.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
