name: HumanEval_100_make_a_pile
language: php
results:
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5mfeu1ej.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n / 2) + 1;\n    } else {\n        $pile[1] = ($n / 2) + 1;\n        $pile[2]\
    \ = ($n / 2) + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkrurl1o.php:29\n\
    Stack trace:\n#0 /tmp/tmppkrurl1o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppkrurl1o.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[12] = $n % 2 ? $n + 1 : $n;\n    $pile[13] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[14] = $n % 2 ? $n + 1 : $n;\n    $pile[15] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[16] = $n % 2 ? $n + 1 : $n;\n    $pile[17] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[18] = $n % 2 ? $n + 1 : $n;\n    $pile[19] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[20] = $n % 2 ? $n + 1 : $n;\n    $pile[21] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[22] = $n % 2 ? $n + 1 : $n;\n    $pile[23] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[24] = $n % 2 ? $n + 1 : $n;\n    $pile[25] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 1 : $n;\n    $pile[27] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 1 : $n;\n    $pile[29] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 1 : $n;\n    $pile[31] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[32] = $n % 2 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0luul64p.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprf1qwvd1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $odd_count = 1;\n    $even_count = 1;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $even_count += $pile[$i - 1];\n     \
    \   } else {\n            $odd_count += $pile[$i - 1];\n        }\n        $pile[$i]\
    \ = $odd_count + $even_count;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxmjpen6.php:35\n\
    Stack trace:\n#0 /tmp/tmpdxmjpen6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdxmjpen6.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpabi3e8qo.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[$i] =\
    \ $i + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6pcw4re.php:25\n\
    Stack trace:\n#0 /tmp/tmpx6pcw4re.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx6pcw4re.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx5buv2yc.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + 1;\n    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[3] = $n % 2 == 0\
    \ ? $n + 1 : $n;\n    $pile[4] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[5] = $n\
    \ % 2 == 0 ? $n + 1 : $n;\n    $pile[6] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[7]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[8] = $n % 2 == 0 ? $n + 1 : $n;\n  \
    \  $pile[9] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[10] = $n % 2 == 0 ? $n + 1\
    \ : $n;\n    $pile[11] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[12] = $n % 2 ==\
    \ 0 ? $n + 1 : $n;\n    $pile[13] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[14]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[15] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[16] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[17] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[18] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[19] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[20] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[21]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[22] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[23] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[24] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[25] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[26] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[27] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[28]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[29] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[30] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[31] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[32] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7clckttu.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvzf86yct.php:25\n\
    Stack trace:\n#0 /tmp/tmpvzf86yct.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvzf86yct.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvibqd8qw.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n / 2) + 1;\n    } else {\n        $pile[1] = ($n / 2) + 1;\n        $pile[2]\
    \ = ($n / 2) + 1;\n    }\n    for ($i = 3; $i <= $n; $i += 2) {\n        $pile[$i]\
    \ = ($n / 2) + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0ldwm8l.php:32\n\
    Stack trace:\n#0 /tmp/tmpc0ldwm8l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc0ldwm8l.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n;\n    $pile[2] =\
    \ $n;\n    $pile[3] = $n;\n    $pile[4] = $n;\n    $pile[5] = $n;\n    $pile[6]\
    \ = $n;\n    $pile[7] = $n;\n    $pile[8] = $n;\n    $pile[9] = $n;\n    $pile[10]\
    \ = $n;\n    $pile[11] = $n;\n    $pile[12] = $n;\n    $pile[13] = $n;\n    $pile[14]\
    \ = $n;\n    $pile[15] = $n;\n    $pile[16] = $n;\n    $pile[17] = $n;\n    $pile[18]\
    \ = $n;\n    $pile[19] = $n;\n    $pile[20] = $n;\n    $pile[21] = $n;\n    $pile[22]\
    \ = $n;\n    $pile[23] = $n;\n    $pile[24] = $n;\n    $pile[25] = $n;\n    $pile[26]\
    \ = $n;\n    $pile[27] = $n;\n    $pile[28] = $n;\n    $pile[29] = $n;\n    $pile[30]\
    \ = $n;\n    $pile[31] = $n;\n    $pile[32] = $n;\n    $pile[33] = $n;\n    $pile[34]\
    \ = $n;\n    $pile[35] = $n;\n    $pile[36] = $n;\n    $pile[37] = $n;\n    $pile[38]\
    \ = $n;\n    $pile[39] = $n;\n    $pile[40] = $n;\n    $pile[41] = $n;\n    $pile[42]\
    \ = $n;\n    $pile[43] = $n;\n    $pile[44] = $n;\n    $pile[45] = $n;\n    $pile[46]\
    \ = $n;\n    $pile[47] = $n;\n    $pile[48] = $n;\n    $pile[49] = $n;\n    $pile[50]\
    \ = $n;\n    $pile[51] = $n;\n    $pile[52] = $n;\n    $pile[53] = $n;\n    $pile[54]\
    \ = $n;\n    $pile[55] = $n;\n    $pile[56] = $n;\n    $pile[57] = $n;\n    $pile[58]\
    \ = \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpof_mn768.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvurepvjm.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[$i] =\
    \ $i + 1;\n    }\n    if ($n % 2 == 0) {\n        $pile[$n] = $pile[$n] + 1;\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdbkedjd.php:28\n\
    Stack trace:\n#0 /tmp/tmprdbkedjd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprdbkedjd.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzmndts93.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n + ($n % 2 == 0 ?\
    \ 1 : 0);\n    $pile[2] = $n + ($n % 2 == 0 ? 2 : 0);\n    $pile[3] = $n + ($n\
    \ % 2 == 0 ? 3 : 0);\n    $pile[4] = $n + ($n % 2 == 0 ? 4 : 0);\n    $pile[5]\
    \ = $n + ($n % 2 == 0 ? 5 : 0);\n    $pile[6] = $n + ($n % 2 == 0 ? 6 : 0);\n\
    \    $pile[7] = $n + ($n % 2 == 0 ? 7 : 0);\n    $pile[8] = $n + ($n % 2 == 0\
    \ ? 8 : 0);\n    $pile[9] = $n + ($n % 2 == 0 ? 9 : 0);\n    $pile[10] = $n +\
    \ ($n % 2 == 0 ? 10 : 0);\n    $pile[11] = $n + ($n % 2 == 0 ? 11 : 0);\n    $pile[12]\
    \ = $n + ($n % 2 == 0 ? 12 : 0);\n    $pile[13] = $n + ($n % 2 == 0 ? 13 : 0);\n\
    \    $pile[14] = $n + ($n % 2 == 0 ? 14 : 0);\n    $pile[15] = $n + ($n % 2 ==\
    \ 0 ? 15 : 0);\n    $pile[16] = $n + ($n % 2 == 0 ? 16 : 0);\n    $pile[17] =\
    \ $n + ($n % 2 == 0 ? 17 : 0);\n    $pile[18] = $n + ($n % 2 == 0 ? 18 : 0);\n\
    \    $pile[19] = $n + ($n % 2 == 0 ? 19 : 0);\n    $pile[20] = $n + ($n % 2 ==\
    \ 0 ? 20 : 0);\n    $pile[21] = $n + ($n % 2 == 0 ? 21 : 0);\n    $pile[22] =\
    \ $n + ($n % 2 == 0 ? 22 : 0);\n    $pile[23] = $n + ($n % 2 == 0 ? 23 : 0);\n\
    \    $pile[24] = $n + ($n % 2 == 0 ? 24 : 0);\n    $pile[25] = $n + ($n % 2 ==\
    \ 0 ? 25 : 0);\n    $pile[26] = $n + ($n % 2 == 0 ? 26 : 0);\n    $pile[27] =\
    \ $n + ($n % 2 == 0 ? 27 : 0);\n    $pile[28] = $n + ($n % 2 == 0 ? 28 : 0);\n\
    \    $pile[29] = $n + ($n % 2 == 0 ? 29 : 0);\n    $pile[30] = $n + ($n % 2 ==\
    \ 0 ? 30 : 0);\n    $pile[31] = $n \nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp119jadu2.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : 2\
    \ * $n;\n    $pile[2] = $n % 2 == 0 ? $n : 3 * $n;\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu03na1d.php:25\n\
    Stack trace:\n#0 /tmp/tmpzu03na1d.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzu03na1d.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprnjmv7_u.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = $n / 2;\n    } else {\n        $pile[1] = $n / 2 + 1;\n    }\n    for ($i\
    \ = 2; $i < $n; $i++) {\n        $pile[$i] = $pile[$i - 1] + $pile[$i - 2];\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqaiqkzj.php:31\n\
    Stack trace:\n#0 /tmp/tmpbqaiqkzj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbqaiqkzj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfzxok10t.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjm623vot.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + 1;\n    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[3] = $n % 2 == 0\
    \ ? $n + 1 : $n;\n    $pile[4] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[5] = $n\
    \ % 2 == 0 ? $n + 1 : $n;\n    $pile[6] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[7]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[8] = $n % 2 == 0 ? $n + 1 : $n;\n  \
    \  $pile[9] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[10] = $n % 2 == 0 ? $n + 1\
    \ : $n;\n    $pile[11] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[12] = $n % 2 ==\
    \ 0 ? $n + 1 : $n;\n    $pile[13] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[14]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[15] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[16] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[17] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[18] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[19] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[20] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[21]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[22] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[23] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[24] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[25] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[26] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[27] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[28]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[29] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[30] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[31] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[32] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpio0xpvc_.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp78x_io17.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8vpxktgi.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[12] = $n % 2 ? $n + 1 : $n;\n    $pile[13] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[14] = $n % 2 ? $n + 1 : $n;\n    $pile[15] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[16] = $n % 2 ? $n + 1 : $n;\n    $pile[17] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[18] = $n % 2 ? $n + 1 : $n;\n    $pile[19] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[20] = $n % 2 ? $n + 1 : $n;\n    $pile[21] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[22] = $n % 2 ? $n + 1 : $n;\n    $pile[23] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[24] = $n % 2 ? $n + 1 : $n;\n    $pile[25] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 1 : $n;\n    $pile[27] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 1 : $n;\n    $pile[29] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 1 : $n;\n    $pile[31] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[32] = $n % 2 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjhfs81ho.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $odd = $n%2;\n    $even = $n%2;\n  \
    \  $n = $n/2;\n    for($i = 1; $i < $n; $i++) {\n        if($odd) {\n        \
    \    $pile[$i] = $pile[$i-1] + $i;\n        } else {\n            $pile[$i] =\
    \ $pile[$i-1] + $i;\n        }\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91ksjr0h.php:33\n\
    Stack trace:\n#0 /tmp/tmp91ksjr0h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp91ksjr0h.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $odd_count = 1;\n    $even_count = 1;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $even_count += $pile[$i];\n        }\
    \ else {\n            $odd_count += $pile[$i];\n        }\n        $pile[$i] =\
    \ $odd_count + $even_count;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7840rbvg.php:35\n\
    Stack trace:\n#0 /tmp/tmp7840rbvg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7840rbvg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4ic6gqsy.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[$i] =\
    \ $i + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_cgsvpj.php:25\n\
    Stack trace:\n#0 /tmp/tmp0_cgsvpj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0_cgsvpj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmwii3ic6.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppifsp5tx.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv125p7z4.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n & 1;\n    $even = !$odd;\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $pile[] = $odd ? $i + 1 : $i;\n  \
    \      $odd = !$odd;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjipzrp9h.php:29\n\
    Stack trace:\n#0 /tmp/tmpjipzrp9h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjipzrp9h.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd2cqr7b1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq73mk8jk.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : 2\
    \ * $n;\n    $pile[2] = $n % 2 == 0 ? $n : 3 * $n;\n    $pile[3] = $n % 2 == 0\
    \ ? $n : 4 * $n;\n    return $pile;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqs4eslh.php:26\n\
    Stack trace:\n#0 /tmp/tmpkqs4eslh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkqs4eslh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n+1)/2;\n    } else {\n        $pile[1] = ($n+1)/2;\n    }\n    for ($i\
    \ = 2; $i < $n; $i++) {\n        $pile[$i] = $pile[$i-1] + $pile[$i-2];\n    }\n\
    \    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp275ugv83.php:31\n\
    Stack trace:\n#0 /tmp/tmp275ugv83.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp275ugv83.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwashhvlp.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n % 2;\n    $even = $n %\
    \ 2 === 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($odd) {\n         \
    \   $pile[] = $i + 1;\n            $odd = !$odd;\n        } else {\n         \
    \   $pile[] = $i;\n            $even = !$even;\n        }\n    }\n    return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z7vq890.php:34\n\
    Stack trace:\n#0 /tmp/tmp8z7vq890.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8z7vq890.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdwd343rt.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = $n / 2;\n    } else {\n        $pile[1] = $n / 2 + 1;\n    }\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $pile[$i] = $pile[$i - 1] + $pile[$i - 2];\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez4ez5tc.php:31\n\
    Stack trace:\n#0 /tmp/tmpez4ez5tc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpez4ez5tc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = ($n % 2 == 0) ? $n :\
    \ $n + 1;\n    $pile[2] = ($n % 2 == 0) ? $n + 1 : $n + 2;\n    $pile[3] = ($n\
    \ % 2 == 0) ? $n + 2 : $n + 3;\n    $pile[4] = ($n % 2 == 0) ? $n + 3 : $n + 4;\n\
    \    $pile[5] = ($n % 2 == 0) ? $n + 4 : $n + 5;\n    $pile[6] = ($n % 2 == 0)\
    \ ? $n + 5 : $n + 6;\n    $pile[7] = ($n % 2 == 0) ? $n + 6 : $n + 7;\n    $pile[8]\
    \ = ($n % 2 == 0) ? $n + 7 : $n + 8;\n    $pile[9] = ($n % 2 == 0) ? $n + 8 :\
    \ $n + 9;\n    $pile[10] = ($n % 2 == 0) ? $n + 9 : $n + 10;\n    $pile[11] =\
    \ ($n % 2 == 0) ? $n + 10 : $n + 11;\n    $pile[12] = ($n % 2 == 0) ? $n + 11\
    \ : $n + 12;\n    $pile[13] = ($n % 2 == 0) ? $n + 12 : $n + 13;\n    $pile[14]\
    \ = ($n % 2 == 0) ? $n + 13 : $n + 14;\n    $pile[15] = ($n % 2 == 0) ? $n + 14\
    \ : $n + 15;\n    $pile[16] = ($n % 2 == 0) ? $n + 15 : $n + 16;\n    $pile[17]\
    \ = ($n % 2 == 0) ? $n + 16 : $n + 17;\n    $pile[18] = ($n % 2 == 0) ? $n + 17\
    \ : $n + 18;\n    $pile[19] = ($n % 2 == 0) ? $n + 18 : $n + 19;\n    $pile[20]\
    \ = ($n % 2 == 0) ? $n + 19 : $n + 20;\n    $pile[21] = ($n % 2 == 0) ? $n + 20\
    \ : $n + 21;\n    $pile[22] = ($n % 2 == 0) ? $n + 21 : $n + 22;\n    $pile[23]\
    \ = ($n % 2 == 0) ? $n + 22 : $n + 23;\n    $pile[24] = ($n % 2 == 0) ? $n + 23\
    \ : $n + 24;\n    $pile[25] = ($n % 2 == 0) ? $n + 24 : $n + 25;\n    $pile[26]\
    \ = ($n % 2 == 0) ? $n + 25 : $n + 26;\n    $pile[27] = ($n % 2 == 0) ? $n + 26\
    \ : $n + 27;\n    $pile[28] = ($n % 2 == 0) ? $n + 27 : $n + 28;\n    $pile[\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqczqdpuu.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf9t9ez89.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbm1j2m6n.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n%2;\n    $even = !$odd;\n\
    \    for($i = 1; $i <= $n; $i++) {\n        $pile[] = $odd ? $i+1 : $i;\n    \
    \    $odd = !$odd;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgn1wygz.php:29\n\
    Stack trace:\n#0 /tmp/tmpfgn1wygz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfgn1wygz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyn235a15.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n \
    \   $pile[2] = $n % 2 ? $n + 1 : $n;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5x01aj9.php:25\n\
    Stack trace:\n#0 /tmp/tmpd5x01aj9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd5x01aj9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n / 2) + 1;\n    } else {\n        $pile[1] = ($n / 2);\n    }\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        $pile[$i] = $pile[$i - 1] + $pile[$i - 2];\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22guelj9.php:31\n\
    Stack trace:\n#0 /tmp/tmp22guelj9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp22guelj9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp15fcrswj.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[12] = $n % 2 ? $n + 1 : $n;\n    $pile[13] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[14] = $n % 2 ? $n + 1 : $n;\n    $pile[15] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[16] = $n % 2 ? $n + 1 : $n;\n    $pile[17] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[18] = $n % 2 ? $n + 1 : $n;\n    $pile[19] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[20] = $n % 2 ? $n + 1 : $n;\n    $pile[21] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[22] = $n % 2 ? $n + 1 : $n;\n    $pile[23] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[24] = $n % 2 ? $n + 1 : $n;\n    $pile[25] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 1 : $n;\n    $pile[27] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 1 : $n;\n    $pile[29] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 1 : $n;\n    $pile[31] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[32] = $n % 2 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl358q34x.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i + 1;\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg75thcq.php:25\n\
    Stack trace:\n#0 /tmp/tmpfg75thcq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfg75thcq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvqs4d9_b.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc8jtu_y4.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $odd_count = 1;\n    $even_count = 1;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $even_count++;\n        } else {\n  \
    \          $odd_count++;\n        }\n        $pile[$i] = $odd_count + $even_count;\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmeydyatg.php:35\n\
    Stack trace:\n#0 /tmp/tmpmeydyatg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmeydyatg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp39v2r55m.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : 2\
    \ * $n;\n    $pile[2] = $n % 2 == 0 ? $n : 3 * $n;\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_jwfxtm.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_jwfxtm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu_jwfxtm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + ($n / 2);\n    $pile[2] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[3]\
    \ = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[4] = $n % 2 == 0 ? $n / 2\
    \ : $n + ($n / 2);\n    $pile[5] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n   \
    \ $pile[6] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[7] = $n % 2 == 0\
    \ ? $n / 2 : $n + ($n / 2);\n    $pile[8] = $n % 2 == 0 ? $n / 2 : $n + ($n /\
    \ 2);\n    $pile[9] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[10] = $n\
    \ % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[11] = $n % 2 == 0 ? $n / 2 : $n\
    \ + ($n / 2);\n    $pile[12] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[13]\
    \ = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[14] = $n % 2 == 0 ? $n /\
    \ 2 : $n + ($n / 2);\n    $pile[15] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n\
    \    $pile[16] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[17] = $n % 2\
    \ == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[18] = $n % 2 == 0 ? $n / 2 : $n +\
    \ ($n / 2);\n    $pile[19] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[20]\
    \ = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[21] = $n % 2 == 0 ? $n /\
    \ 2 : $n + ($n / 2);\n    $pile[22] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n\
    \    $pile[23] = $n % 2 == 0 ? $n / 2 : $n + ($n / 2);\n    $pile[24] = $n % 2\
    \ == \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0riqlipf.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i\
    \ + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp656ycgkw.php:25\n\
    Stack trace:\n#0 /tmp/tmp656ycgkw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp656ycgkw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptgc2b1mi.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : 2 * $n;\n\
    \    $pile[2] = $n % 2 ? 2 * $n : 3 * $n;\n    $pile[3] = $n % 2 ? 3 * $n : 4\
    \ * $n;\n    $pile[4] = $n % 2 ? 4 * $n : 5 * $n;\n    $pile[5] = $n % 2 ? 5 *\
    \ $n : 6 * $n;\n    $pile[6] = $n % 2 ? 6 * $n : 7 * $n;\n    $pile[7] = $n %\
    \ 2 ? 7 * $n : 8 * $n;\n    $pile[8] = $n % 2 ? 8 * $n : 9 * $n;\n    $pile[9]\
    \ = $n % 2 ? 9 * $n : 10 * $n;\n    $pile[10] = $n % 2 ? 10 * $n : 11 * $n;\n\
    \    $pile[11] = $n % 2 ? 11 * $n : 12 * $n;\n    $pile[12] = $n % 2 ? 12 * $n\
    \ : 13 * $n;\n    $pile[13] = $n % 2 ? 13 * $n : 14 * $n;\n    $pile[14] = $n\
    \ % 2 ? 14 * $n : 15 * $n;\n    $pile[15] = $n % 2 ? 15 * $n : 16 * $n;\n    $pile[16]\
    \ = $n % 2 ? 16 * $n : 17 * $n;\n    $pile[17] = $n % 2 ? 17 * $n : 18 * $n;\n\
    \    $pile[18] = $n % 2 ? 18 * $n : 19 * $n;\n    $pile[19] = $n % 2 ? 19 * $n\
    \ : 20 * $n;\n    $pile[20] = $n % 2 ? 20 * $n : 21 * $n;\n    $pile[21] = $n\
    \ % 2 ? 21 * $n : 22 * $n;\n    $pile[22] = $n % 2 ? 22 * $n : 23 * $n;\n    $pile[23]\
    \ = $n % 2 ? 23 * $n : 24 * $n;\n    $pile[24] = $n % 2 ? 24 * $n : 25 * $n;\n\
    \    $pile[25] = $n % 2 ? 25 * $n : 26 * $n;\n    $pile[26] = $n % 2 ? 26 * $n\
    \ : 27 * $n;\n    $pile[27] = $\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5v0bry4i.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[$i] =\
    \ $i + 1;\n    }\n    if ($n % 2 == 0) {\n        $pile[$n] = $n - 1;\n    }\n\
    \    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzabo4bp_.php:28\n\
    Stack trace:\n#0 /tmp/tmpzabo4bp_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzabo4bp_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $odd = $n & 1;\n    $even = $n >> 1;\n\
    \    $nextOdd = $odd ? $odd : $even;\n    $nextEven = $even ? $even : $odd;\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $pile[$i] = $nextOdd;\n        $nextOdd\
    \ = $nextEven;\n        $nextEven = $nextOdd * 2;\n    }\n    return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk70adkzz.php:32\n\
    Stack trace:\n#0 /tmp/tmpk70adkzz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpk70adkzz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4ccdo1ex.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[12] = $n % 2 ? $n + 1 : $n;\n    $pile[13] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[14] = $n % 2 ? $n + 1 : $n;\n    $pile[15] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[16] = $n % 2 ? $n + 1 : $n;\n    $pile[17] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[18] = $n % 2 ? $n + 1 : $n;\n    $pile[19] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[20] = $n % 2 ? $n + 1 : $n;\n    $pile[21] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[22] = $n % 2 ? $n + 1 : $n;\n    $pile[23] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[24] = $n % 2 ? $n + 1 : $n;\n    $pile[25] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 1 : $n;\n    $pile[27] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 1 : $n;\n    $pile[29] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 1 : $n;\n    $pile[31] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[32] = $n % 2 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptgk1y6bf.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbdxs7x71.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj63h9x2u.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr111elp5.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5pf0cyf1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[12] = $n % 2 ? $n + 1 : $n;\n    $pile[13] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[14] = $n % 2 ? $n + 1 : $n;\n    $pile[15] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[16] = $n % 2 ? $n + 1 : $n;\n    $pile[17] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[18] = $n % 2 ? $n + 1 : $n;\n    $pile[19] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[20] = $n % 2 ? $n + 1 : $n;\n    $pile[21] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[22] = $n % 2 ? $n + 1 : $n;\n    $pile[23] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[24] = $n % 2 ? $n + 1 : $n;\n    $pile[25] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 1 : $n;\n    $pile[27] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 1 : $n;\n    $pile[29] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 1 : $n;\n    $pile[31] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[32] = $n % 2 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu_p3ksz0.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplc4npz1r.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp36blgs1h.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmput8jxk0r.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = $n / 2;\n    } else {\n        $pile[1] = ($n + 1) / 2;\n    }\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $pile[$i] = $pile[$i - 1] + $pile[$i - 2];\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ktpb7x4.php:31\n\
    Stack trace:\n#0 /tmp/tmp4ktpb7x4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4ktpb7x4.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[3] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[4] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ==\
    \ 0 ? $n + 1 : $n;\n    $pile[6] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[7] =\
    \ $n % 2 == 0 ? $n + 1 : $n;\n    $pile[8] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[9]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[10] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[11] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[12] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[13] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[14] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[15] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[16]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[17] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[18] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[19] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[20] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[21] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[22] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[23]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[24] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[25] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[26] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[27] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[28] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[29] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[30]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[31] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[32] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[33\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp64kz4n7u.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n;\n    $pile[2] = $n;\n\
    \    $pile[3] = $n;\n    $pile[4] = $n;\n    $pile[5] = $n;\n    $pile[6] = $n;\n\
    \    $pile[7] = $n;\n    $pile[8] = $n;\n    $pile[9] = $n;\n    $pile[10] = $n;\n\
    \    $pile[11] = $n;\n    $pile[12] = $n;\n    $pile[13] = $n;\n    $pile[14]\
    \ = $n;\n    $pile[15] = $n;\n    $pile[16] = $n;\n    $pile[17] = $n;\n    $pile[18]\
    \ = $n;\n    $pile[19] = $n;\n    $pile[20] = $n;\n    $pile[21] = $n;\n    $pile[22]\
    \ = $n;\n    $pile[23] = $n;\n    $pile[24] = $n;\n    $pile[25] = $n;\n    $pile[26]\
    \ = $n;\n    $pile[27] = $n;\n    $pile[28] = $n;\n    $pile[29] = $n;\n    $pile[30]\
    \ = $n;\n    $pile[31] = $n;\n    $pile[32] = $n;\n    $pile[33] = $n;\n    $pile[34]\
    \ = $n;\n    $pile[35] = $n;\n    $pile[36] = $n;\n    $pile[37] = $n;\n    $pile[38]\
    \ = $n;\n    $pile[39] = $n;\n    $pile[40] = $n;\n    $pile[41] = $n;\n    $pile[42]\
    \ = $n;\n    $pile[43] = $n;\n    $pile[44] = $n;\n    $pile[45] = $n;\n    $pile[46]\
    \ = $n;\n    $pile[47] = $n;\n    $pile[48] = $n;\n    $pile[49] = $n;\n    $pile[50]\
    \ = $n;\n    $pile[51] = $n;\n    $pile[52] = $n;\n    $pile[53] = $n;\n    $pile[54]\
    \ = $n;\n    $pile[55] = $n;\n    $pile[56] = $n;\n    $pile[57] = $n;\n    $pile[58]\
    \ = $n;\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn3pjumzq.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp81a3mfdj.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvhde09g4.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp2gdb5zr.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmzwngi5v.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6_h248gt.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i\
    \ + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uqxg_wv.php:25\n\
    Stack trace:\n#0 /tmp/tmp2uqxg_wv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uqxg_wv.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6zf01kmi.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $pile[] = is_odd($n) ? $n : 2 *\
    \ $n;\n    $pile[] = is_even($n) ? $n : 3 * $n;\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_odd() in /tmp/tmptmjq50ff.php:15\n\
    Stack trace:\n#0 /tmp/tmptmjq50ff.php(21): make_a_pile(3)\n#1 /tmp/tmptmjq50ff.php(25):\
    \ candidate(3)\n#2 /tmp/tmptmjq50ff.php(32): test()\n#3 {main}\n  thrown in /tmp/tmptmjq50ff.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6uh6hi19.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbx2h4_b_.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : 2 * $n;\n\
    \    $pile[2] = $n % 2 == 0 ? $n : 3 * $n;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr0j9qs1.php:25\n\
    Stack trace:\n#0 /tmp/tmpwr0j9qs1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwr0j9qs1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqrf94id.php:25\n\
    Stack trace:\n#0 /tmp/tmpwqrf94id.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwqrf94id.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzdlybs30.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n%2;\n    $even = !$odd;\n\
    \    for($i = 1; $i <= $n; $i++) {\n        $pile[] = $odd ? $i%2 : $even;\n \
    \   }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprs72u_2w.php:28\n\
    Stack trace:\n#0 /tmp/tmprs72u_2w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprs72u_2w.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp16_f5lsh.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe7f4f0kg.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpewjlrrp1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnuywtg95.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcuuklk_z.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n / 2) + 1;\n    } else {\n        $pile[1] = ($n / 2) + 1;\n        $pile[2]\
    \ = ($n / 2) + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpukv3y05b.php:29\n\
    Stack trace:\n#0 /tmp/tmpukv3y05b.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpukv3y05b.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppkh6mtcm.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n+1)/2;\n    } else {\n        $pile[1] = ($n+1)/2;\n    }\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $pile[$i] = $pile[$i-1] + $pile[$i-2];\n   \
    \ }\n    return $pile;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppu50zy1t.php:30\n\
    Stack trace:\n#0 /tmp/tmppu50zy1t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppu50zy1t.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[] = $n;\n    $count = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $pile[] = $count;\n       \
    \     $count = 1;\n        } else {\n            $count++;\n        }\n    }\n\
    \    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcew12_e2.php:32\n\
    Stack trace:\n#0 /tmp/tmpcew12_e2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcew12_e2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[12] = $n % 2 ? $n + 1 : $n;\n    $pile[13] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[14] = $n % 2 ? $n + 1 : $n;\n    $pile[15] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[16] = $n % 2 ? $n + 1 : $n;\n    $pile[17] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[18] = $n % 2 ? $n + 1 : $n;\n    $pile[19] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[20] = $n % 2 ? $n + 1 : $n;\n    $pile[21] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[22] = $n % 2 ? $n + 1 : $n;\n    $pile[23] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[24] = $n % 2 ? $n + 1 : $n;\n    $pile[25] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 1 : $n;\n    $pile[27] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 1 : $n;\n    $pile[29] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 1 : $n;\n    $pile[31] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[32] = $n % 2 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7xfpktcs.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $even = $n % 2 == 0;\n    $odd = !$even;\n\
    \    $next_odd = $odd ? $n + 1 : $n;\n    $next_even = $even ? $n + 1 : $n;\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $pile[$i] = $odd ? $next_odd : $next_even;\n\
    \        $next_odd = $odd ? $next_odd + 1 : $next_even;\n        $next_even =\
    \ $even ? $next_even + 1 : $next_odd;\n    }\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizpvzhat.php:32\n\
    Stack trace:\n#0 /tmp/tmpizpvzhat.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpizpvzhat.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg1bmr884.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[] = $n;\n    $odd = $n%2;\n    $even = !$odd;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $pile[] = $odd ? $i+1 : $i;\n      \
    \  $odd = !$odd;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp20n5bx0.php:29\n\
    Stack trace:\n#0 /tmp/tmpp20n5bx0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp20n5bx0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $odd_count = 1;\n    $even_count = 1;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $even_count += $pile[$i];\n        }\
    \ else {\n            $odd_count += $pile[$i];\n        }\n    }\n    $pile[$n]\
    \ = $odd_count + $even_count;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7iyk1mg.php:35\n\
    Stack trace:\n#0 /tmp/tmpn7iyk1mg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn7iyk1mg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7wmuhio1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[$i] =\
    \ $i + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdriklv1.php:25\n\
    Stack trace:\n#0 /tmp/tmphdriklv1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphdriklv1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3ig_qdpa.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphpt49u9e.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpztjkhndb.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n % 2;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $pile[] = $odd ? $i + 1 : $i;\n        $odd = !$odd;\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9pgdvgx.php:28\n\
    Stack trace:\n#0 /tmp/tmpz9pgdvgx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpz9pgdvgx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsizc1vxp.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf4zc_cxb.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpauqvkt41.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ - 1;\n    $pile[2] = $n % 2 == 0 ? $n - 1 : $n;\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcd78j_n.php:25\n\
    Stack trace:\n#0 /tmp/tmpmcd78j_n.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmcd78j_n.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfrgm6eyj.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvxsvojem.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqwuwzmlp.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n / 2) + 1;\n    } else {\n        $pile[1] = ($n / 2) + 1;\n        $pile[2]\
    \ = ($n / 2) + 1;\n    }\n    for ($i = 3; $i <= $n; $i++) {\n        $pile[$i]\
    \ = $pile[$i - 1] + $pile[$i - 2];\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9b7obds.php:32\n\
    Stack trace:\n#0 /tmp/tmpj9b7obds.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpj9b7obds.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = ($n % 2 == 0) ? $n :\
    \ $n + 1;\n    $pile[2] = ($n % 2 == 0) ? $n + 1 : $n;\n    return $pile;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsaz_8kyr.php:25\n\
    Stack trace:\n#0 /tmp/tmpsaz_8kyr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsaz_8kyr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpygds7i3q.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n;\n    $pile[2] =\
    \ $n;\n    $pile[3] = $n;\n    $pile[4] = $n;\n    $pile[5] = $n;\n    $pile[6]\
    \ = $n;\n    $pile[7] = $n;\n    $pile[8] = $n;\n    $pile[9] = $n;\n    $pile[10]\
    \ = $n;\n    $pile[11] = $n;\n    $pile[12] = $n;\n    $pile[13] = $n;\n    $pile[14]\
    \ = $n;\n    $pile[15] = $n;\n    $pile[16] = $n;\n    $pile[17] = $n;\n    $pile[18]\
    \ = $n;\n    $pile[19] = $n;\n    $pile[20] = $n;\n    $pile[21] = $n;\n    $pile[22]\
    \ = $n;\n    $pile[23] = $n;\n    $pile[24] = $n;\n    $pile[25] = $n;\n    $pile[26]\
    \ = $n;\n    $pile[27] = $n;\n    $pile[28] = $n;\n    $pile[29] = $n;\n    $pile[30]\
    \ = $n;\n    $pile[31] = $n;\n    $pile[32] = $n;\n    $pile[33] = $n;\n    $pile[34]\
    \ = $n;\n    $pile[35] = $n;\n    $pile[36] = $n;\n    $pile[37] = $n;\n    $pile[38]\
    \ = $n;\n    $pile[39] = $n;\n    $pile[40] = $n;\n    $pile[41] = $n;\n    $pile[42]\
    \ = $n;\n    $pile[43] = $n;\n    $pile[44] = $n;\n    $pile[45] = $n;\n    $pile[46]\
    \ = $n;\n    $pile[47] = $n;\n    $pile[48] = $n;\n    $pile[49] = $n;\n    $pile[50]\
    \ = $n;\n    $pile[51] = $n;\n    $pile[52] = $n;\n    $pile[53] = $n;\n    $pile[54]\
    \ = $n;\n    $pile[55] = $n;\n    $pile[56] = $n;\n    $pile[57] = $n;\n    $pile[58]\
    \ = \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6j0qrt26.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj3tx3dc1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i\
    \ + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_j6g052.php:25\n\
    Stack trace:\n#0 /tmp/tmpv_j6g052.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpv_j6g052.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n \
    \   $pile[2] = $n % 2 ? $n + 1 : $n;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthjc7xmw.php:25\n\
    Stack trace:\n#0 /tmp/tmpthjc7xmw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpthjc7xmw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n % 2;\n    $even = !$odd;\n\
    \    $next_odd = $odd ? $n+1 : $n;\n    $next_even = $even ? $n+1 : $n;\n    for($i\
    \ = 1; $i <= $n; $i++) {\n        $pile[] = $next_odd;\n        $next_odd = $next_odd\
    \ % 2 ? $next_odd : $next_even;\n        $next_even = $next_even % 2 ? $next_even\
    \ : $next_odd;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpguoln6f2.php:32\n\
    Stack trace:\n#0 /tmp/tmpguoln6f2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpguoln6f2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpinr0_31c.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : 2 * $n;\n\
    \    $pile[2] = $n % 2 == 0 ? $n : 3 * $n;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhrvgtdm.php:25\n\
    Stack trace:\n#0 /tmp/tmpvhrvgtdm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvhrvgtdm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i\
    \ + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7k3k36hb.php:25\n\
    Stack trace:\n#0 /tmp/tmp7k3k36hb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7k3k36hb.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7oiyi8rj.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $pile[] = $i;\n        } else {\n            $pile[] = $i\
    \ + 1;\n        }\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmna183a.php:29\n\
    Stack trace:\n#0 /tmp/tmpqmna183a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqmna183a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n;\n    $pile[2] =\
    \ $n;\n    $pile[3] = $n;\n    $pile[4] = $n;\n    $pile[5] = $n;\n    $pile[6]\
    \ = $n;\n    $pile[7] = $n;\n    $pile[8] = $n;\n    $pile[9] = $n;\n    $pile[10]\
    \ = $n;\n    $pile[11] = $n;\n    $pile[12] = $n;\n    $pile[13] = $n;\n    $pile[14]\
    \ = $n;\n    $pile[15] = $n;\n    $pile[16] = $n;\n    $pile[17] = $n;\n    $pile[18]\
    \ = $n;\n    $pile[19] = $n;\n    $pile[20] = $n;\n    $pile[21] = $n;\n    $pile[22]\
    \ = $n;\n    $pile[23] = $n;\n    $pile[24] = $n;\n    $pile[25] = $n;\n    $pile[26]\
    \ = $n;\n    $pile[27] = $n;\n    $pile[28] = $n;\n    $pile[29] = $n;\n    $pile[30]\
    \ = $n;\n    $pile[31] = $n;\n    $pile[32] = $n;\n    $pile[33] = $n;\n    $pile[34]\
    \ = $n;\n    $pile[35] = $n;\n    $pile[36] = $n;\n    $pile[37] = $n;\n    $pile[38]\
    \ = $n;\n    $pile[39] = $n;\n    $pile[40] = $n;\n    $pile[41] = $n;\n    $pile[42]\
    \ = $n;\n    $pile[43] = $n;\n    $pile[44] = $n;\n    $pile[45] = $n;\n    $pile[46]\
    \ = $n;\n    $pile[47] = $n;\n    $pile[48] = $n;\n    $pile[49] = $n;\n    $pile[50]\
    \ = $n;\n    $pile[51] = $n;\n    $pile[52] = $n;\n    $pile[53] = $n;\n    $pile[54]\
    \ = $n;\n    $pile[55] = $n;\n    $pile[56] = $n;\n    $pile[57] = $n;\n    $pile[58]\
    \ = \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy0uwvb1m.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo8z3cymm.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $odd_count = 0;\n    $even_count = 0;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $even_count++;\n        } else {\n  \
    \          $odd_count++;\n        }\n        $pile[$i] = $odd_count + $even_count;\n\
    \    }\n    return $pile;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt5b2srrd.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[3] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[4] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ==\
    \ 0 ? $n + 1 : $n;\n    $pile[6] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[7] =\
    \ $n % 2 == 0 ? $n + 1 : $n;\n    $pile[8] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[9]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[10] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[11] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[12] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[13] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[14] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[15] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[16]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[17] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[18] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[19] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[20] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[21] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[22] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[23]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[24] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[25] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[26] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[27] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[28] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[29] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[30]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[31] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[32] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[33\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfnugeb36.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n + ($n % 2 == 0 ?\
    \ 1 : 0);\n    $pile[2] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[3] = $n + ($n\
    \ % 2 == 0 ? 1 : 0);\n    $pile[4] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[5]\
    \ = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[6] = $n + ($n % 2 == 1 ? 1 : 0);\n\
    \    $pile[7] = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[8] = $n + ($n % 2 == 1\
    \ ? 1 : 0);\n    $pile[9] = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[10] = $n +\
    \ ($n % 2 == 1 ? 1 : 0);\n    $pile[11] = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[12]\
    \ = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[13] = $n + ($n % 2 == 0 ? 1 : 0);\n\
    \    $pile[14] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[15] = $n + ($n % 2 ==\
    \ 0 ? 1 : 0);\n    $pile[16] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[17] = $n\
    \ + ($n % 2 == 0 ? 1 : 0);\n    $pile[18] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[19]\
    \ = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[20] = $n + ($n % 2 == 1 ? 1 : 0);\n\
    \    $pile[21] = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[22] = $n + ($n % 2 ==\
    \ 1 ? 1 : 0);\n    $pile[23] = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[24] = $n\
    \ + ($n % 2 == 1 ? 1 : 0);\n    $pile[25] = $n + ($n % 2 == 0 ? 1 : 0);\n    $pile[26]\
    \ = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[27] = $n + ($n % 2 == 0 ? 1 : 0);\n\
    \    $pile[28] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[29] = $n + ($n % 2 ==\
    \ 0 ? 1 : 0);\n    $pile[30] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile[31] = $n\
    \ + ($n % 2 == 0 ? 1 : 0);\n    $pile[32] = $n + ($n % 2 == 1 ? 1 : 0);\n    $pile\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprpx01gb4.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i + 1;\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprclm7asp.php:25\n\
    Stack trace:\n#0 /tmp/tmprclm7asp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprclm7asp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n : $n + 2;\n\
    \    $pile[4] = $n % 2 ? $n + 2 : $n;\n    $pile[5] = $n % 2 ? $n : $n + 3;\n\
    \    $pile[6] = $n % 2 ? $n + 3 : $n;\n    $pile[7] = $n % 2 ? $n : $n + 4;\n\
    \    $pile[8] = $n % 2 ? $n + 4 : $n;\n    $pile[9] = $n % 2 ? $n : $n + 5;\n\
    \    $pile[10] = $n % 2 ? $n + 5 : $n;\n    $pile[11] = $n % 2 ? $n : $n + 6;\n\
    \    $pile[12] = $n % 2 ? $n + 6 : $n;\n    $pile[13] = $n % 2 ? $n : $n + 7;\n\
    \    $pile[14] = $n % 2 ? $n + 7 : $n;\n    $pile[15] = $n % 2 ? $n : $n + 8;\n\
    \    $pile[16] = $n % 2 ? $n + 8 : $n;\n    $pile[17] = $n % 2 ? $n : $n + 9;\n\
    \    $pile[18] = $n % 2 ? $n + 9 : $n;\n    $pile[19] = $n % 2 ? $n : $n + 10;\n\
    \    $pile[20] = $n % 2 ? $n + 10 : $n;\n    $pile[21] = $n % 2 ? $n : $n + 11;\n\
    \    $pile[22] = $n % 2 ? $n + 11 : $n;\n    $pile[23] = $n % 2 ? $n : $n + 12;\n\
    \    $pile[24] = $n % 2 ? $n + 12 : $n;\n    $pile[25] = $n % 2 ? $n + 12 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 12 : $n;\n    $pile[27] = $n % 2 ? $n + 12 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 12 : $n;\n    $pile[29] = $n % 2 ? $n + 12 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 12 : $n;\n    $pile[31] = $n % 2 ? $n + 12 : $n;\n\
    \    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmod5gsfu.php:54\n\
    Stack trace:\n#0 /tmp/tmpmod5gsfu.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpmod5gsfu.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn3tb_uo1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $count = 1;\n    $nextOdd = $nextEven\
    \ = $n;\n    while ($nextOdd > 0 && $nextEven > 0) {\n        if ($nextOdd % 2\
    \ == 0) {\n            $nextEven = $nextEven / 2;\n        } else {\n        \
    \    $nextOdd = $nextOdd / 2;\n        }\n        $pile[] = $nextEven;\n     \
    \   $count++;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4_gkf_0.php:34\n\
    Stack trace:\n#0 /tmp/tmpi4_gkf_0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi4_gkf_0.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = ($n % 2 == 0) ? $n : $n +\
    \ 1;\n    $pile[2] = ($n % 2 == 0) ? $n + 1 : $n;\n    $pile[3] = ($n % 2 == 0)\
    \ ? $n : $n + 1;\n    $pile[4] = ($n % 2 == 0) ? $n + 1 : $n;\n    $pile[5] =\
    \ ($n % 2 == 0) ? $n : $n + 1;\n    $pile[6] = ($n % 2 == 0) ? $n : $n + 1;\n\
    \    $pile[7] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[8] = ($n % 2 == 0) ? $n\
    \ : $n + 1;\n    $pile[9] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[10] = ($n\
    \ % 2 == 0) ? $n : $n + 1;\n    $pile[11] = ($n % 2 == 0) ? $n : $n + 1;\n   \
    \ $pile[12] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[13] = ($n % 2 == 0) ? $n\
    \ : $n + 1;\n    $pile[14] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[15] = ($n\
    \ % 2 == 0) ? $n : $n + 1;\n    $pile[16] = ($n % 2 == 0) ? $n : $n + 1;\n   \
    \ $pile[17] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[18] = ($n % 2 == 0) ? $n\
    \ : $n + 1;\n    $pile[19] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[20] = ($n\
    \ % 2 == 0) ? $n : $n + 1;\n    $pile[21] = ($n % 2 == 0) ? $n : $n + 1;\n   \
    \ $pile[22] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[23] = ($n % 2 == 0) ? $n\
    \ : $n + 1;\n    $pile[24] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[25] = ($n\
    \ % 2 == 0) ? $n : $n + 1;\n    $pile[26] = ($n % 2 == 0) ? $n : $n + 1;\n   \
    \ $pile[27] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[28] = ($n % 2 == 0) ? $n\
    \ : $n + 1;\n    $pile[29] = ($n % 2 == 0) ? $n : $n + 1;\n    $pile[30] = ($n\
    \ % 2 == 0) ? $n : $n + 1;\n    $pile[31] = ($n % 2 == 0) ? $n : $n + 1;\n   \
    \ $pile[32] = ($n % 2 == 0) ? $n : $n + 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp09l2bxdw.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + 1;\n    $pile[2] = $n % 2 == 0 ? $n - 1 : $n - 2;\n    return $pile;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d9v63uh.php:25\n\
    Stack trace:\n#0 /tmp/tmp_d9v63uh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_d9v63uh.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5hvpykvw.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpomtvsiiy.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0awdqon1.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $odd_count = 1;\n    $even_count = 1;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $even_count += $pile[$i];\n        }\
    \ else {\n            $odd_count += $pile[$i];\n        }\n        $pile[$i] =\
    \ $odd_count + $even_count;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpji675jw7.php:35\n\
    Stack trace:\n#0 /tmp/tmpji675jw7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpji675jw7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9jmvbehc.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfg2x1se6.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n / 2) + 1;\n    } else {\n        $pile[1] = ($n / 2) + 1;\n        $pile[2]\
    \ = ($n / 2) + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtlwlbge.php:29\n\
    Stack trace:\n#0 /tmp/tmpwtlwlbge.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwtlwlbge.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = $n / 2;\n    } else {\n        $pile[1] = ($n + 1) + ($n / 2);\n    }\n  \
    \  for ($i = 2; $i <= $n; $i++) {\n        $pile[$i] = $pile[$i - 1] + $pile[$i\
    \ - 2];\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_j7v4njv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_j7v4njv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_j7v4njv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbsqoe0uc.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt132d1h4.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgc37utwi.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwqv0q2_v.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw_rpju0o.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 == 0 ? $n : $n + 2;\n    $pile[3] = $n % 2 == 0 ? $n :\
    \ $n + 3;\n    $pile[4] = $n % 2 == 0 ? $n : $n + 4;\n    $pile[5] = $n % 2 ==\
    \ 0 ? $n : $n + 5;\n    $pile[6] = $n % 2 == 0 ? $n : $n + 6;\n    $pile[7] =\
    \ $n % 2 == 0 ? $n : $n + 7;\n    $pile[8] = $n % 2 == 0 ? $n : $n + 8;\n    $pile[9]\
    \ = $n % 2 == 0 ? $n : $n + 9;\n    $pile[10] = $n % 2 == 0 ? $n : $n + 10;\n\
    \    $pile[11] = $n % 2 == 0 ? $n : $n + 11;\n    $pile[12] = $n % 2 == 0 ? $n\
    \ : $n + 12;\n    $pile[13] = $n % 2 == 0 ? $n : $n + 13;\n    $pile[14] = $n\
    \ % 2 == 0 ? $n : $n + 14;\n    $pile[15] = $n % 2 == 0 ? $n : $n + 15;\n    $pile[16]\
    \ = $n % 2 == 0 ? $n : $n + 16;\n    $pile[17] = $n % 2 == 0 ? $n : $n + 17;\n\
    \    $pile[18] = $n % 2 == 0 ? $n : $n + 18;\n    $pile[19] = $n % 2 == 0 ? $n\
    \ : $n + 19;\n    $pile[20] = $n % 2 == 0 ? $n : $n + 20;\n    $pile[21] = $n\
    \ % 2 == 0 ? $n : $n + 21;\n    $pile[22] = $n % 2 == 0 ? $n : $n + 22;\n    $pile[23]\
    \ = $n % 2 == 0 ? $n : $n + 23;\n    $pile[24] = $n % 2 == 0 ? $n : $n + 24;\n\
    \    $pile[25] = $n % 2 == 0 ? $n : $n + 25;\n    $pile[26] = $n % 2 == 0 ? $n\
    \ : $n + 26;\n    $pile[27] = $n % 2 == 0 ? $n : $n + 27;\n    $pile[28] = $n\
    \ % 2 == 0 ? $n : $n + 28;\n    $pile[29] = $n % 2 == 0 ? $n : $n + 29;\n    $pile[30]\
    \ = $n % 2 == 0 ? $n : $n + 30;\n    $pile[31] = $n % 2 == 0 ? $n : $n + 31;\n\
    \    $pile[32] = $\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwpvbjp4u.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppnedvplz.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc8jjamu6.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3xrf_wna.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8wvzgfli.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcs10zmmp.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4x8ocbfk.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n%2;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        if ($i%2 == $odd) {\n            $pile[] = $i+1;\n \
    \       } else {\n            $pile[] = $i;\n        }\n    }\n    return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vk7xe87.php:31\n\
    Stack trace:\n#0 /tmp/tmp2vk7xe87.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2vk7xe87.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp478ucmac.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n % 2;\n    for ($i = 1;\
    \ $i < $n; $i++) {\n        $pile[] = $odd ? $i + 1 : $i;\n        $odd = !$odd;\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7n3xu33n.php:28\n\
    Stack trace:\n#0 /tmp/tmp7n3xu33n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7n3xu33n.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n + ($n % 2 == 0 ?\
    \ 1 : 0);\n    $pile[2] = $n + ($n % 2 == 0 ? 2 : 0);\n    return $pile;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ajgweaj.php:25\n\
    Stack trace:\n#0 /tmp/tmp9ajgweaj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9ajgweaj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_5_p0hon.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : 2\
    \ * $n;\n    $pile[2] = $n % 2 == 0 ? $n : 3 * $n;\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj31eqq0g.php:25\n\
    Stack trace:\n#0 /tmp/tmpj31eqq0g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj31eqq0g.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + 1;\n    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[3] = $n % 2 == 0\
    \ ? $n + 1 : $n;\n    $pile[4] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[5] = $n\
    \ % 2 == 0 ? $n + 1 : $n;\n    $pile[6] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[7]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[8] = $n % 2 == 0 ? $n + 1 : $n;\n  \
    \  $pile[9] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[10] = $n % 2 == 0 ? $n + 1\
    \ : $n;\n    $pile[11] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[12] = $n % 2 ==\
    \ 0 ? $n + 1 : $n;\n    $pile[13] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[14]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[15] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[16] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[17] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[18] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[19] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[20] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[21]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[22] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[23] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[24] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[25] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[26] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[27] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[28]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[29] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[30] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[31] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[32] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfl3j702n.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuwfkw8wa.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqc8yd1dg.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk8184h3c.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + ($n % 2 ? 1 : 0);\n    $pile[2] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 2 : 1);\n\
    \    $pile[3] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 3 : 2);\n    $pile[4] = $n %\
    \ 2 == 0 ? $n : $n + ($n % 2 ? 4 : 3);\n    $pile[5] = $n % 2 == 0 ? $n : $n +\
    \ ($n % 2 ? 5 : 4);\n    $pile[6] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 6 : 5);\n\
    \    $pile[7] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 7 : 6);\n    $pile[8] = $n %\
    \ 2 == 0 ? $n : $n + ($n % 2 ? 8 : 7);\n    $pile[9] = $n % 2 == 0 ? $n : $n +\
    \ ($n % 2 ? 9 : 8);\n    $pile[10] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 10 : 9);\n\
    \    $pile[11] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 11 : 10);\n    $pile[12] =\
    \ $n % 2 == 0 ? $n : $n + ($n % 2 ? 12 : 11);\n    $pile[13] = $n % 2 == 0 ? $n\
    \ : $n + ($n % 2 ? 13 : 12);\n    $pile[14] = $n % 2 == 0 ? $n : $n + ($n % 2\
    \ ? 14 : 13);\n    $pile[15] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 15 : 14);\n \
    \   $pile[16] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 16 : 15);\n    $pile[17] = $n\
    \ % 2 == 0 ? $n : $n + ($n % 2 ? 17 : 16);\n    $pile[18] = $n % 2 == 0 ? $n :\
    \ $n + ($n % 2 ? 18 : 17);\n    $pile[19] = $n % 2 == 0 ? $n : $n + ($n % 2 ?\
    \ 19 : 18);\n    $pile[20] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 20 : 19);\n   \
    \ $pile[21] = $n % 2 == 0 ? $n : $n + ($n % 2 ? 21 : 20);\n    $pile[22] = $n\
    \ % 2 == 0 ? $n : $n + ($n % 2 ? 22 : 21);\n    $pile[23] = $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8yqn1_0p.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppq6ak07z.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3751iay2.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i\
    \ + 1;\n    }\n    $odd = $n%2;\n    $even = $n%2 ? 1 : 0;\n    $pile[$odd] =\
    \ $pile[$odd] + $pile[$even];\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjroqzd_8.php:28\n\
    Stack trace:\n#0 /tmp/tmpjroqzd_8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjroqzd_8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[12] = $n % 2 ? $n : $n + 1;\n    $pile[13] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[14] = $n % 2 ? $n : $n + 1;\n    $pile[15] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[16] = $n % 2 ? $n : $n + 1;\n    $pile[17] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[18] = $n % 2 ? $n : $n + 1;\n    $pile[19] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[20] = $n % 2 ? $n : $n + 1;\n    $pile[21] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[22] = $n % 2 ? $n : $n + 1;\n    $pile[23] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[24] = $n % 2 ? $n : $n + 1;\n    $pile[25] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[26] = $n % 2 ? $n : $n + 1;\n    $pile[27] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[28] = $n % 2 ? $n : $n + 1;\n    $pile[29] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[30] = $n % 2 ? $n : $n + 1;\n    $pile[31] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[32] = $n % 2 ? $n : $n + 1;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5215h5n4.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n + ($n % 2 == 0 ?\
    \ 1 : 0);\n    $pile[2] = $n + ($n % 2 == 0 ? 2 : 0);\n    return $pile;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngiuiuna.php:25\n\
    Stack trace:\n#0 /tmp/tmpngiuiuna.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpngiuiuna.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1dhraz8r.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 ? $n + 1 : $n;\n    $pile[3] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[4] = $n % 2 ? $n + 1 : $n;\n    $pile[5] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[6] = $n % 2 ? $n + 1 : $n;\n    $pile[7] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[8] = $n % 2 ? $n + 1 : $n;\n    $pile[9] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[10] = $n % 2 ? $n + 1 : $n;\n    $pile[11] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[12] = $n % 2 ? $n + 1 : $n;\n    $pile[13] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[14] = $n % 2 ? $n + 1 : $n;\n    $pile[15] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[16] = $n % 2 ? $n + 1 : $n;\n    $pile[17] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[18] = $n % 2 ? $n + 1 : $n;\n    $pile[19] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[20] = $n % 2 ? $n + 1 : $n;\n    $pile[21] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[22] = $n % 2 ? $n + 1 : $n;\n    $pile[23] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[24] = $n % 2 ? $n + 1 : $n;\n    $pile[25] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[26] = $n % 2 ? $n + 1 : $n;\n    $pile[27] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[28] = $n % 2 ? $n + 1 : $n;\n    $pile[29] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[30] = $n % 2 ? $n + 1 : $n;\n    $pile[31] = $n % 2 ? $n + 1 : $n;\n\
    \    $pile[32] = $n % 2 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9b3d23sk.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i\
    \ + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1yyovaw.php:25\n\
    Stack trace:\n#0 /tmp/tmpb1yyovaw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb1yyovaw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = ($n % 2 == 0) ? $n : $n +\
    \ 1;\n    $pile[2] = ($n % 2 == 0) ? $n + 1 : $n + 2;\n    return $pile;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo9lts8_.php:25\n\
    Stack trace:\n#0 /tmp/tmpbo9lts8_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbo9lts8_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz6smop_9.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n + 1;\n\
    \    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5u_qct47.php:25\n\
    Stack trace:\n#0 /tmp/tmp5u_qct47.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5u_qct47.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n \
    \   $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $pile\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkd02h7of.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa7woaraz.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[$i] =\
    \ $i + 1;\n        if ($i % 2 == 0) {\n            $pile[$i] = $pile[$i] + $pile[$i-1];\n\
    \        }\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n  \
    \  return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw4xr45s.php:28\n\
    Stack trace:\n#0 /tmp/tmprw4xr45s.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprw4xr45s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n;\n    $pile[2] =\
    \ $n;\n    $pile[3] = $n;\n    $pile[4] = $n;\n    $pile[5] = $n;\n    $pile[6]\
    \ = $n;\n    $pile[7] = $n;\n    $pile[8] = $n;\n    $pile[9] = $n;\n    $pile[10]\
    \ = $n;\n    $pile[11] = $n;\n    $pile[12] = $n;\n    $pile[13] = $n;\n    $pile[14]\
    \ = $n;\n    $pile[15] = $n;\n    $pile[16] = $n;\n    $pile[17] = $n;\n    $pile[18]\
    \ = $n;\n    $pile[19] = $n;\n    $pile[20] = $n;\n    $pile[21] = $n;\n    $pile[22]\
    \ = $n;\n    $pile[23] = $n;\n    $pile[24] = $n;\n    $pile[25] = $n;\n    $pile[26]\
    \ = $n;\n    $pile[27] = $n;\n    $pile[28] = $n;\n    $pile[29] = $n;\n    $pile[30]\
    \ = $n;\n    $pile[31] = $n;\n    $pile[32] = $n;\n    $pile[33] = $n;\n    $pile[34]\
    \ = $n;\n    $pile[35] = $n;\n    $pile[36] = $n;\n    $pile[37] = $n;\n    $pile[38]\
    \ = $n;\n    $pile[39] = $n;\n    $pile[40] = $n;\n    $pile[41] = $n;\n    $pile[42]\
    \ = $n;\n    $pile[43] = $n;\n    $pile[44] = $n;\n    $pile[45] = $n;\n    $pile[46]\
    \ = $n;\n    $pile[47] = $n;\n    $pile[48] = $n;\n    $pile[49] = $n;\n    $pile[50]\
    \ = $n;\n    $pile[51] = $n;\n    $pile[52] = $n;\n    $pile[53] = $n;\n    $pile[54]\
    \ = $n;\n    $pile[55] = $n;\n    $pile[56] = $n;\n    $pile[57] = $n;\n    $pile[58]\
    \ = \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpneey913r.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $odd = $n%2;\n    $even = !$odd;\n\
    \    for($i = 1; $i <= $n; $i++) {\n        $pile[] = $odd? $i%2 : $even? $i%2\
    \ : 0;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxqsnbjb.php:28\n\
    Stack trace:\n#0 /tmp/tmpwxqsnbjb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwxqsnbjb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ew1ocz3.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[] = $n;\n    $pile[] = $n + ($n % 2 ? 1 : 0);\n\
    \    $pile[] = $n + ($n % 2 ? 2 : 0);\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwvdb22c.php:25\n\
    Stack trace:\n#0 /tmp/tmpuwvdb22c.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwvdb22c.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n \
    \   $odd_count = 1;\n    $even_count = 1;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        $odd_count = $odd_count * 2 + 1;\n        $even_count = $even_count *\
    \ 2 + 1;\n        $pile[$i] = $odd_count + $even_count;\n    }\n    return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfs_jt038.php:32\n\
    Stack trace:\n#0 /tmp/tmpfs_jt038.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfs_jt038.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpql8mgnup.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    if ($n % 2 == 0) {\n        $pile[1]\
    \ = ($n / 2) + 1;\n    } else {\n        $pile[1] = ($n / 2) + 1;\n        $pile[2]\
    \ = ($n / 2) + 1;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphk2sze4_.php:29\n\
    Stack trace:\n#0 /tmp/tmphk2sze4_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphk2sze4_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa95eg40l.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $i + 1;\n\
    \    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh_mbr_s.php:25\n\
    Stack trace:\n#0 /tmp/tmpvh_mbr_s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvh_mbr_s.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 ? $n : 2 * $n;\n\
    \    $pile[2] = $n % 2 ? 2 * $n : 3 * $n;\n    $pile[3] = $n % 2 ? 3 * $n : 4\
    \ * $n;\n    $pile[4] = $n % 2 ? 4 * $n : 5 * $n;\n    $pile[5] = $n % 2 ? 5 *\
    \ $n : 6 * $n;\n    $pile[6] = $n % 2 ? 6 * $n : 7 * $n;\n    $pile[7] = $n %\
    \ 2 ? 7 * $n : 8 * $n;\n    $pile[8] = $n % 2 ? 8 * $n : 9 * $n;\n    $pile[9]\
    \ = $n % 2 ? 9 * $n : 10 * $n;\n    $pile[10] = $n % 2 ? 10 * $n : 11 * $n;\n\
    \    $pile[11] = $n % 2 ? 11 * $n : 12 * $n;\n    $pile[12] = $n % 2 ? 12 * $n\
    \ : 13 * $n;\n    $pile[13] = $n % 2 ? 13 * $n : 14 * $n;\n    $pile[14] = $n\
    \ % 2 ? 14 * $n : 15 * $n;\n    $pile[15] = $n % 2 ? 15 * $n : 16 * $n;\n    $pile[16]\
    \ = $n % 2 ? 16 * $n : 17 * $n;\n    $pile[17] = $n % 2 ? 17 * $n : 18 * $n;\n\
    \    $pile[18] = $n % 2 ? 18 * $n : 19 * $n;\n    $pile[19] = $n % 2 ? 19 * $n\
    \ : 20 * $n;\n    $pile[20] = $n % 2 ? 20 * $n : 21 * $n;\n    $pile[21] = $n\
    \ % 2 ? 21 * $n : 22 * $n;\n    $pile[22] = $n % 2 ? 22 * $n : 23 * $n;\n    $pile[23]\
    \ = $n % 2 ? 23 * $n : 24 * $n;\n    $pile[24] = $n % 2 ? 24 * $n : 25 * $n;\n\
    \    $pile[25] = $n % 2 ? 25 * $n : 26 * $n;\n    $pile[26] = $n % 2 ? 26 * $n\
    \ : 27 * $n;\n    $pile[27] = $\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq2zlv31c.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + 1;\n    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60i3v186.php:25\n\
    Stack trace:\n#0 /tmp/tmp60i3v186.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp60i3v186.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = 1;\n    $pile[2] = 1;\n\
    \    $pile[3] = 1;\n    $pile[4] = 1;\n    $pile[5] = 1;\n    $pile[6] = 1;\n\
    \    $pile[7] = 1;\n    $pile[8] = 1;\n    $pile[9] = 1;\n    $pile[10] = 1;\n\
    \    $pile[11] = 1;\n    $pile[12] = 1;\n    $pile[13] = 1;\n    $pile[14] = 1;\n\
    \    $pile[15] = 1;\n    $pile[16] = 1;\n    $pile[17] = 1;\n    $pile[18] = 1;\n\
    \    $pile[19] = 1;\n    $pile[20] = 1;\n    $pile[21] = 1;\n    $pile[22] = 1;\n\
    \    $pile[23] = 1;\n    $pile[24] = 1;\n    $pile[25] = 1;\n    $pile[26] = 1;\n\
    \    $pile[27] = 1;\n    $pile[28] = 1;\n    $pile[29] = 1;\n    $pile[30] = 1;\n\
    \    $pile[31] = 1;\n    $pile[32] = 1;\n    $pile[33] = 1;\n    $pile[34] = 1;\n\
    \    $pile[35] = 1;\n    $pile[36] = 1;\n    $pile[37] = 1;\n    $pile[38] = 1;\n\
    \    $pile[39] = 1;\n    $pile[40] = 1;\n    $pile[41] = 1;\n    $pile[42] = 1;\n\
    \    $pile[43] = 1;\n    $pile[44] = 1;\n    $pile[45] = 1;\n    $pile[46] = 1;\n\
    \    $pile[47] = 1;\n    $pile[48] = 1;\n    $pile[49] = 1;\n    $pile[50] = 1;\n\
    \    $pile[51] = 1;\n    $pile[52] = 1;\n    $pile[53] = 1;\n    $pile[54] = 1;\n\
    \    $pile[55] = 1;\n    $pile[56] = 1;\n    $pile[57] = 1;\n    $pile[58] = 1;\n\
    \    $pile[59] = 1;\n    $pile[60] = 1;\n    $pile[61] = 1;\n    $pile[62] = 1;\n\
    \    $pile[63] = 1;\n    $pile[64] = 1;\n    $pile[65] = 1;\n    $\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg7k1efq5.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[0] = $n;\n    $odd = $even = 0;\n    for($i = 1; $i\
    \ <= $n; $i++) {\n        $odd = $even;\n        if($i % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n        $pile[$i]\
    \ = $odd;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxoj09d2.php:33\n\
    Stack trace:\n#0 /tmp/tmpyxoj09d2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyxoj09d2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = array();\n    $pile[0] = $n;\n    $pile[1] = $n % 2 == 0 ? $n : $n\
    \ + 1;\n    $pile[2] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[3] = $n % 2 == 0\
    \ ? $n + 1 : $n;\n    $pile[4] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[5] = $n\
    \ % 2 == 0 ? $n + 1 : $n;\n    $pile[6] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[7]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[8] = $n % 2 == 0 ? $n + 1 : $n;\n  \
    \  $pile[9] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[10] = $n % 2 == 0 ? $n + 1\
    \ : $n;\n    $pile[11] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[12] = $n % 2 ==\
    \ 0 ? $n + 1 : $n;\n    $pile[13] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[14]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[15] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[16] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[17] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[18] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[19] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[20] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[21]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[22] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[23] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[24] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[25] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[26] = $n % 2\
    \ == 0 ? $n + 1 : $n;\n    $pile[27] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[28]\
    \ = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[29] = $n % 2 == 0 ? $n + 1 : $n;\n \
    \   $pile[30] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile[31] = $n % 2 == 0 ? $n +\
    \ 1 : $n;\n    $pile[32] = $n % 2 == 0 ? $n + 1 : $n;\n    $pile\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj2o4jshs.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
