name: HumanEval_12_longest
language: php
results:
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = [\n    'a' => 'a',\n    'b' => 'b',\n    'c' => 'c',\n    'd' => 'd',\n  \
    \  'e' => 'e',\n    'f' => 'f',\n    'g' => 'g',\n];\n\n$longest = array_reduce($array,\
    \ function ($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n\n\
    var_dump($longest);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n\
    $longest = array_reduce($array, function ($a, $b) {\n    return strlen($a) > strlen($b)\
    \ ? $a : $b;\n});\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$longest = array_reduce($array,\
    \ function ($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=2 tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$longest = array_reduce($array,\
    \ function ($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$longest = array_reduce($array,\
    \ function ($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$longest = array_reduce($array,\
    \ function ($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$longest = array_reduce($array,\
    \ function ($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$longest = array_reduce($array, function\
    \ ($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/\
    \ a tags=php,arrays \nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp7rwr_19.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $item) {\n        return strlen($carry) > strlen($item) ?\
    \ $carry : $item;\n    });\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpsohlavlh.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpsohlavlh.php:24\nStack\
    \ trace:\n#0 /tmp/tmpsohlavlh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsohlavlh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ > $longest) {\n            $longest = $string;\n        }\n    }\n    return\
    \ $longest ?: null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9yr04zv.php:27\n\
    Stack trace:\n#0 /tmp/tmpt9yr04zv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt9yr04zv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($result, $string) {\n        return strlen($string)\
    \ > strlen($result) ? $string : $result;\n    });\n\n    return $longest === false\
    \ ? null : $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    $array = array_filter($array, function($value) {\n    return $value >= 2;\n});\n\
    $array = array_keys($array);\n$array = array_values($array);\n$array = array_slice($array,\
    \ 0, 1);\n$array = array_slice($array, 1);\n</code>\n<|/ a tags=php,arrays dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n\
    $array = array_count_values($array);\n$array = array_filter($array, function($value)\
    \ {\n    return $value >= 2;\n});\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_slice($array, 0, 1);\n$array = array_slice($array, 1);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\");\n$array = array_count_values($array);\n$array = array_filter($array,\
    \ function($value) {\n    return $value >= 2;\n});\n$array = array_keys($array);\n\
    $array = array_values($array);\n$array = array_slice($array, 0, 1);\n$array =\
    \ array_slice($array, 1);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    $array = array_filter\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxr929ijm.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmph4w4wir_.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmph4w4wir_.php:24\nStack\
    \ trace:\n#0 /tmp/tmph4w4wir_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph4w4wir_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpxkf_yqh8.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxkf_yqh8.php:26\nStack\
    \ trace:\n#0 /tmp/tmpxkf_yqh8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxkf_yqh8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$strings = array(\"aaa\", \"bbb\"\
    , \"ccc\", \"ddd\", \"eee\");\n$longest = array_reduce($strings, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$strings = array(\"aaa\", \"bbb\"\
    , \"ccc\", \"ddd\", \"eee\");\n$longest = array_reduce($strings, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\n$strings = array(\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"\
    eee\");\n$longest = array_reduce($strings, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays,sorting dscore=1\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$strings = array(\"aaa\", \"bbb\"\
    , \"ccc\", \"ddd\", \"eee\");\n$longest = array_reduce($strings, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"aaa\", \"bbb\", \"ccc\", \"\
    ddd\", \"eee\");\n$longest = array_reduce($strings, function($a, $b) {\n    return\
    \ strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a |>\n<code>\n$strings = array(\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"\
    eee\");\n$longest = array_reduce($strings, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=1 tags=php,arrays,sorting\
    \ |>\n<| a |>\n<code>\n$strings = array(\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"\
    eee\");\n$longest = array_reduce($strings, function($a, $b) {\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp__7qs3_u.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbknr5hlc.php:27\n\
    Stack trace:\n#0 /tmp/tmpbknr5hlc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbknr5hlc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmcmpzvc.php:27\n\
    Stack trace:\n#0 /tmp/tmpcmcmpzvc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcmcmpzvc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ < $longest) {\n            $longest = $length;\n        }\n        $lengths[$length]\
    \ = $string;\n    }\n    return $longest === null ? null : $lengths[$longest];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9s85lm54.php:28\n\
    Stack trace:\n#0 /tmp/tmp9s85lm54.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9s85lm54.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($lengths[$length] === null\
    \ || $lengths[$length] > $length) {\n            $lengths[$length] = $string;\n\
    \        }\n    }\n    if ($lengths) {\n        $longest = array_pop($lengths);\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $item) {\n        return max($carry,\
    \ strlen($item));\n    });\n\n    return $longest === 1 ? $strings[0] : $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpwn6_1uo8.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwn6_1uo8.php:26\nStack\
    \ trace:\n#0 /tmp/tmpwn6_1uo8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwn6_1uo8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (isset($lengths[$length]))\
    \ {\n            $lengths[$length] = max($lengths[$length], $length);\n      \
    \  } else {\n            $lengths[$length] = $length;\n        }\n    }\n    foreach\
    \ ($lengths as $length => $count) {\n        if ($longest === null || $lengths[$length]\
    \ > $longest) {\n            $longest = $length;\n        }\n    }\n    return\
    \ $longest === null ? null : $strings[$longest];\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work if the array is empty. `longest([])`\
    \ returns `null` instead of `''`.\n<|/ c |>\n<| c |>\nI added a fix for that case.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$longest\
    \ = array_reduce($array, function($a, $b) { return strlen($a) > strlen($b) ? $a\
    \ : $b; });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if\
    \ the array is empty. `longest([])` returns `null` instead of `''`.\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work if the array is empty. `longest([])` returns\
    \ `null` instead of `''`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if the\
    \ array is empty. `longest([])` returns `null` instead of `''`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't seem to work if the array is empty. `longest([])` returns\
    \ `null` instead of `''`.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$longest\
    \ = array_reduce($array, function($a, $b) { return strlen($a) > strlen($b) ? $a\
    \ : $b; });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if\
    \ the array is empty. `longest([])` returns `null` instead of `''`.\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work if the array is empty. `longest([])` returns\
    \ `null` instead of `''`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$longest = array_reduce($array,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2ieevlpn.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplp01rh0s.php:25\n\
    Stack trace:\n#0 /tmp/tmplp01rh0s.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplp01rh0s.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zvk_jmh.php:27\n\
    Stack trace:\n#0 /tmp/tmp9zvk_jmh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9zvk_jmh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return max($carry,\
    \ strlen($string));\n    });\n\n    return $strings[array_search($longest, $strings)];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote a function that returns\
    \ the longest string in a list of strings. I used a list comprehension to find\
    \ the longest string in the list and then used a list comprehension to find the\
    \ index of the longest string in the list. \n<code>\ndef longest_string(strings):\n\
    \    return max([len(s) for s in strings])\n\ndef longest_string_index(list_of_strings):\n\
    \    return max([i for i, s in enumerate(list_of_strings) if len(s) == longest_string(list_of_strings)])\n\
    </code>\n<|/ a tags=python,string |>\n<| a dscore=0 |>\n<code>\ndef longest_string(strings):\n\
    \    longest_string = \"\"\n    longest_string_length = 0\n    for string in strings:\n\
    \        if len(string) > longest_string_length:\n            longest_string =\
    \ string\n            longest_string_length = len(string)\n    return longest_string\n\
    \ndef longest_string_index(list_of_strings):\n    longest_string = \"\"\n    longest_string_length\
    \ = 0\n    longest_string_index = 0\n    for string in list_of_strings:\n    \
    \    if len(string) > longest_string_length:\n            longest_string = string\n\
    \            longest_string_length = len(string)\n            longest_string_index\
    \ = list_of_strings.index(longest_string)\n    return longest_string_index\n</code>\n\
    <|/ a tags=python,string |>\n<| a tags=python,string |>\n<code>\ndef longest_string(strings):\n\
    \    longest_string = \"\"\n    longest_string_length = 0\n    for string in strings:\n\
    \        if len(string) > longest_string_length:\n            longest_string =\
    \ string\n            longest_string_length = len(string)\n    return longest_string\n\
    \ndef longest_string_index(list_of_strings):\n    longest_string = \"\"\n    longest_string_length\
    \ = 0\n    longest_string_index = 0\n    for string in list_of_strings:\n    \
    \    if len(string) > longest_string_length:\n            longest_string = string\n\
    \            longest_string_length = len(string)\n            longest_string_index\
    \ = list_of_strings.index(longest_string)\n    return longest_string_index\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also\
    \ provide an explanation of what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to \nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnderr_tk.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return max($carry, strlen($string));\n\
    \    });\n    return $longest === 1 ? $strings[0] : $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpqfnezadm.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpqfnezadm.php:24\nStack\
    \ trace:\n#0 /tmp/tmpqfnezadm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqfnezadm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyvn9qfl.php:27\n\
    Stack trace:\n#0 /tmp/tmpkyvn9qfl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkyvn9qfl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n\n    return $longest === $strings[0]\
    \ ? $strings[0] : $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0n9knc_v.php:27\n\
    Stack trace:\n#0 /tmp/tmp0n9knc_v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0n9knc_v.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp8gsmlzyu.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8gsmlzyu.php:28\nStack\
    \ trace:\n#0 /tmp/tmp8gsmlzyu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8gsmlzyu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns1lvjy5.php:27\n\
    Stack trace:\n#0 /tmp/tmpns1lvjy5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpns1lvjy5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > 0) {\n        \
    \    $lengths[$length] = $string;\n        } else {\n            $lengths[$length]\
    \ = null;\n        }\n    }\n    arsort($lengths);\n    foreach ($lengths as $length\
    \ => $string) {\n        if ($string !== null) {\n            if ($longest ===\
    \ null || strlen($longest) > strlen($string)) {\n                $longest = $string;\n\
    \            }\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n2ntipd.php:37\n\
    Stack trace:\n#0 /tmp/tmp1n2ntipd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1n2ntipd.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqca18s7r.php:27\n\
    Stack trace:\n#0 /tmp/tmpqca18s7r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqca18s7r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return max($carry,\
    \ strlen($string));\n    });\n\n    return $longest === 1 ? $strings[0] : $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpdqjy51xt.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdqjy51xt.php:26\nStack\
    \ trace:\n#0 /tmp/tmpdqjy51xt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdqjy51xt.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (isset($lengths[$length]))\
    \ {\n            $lengths[$length] = $lengths[$length] + 1;\n        } else {\n\
    \            $lengths[$length] = 1;\n        }\n        if ($longest === null\
    \ || $lengths[$length] > $lengths[$longest]) {\n            $longest = $length;\n\
    \        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ strings of the same length. Try it with `longest(['a', 'bb', 'ccc'])`.\n<|/\
    \ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried it and it\
    \ works fine. However I wonder if there is a more efficient way to do it. Maybe\
    \ using array_count_values() or something similar?\n<|/ c |>\n<| c |>\nYes, I\
    \ believe that would be the most efficient way. I've updated my answer with another\
    \ solution.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried it and it works\
    \ fine. However I wonder if there is a more efficient way to do it. Maybe using\
    \ array_count_values() or something similar?\n<|/ c |>\n<| a dscore=1 |>\nI believe\
    \ that array_count_values is the most efficient way to solve this problem. Here's\
    \ a benchmark test I ran on my machine (PHP 7.0.13):\n<code>\n<?php\n\n$strings\
    \ = [\n    'aaa',\n    'bbb',\n    'ccc',\n    'ddd',\n    'eee',\n    'fff',\n\
    \    'ggg',\n    'hhh',\n    'iii',\n    'jjj',\n    'kkk',\n    'lll',\n    'mmm',\n\
    \    'nnn',\n    'ooo',\n    'ppp',\n    'qqq',\n    'rrr',\n    'sss',\n    'ttt',\n\
    \    'uuu',\n    'vvv',\n    'www',\n    'xxx',\n    'yyy',\n    'zzz',\n];\n\n\
    $times = [];\n$count = array_count_values($strings);\n$times[] = microtime(true);\n\
    for ($i = 0; $i < 10000; $i++) {\n    $count = array_count_values($strings);\n\
    }\n$times[] = microtime(true);\nfor ($i = 0; $i < 10000; $\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpepdvw0rv.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($carry, $string) {\n    \
    \    return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n  \
    \  return $longest ? $longest : null;\n}\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3yney3a.php:22\n\
    Stack trace:\n#0 /tmp/tmpx3yney3a.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpx3yney3a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp986l3kvo.php:27\n\
    Stack trace:\n#0 /tmp/tmp986l3kvo.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp986l3kvo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $lengths[] = strlen($string);\n    }\n    sort($lengths);\n    foreach\
    \ ($lengths as $length) {\n        if ($longest === null || $lengths[$length -\
    \ 1] === $longest) {\n            $longest = $length;\n        }\n    }\n    return\
    \ $longest === null ? null : $strings[$longest];\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ Try it with `['aaa', 'bbb', 'ccc']`.\n<|/ c |>\n<| c |>\n: Yes, I forgot about\
    \ that case. I've updated my answer with a new function which should work now.\n\
    <|/ c |>\n<| c |>\n: I've updated my answer with a new function which should work\
    \ now.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$strings = array('aaa', 'bbb', 'ccc');\n\
    $longest = array_reduce($strings, function($a, $b) {\n    return strlen($a) >\
    \ strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if you have multiple strings of the same length. Try it with `['aaa',\
    \ 'bbb', 'ccc']`.\n<|/ c |>\n<| c |>\n: Yes, I forgot about that case. I've updated\
    \ my answer with a new function which should work now.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$strings = array('aaa', 'bbb', 'ccc');\n$longest = array_reduce($strings,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$strings = array('aaa', 'bbb',\
    \ 'ccc');\n$longest = array_reduce($strings, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$strings = array('aaa', 'bbb', 'ccc');\n$longest = array_reduce($strings,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzrjis25c.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgoe77ilk.php:25\n\
    Stack trace:\n#0 /tmp/tmpgoe77ilk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgoe77ilk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return count($strings) > 1 ? $longest : null;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$strings = array('a', 'bb', 'ccc');\n\
    $longest = array_reduce($strings, function ($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\n$strings = array('a', 'bb', 'ccc');\n\
    $longest = array_reduce($strings, function ($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array('a', 'bb', 'ccc');\n\
    $longest = array_reduce($strings, function ($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\n$strings = array('a', 'bb', 'ccc');\n$longest = array_reduce($strings,\
    \ function ($carry, $string) {\n    return strlen($carry) > strlen($string) ?\
    \ $carry : $string;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| a |>\n\
    <code>\n$strings = array('a', 'bb', 'ccc');\n$longest = array_reduce($strings,\
    \ function ($carry, $string) {\n    return strlen($carry) > strlen($string) ?\
    \ $carry : $string;\n});\n</code>\n<|/ a dscore=1 tags=php,arrays,string |>\n\
    <| a dscore=1 |>\n<code>\n$strings = array('a', 'bb', 'ccc');\n$longest = array_reduce($strings,\
    \ function ($carry, $string) {\n    return strlen($carry) > strlen($string) ?\
    \ $carry : $string;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array('a', 'bb', 'ccc');\n$longest = array_reduce(\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4l5wfsa5.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($result, $string) {\n   \
    \     return strlen($result) > strlen($string) ? $result : $string;\n    });\n\
    \    return $longest === false ? false : $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47ghiv_p.php:22\n\
    Stack trace:\n#0 /tmp/tmp47ghiv_p.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp47ghiv_p.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]++;\n\
    \        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I like this solution, however it fails when there are multiple strings of the\
    \ same length. For example, `longest(['a', 'bb', 'ccc'])` returns `'ccc'` instead\
    \ of `'a'`.\n<|/ c |>\n<| c |>\n: I added a version that returns `'a'` instead\
    \ of `'ccc'`.\n<|/ c |>\n<| c |>\n: I added a version that returns `'a'` instead\
    \ of `'ccc'`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3id7tz42.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($result, $string) {\n   \
    \     return strlen($string) > strlen($result) ? $string : $result;\n    });\n\
    \    return $longest ? $longest : null;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution\
    \ works perfectly for my case. However I wonder if there is a way to do it with\
    \ less code. Maybe with some built-in PHP function?\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses less code, but I doubt it can be done with less code.\n\
    <|/ c |>\n<| a |>\n<code>\n$strings = array('a', 'bb', 'ccc', 'dddd', 'eeee');\n\
    $longest = array_reduce($strings, function($a, $b) { return strlen($a) > strlen($b)\
    \ ? $a : $b; });\n</code>\n<|/ a tags=php,string dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$strings = array('a', 'bb', 'ccc', 'dddd', 'eeee');\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a tags=php,string |>\n<| a dscore=0 |>\n<code>\n$strings = array('a', 'bb',\
    \ 'ccc', 'dddd', 'eeee');\n$longest = array_reduce($strings, function($a, $b)\
    \ { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$strings = array('a',\
    \ 'bb', 'ccc', 'dddd', 'eeee');\n$longest = array_reduce($strings, function($a,\
    \ $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n$strings = array('a', 'bb', 'ccc', 'dddd', 'eeee');\n\
    $longest = array_reduce($strings, function($a, $b) { return strlen($a) > strlen($b)\
    \ ? $a : $b; });\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n\
    <code>\n$strings = array('a', 'bb', 'ccc', 'dddd', 'eeee');\n$longest = array_reduce($strings,\
    \ function($a, $b) { return str\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4n5jzlmi.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7eopsdkq.php:25\n\
    Stack trace:\n#0 /tmp/tmp7eopsdkq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7eopsdkq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($carry, $item) {\n      \
    \  return strlen($carry) > strlen($item) ? $carry : $item;\n    });\n    return\
    \ $longest ? $longest : null;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o9dyv4z.php:22\n\
    Stack trace:\n#0 /tmp/tmp4o9dyv4z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4o9dyv4z.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw8b0g_v.php:27\n\
    Stack trace:\n#0 /tmp/tmpdw8b0g_v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdw8b0g_v.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = array_map(function($s) { return strlen($s);\
    \ }, $strings);\n    asort($lengths);\n    foreach ($lengths as $i => $length)\
    \ {\n        if ($longest === null || $length > strlen($longest)) {\n        \
    \    $longest = $strings[$i];\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ > $longest) {\n            $longest = $string;\n        }\n    }\n    return\
    \ $longest ?: null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupb_d0qb.php:27\n\
    Stack trace:\n#0 /tmp/tmpupb_d0qb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpupb_d0qb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbh949er.php:27\n\
    Stack trace:\n#0 /tmp/tmpsbh949er.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsbh949er.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp2ojglb9t.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2ojglb9t.php:27\nStack\
    \ trace:\n#0 /tmp/tmp2ojglb9t.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2ojglb9t.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = mb_strlen($string, 'UTF-8');\n        if ($length > 0)\
    \ {\n            $lengths[$length] = $string;\n        } else {\n            $lengths[$length]\
    \ = null;\n        }\n    }\n    arsort($lengths);\n    foreach ($lengths as $length\
    \ => $string) {\n        if ($string !== null) {\n            if ($longest ===\
    \ null || $length < $longest) {\n                $longest = $length;\n       \
    \     }\n        }\n    }\n    return $longest === null ? null : $lengths[$longest];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpfhod17sz.php:13\nStack trace:\n#0 /tmp/tmpfhod17sz.php(32): longest(Array)\n\
    #1 /tmp/tmpfhod17sz.php(37): candidate(Array)\n#2 /tmp/tmpfhod17sz.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfhod17sz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp9g8xcm3p.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9g8xcm3p.php:26\nStack\
    \ trace:\n#0 /tmp/tmp9g8xcm3p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9g8xcm3p.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (isset($lengths[$length]))\
    \ {\n            $lengths[$length] = $lengths[$length] + 1;\n        } else {\n\
    \            $lengths[$length] = 1;\n        }\n        if ($longest === null\
    \ || $lengths[$length] > $lengths[$longest]) {\n            $longest = $length;\n\
    \        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqjzqj_9.php:32\n\
    Stack trace:\n#0 /tmp/tmpvqjzqj_9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvqjzqj_9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (isset($lengths[$length]))\
    \ {\n            $lengths[$length] = $lengths[$length] + 1;\n        } else {\n\
    \            $lengths[$length] = 1;\n        }\n        if ($longest === null\
    \ || $lengths[$length] > $lengths[$longest]) {\n            $longest = $length;\n\
    \        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn98u2tme.php:32\n\
    Stack trace:\n#0 /tmp/tmpn98u2tme.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn98u2tme.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return max($carry,\
    \ strlen($string));\n    });\n\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) == $longest) {\n            return $string;\n        }\n  \
    \  }\n\n    return None;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpkpp0ymtd.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpkpp0ymtd.php:32\nStack\
    \ trace:\n#0 /tmp/tmpkpp0ymtd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkpp0ymtd.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxq1tauxy.php:27\n\
    Stack trace:\n#0 /tmp/tmpxq1tauxy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxq1tauxy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI like this solution, because it doesn't require\
    \ a loop. However it does require the array to be sorted in descending order first.\
    \ Otherwise the longest string will always be the first.\n<|/ c |>\n<| c |>\n\
    Yes, the array needs to be sorted in descending order first. Otherwise the longest\
    \ string will always be the first.\n<|/ c |>\n<| c |>\nI like this solution, because\
    \ it doesn't require a loop. However it does require the array to be sorted in\
    \ descending order first. Otherwise the longest string will always be the first.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n$longest = array_pop(array_slice($array, 0, count($array)));\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis solution works best for me. Thanks!\n<|/ c |>\n\
    <| c |>\nThis solution works best for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution\
    \ works best for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works best for\
    \ me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works best for me. Thanks!\n<|/\
    \ c |>\n<| a |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$longest\
    \ = array_pop(array_slice($array, 0, count($array)));\n</code>\n<|/ a dscore=5\
    \ tags=php,arrays |>\n<| c |>\nThis solution works best for me. Thanks!\n<|/ c\
    \ |>\n<| c |>\nThis solution works best for me. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ solution works best for me. Thanks!\n<|/ c |>\n<| c |>\nThis \nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppfbf_3qj.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $item) {\n        return strlen($carry)\
    \ > strlen($item) ? $carry : $item;\n    });\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxp8ecwhe.php:27\n\
    Stack trace:\n#0 /tmp/tmpxp8ecwhe.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxp8ecwhe.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4343bor_.php:27\n\
    Stack trace:\n#0 /tmp/tmp4343bor_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4343bor_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]\
    \ += 1;\n        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbiyyyr8_.php:32\n\
    Stack trace:\n#0 /tmp/tmpbiyyyr8_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbiyyyr8_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp0ktblpkq.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0ktblpkq.php:28\nStack\
    \ trace:\n#0 /tmp/tmp0ktblpkq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0ktblpkq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]\
    \ += 1;\n        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n</code>\n<|/ a tags=php,string |>\n<|\
    \ c |>\nThis does not work for me. `longest(['a', 'bb', 'ccc'])` returns `ccc`\
    \ instead of `bb`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP 7.0.14.\
    \ Both worked.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP 7.0.14. Both\
    \ worked.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP 7.0.14. Both worked.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP 7.0.14. Both worked.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$longest = array_reduce($strings, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis does not work for me. `longest(['a', 'bb', 'ccc'])` returns\
    \ `ccc` instead of `bb`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP\
    \ 7.0.14. Both worked.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP 7.0.14.\
    \ Both worked.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP 7.0.14. Both\
    \ worked.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.22 and PHP 7.0.14. Both worked.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$longest = array_reduce($strings, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,string\
    \ \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcok30nb4.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ < $longest) {\n            $longest = $length;\n        }\n        $lengths[]\
    \ = $length;\n    }\n    return $longest === null ? null : $lengths[$longest];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyvl1lwg.php:28\n\
    Stack trace:\n#0 /tmp/tmpiyvl1lwg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpiyvl1lwg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = mb_strlen($string, 'UTF-8');\n        if ($length > 0)\
    \ {\n            $lengths[$length] = $string;\n        }\n    }\n    if (count($lengths)\
    \ > 0) {\n        $longest = array_keys($lengths)[0];\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmpcamnacqa.php:13\nStack trace:\n#0 /tmp/tmpcamnacqa.php(25): longest(Array)\n\
    #1 /tmp/tmpcamnacqa.php(30): candidate(Array)\n#2 /tmp/tmpcamnacqa.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcamnacqa.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return max($carry,\
    \ strlen($string));\n    });\n\n    return $longest === 1 ? $strings[0] : $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp9xudl036.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9xudl036.php:26\nStack\
    \ trace:\n#0 /tmp/tmp9xudl036.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9xudl036.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > 0) {\n        \
    \    if (isset($lengths[$length])) {\n                $lengths[$length] = $lengths[$length]\
    \ + 1;\n            } else {\n                $lengths[$length] = 1;\n       \
    \     }\n            if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n                $longest = $length;\n            }\n        }\n    }\n  \
    \  return $longest === null ? null : $strings[$longest];\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work for me in PHP 7.2.10. `longest` returns `null`\
    \ when given an empty array. `longest([])` returns `null` as well.\n<|/ c |>\n\
    <| c |>\nI tested this in PHP 7.2.10 and it worked fine. Maybe you have a typo\
    \ or something in your code?\n<|/ c |>\n<| c |>\nI tested this in PHP 7.2.10 and\
    \ it worked fine. Maybe you have a typo or something in your code?\n<|/ c |>\n\
    <| c |>\nI tested this in PHP 7.2.10 and it worked fine. Maybe you have a typo\
    \ or something in your code?\n<|/ c |>\n<| c |>\nI tested this in PHP 7.2.10 and\
    \ it worked fine. Maybe you have a typo or something in your code?\n<|/ c |>\n\
    <| a |>\nI wrote a function that will return the longest string in an array (including\
    \ empty strings). It also returns the first string in the array if there are multiple\
    \ strings of the same length.\n<code>\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphj7_po6a.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5lb197p.php:27\n\
    Stack trace:\n#0 /tmp/tmpg5lb197p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpg5lb197p.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpvqb5h327.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvqb5h327.php:30\nStack\
    \ trace:\n#0 /tmp/tmpvqb5h327.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvqb5h327.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return max($carry, strlen($string));\n\
    \    });\n    return $longest === 1 ? $strings[0] : $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpbk88txzo.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbk88txzo.php:24\nStack\
    \ trace:\n#0 /tmp/tmpbk88txzo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbk88txzo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $maxLength =\
    \ 0;\n    $longestString = null;\n    foreach ($strings as $string) {\n      \
    \  $length = strlen($string);\n        if ($length > $maxLength) {\n         \
    \   $maxLength = $length;\n            $longestString = $string;\n        }\n\
    \    }\n    return $longestString;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $longest = $string;\n\
    \            $length = strlen($string);\n        }\n    }\n    return $longest\
    \ ?: null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return max($carry, strlen($string));\n\
    \    });\n    return $strings[array_search($longest, $strings)];\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$result = array();\n$max =\
    \ 0;\nforeach($array as $key => $value){\n    if(strlen($value) > $max){\n   \
    \     $max = $key;\n    }\n}\n$result[$max] = $array[$max];\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\");\n$result = array();\n$max = 0;\nforeach($array\
    \ as $key => $value){\n    if(strlen($value) > $max){\n        $max = $key;\n\
    \    }\n}\n$result[$max] = $array[$max];\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$result = array();\n$max = 0;\nforeach($array as $key => $value){\n   \
    \ if(strlen($value) > $max){\n        $max = $key;\n    }\n}\n$result[$max] =\
    \ $array[$max];\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n\
    $result = array();\n$max = 0;\nforeach($array as $key => $value){\n    if(strlen($value)\
    \ > $max){\n        $max = $key;\n    }\n}\n$result[$max] = $array[$max];\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$result = array();\n$max = 0;\n\
    foreach($array as $key => $value){\n    if(strlen($value) > $max){\n        $max\
    \ = $key;\n    }\n}\n$result[$\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_ww_551y.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($result, $string) {\n   \
    \     return strlen($result) > strlen($string) ? $result : $string;\n    });\n\
    \    return $longest ? $longest : null;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjxa0mbe.php:22\n\
    Stack trace:\n#0 /tmp/tmpzjxa0mbe.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzjxa0mbe.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_f9t15w.php:27\n\
    Stack trace:\n#0 /tmp/tmpl_f9t15w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl_f9t15w.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return max($carry,\
    \ strlen($string));\n    });\n\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) == $longest) {\n            return $string;\n        }\n  \
    \  }\n\n    return None;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp5ko858k3.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5ko858k3.php:32\nStack\
    \ trace:\n#0 /tmp/tmp5ko858k3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5ko858k3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$strings = array('a', 'bb', 'ccc', 'dddd');\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis should be the accepted answer. Works perfectly.\n\
    <|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array('a', 'bb',\
    \ 'ccc', 'dddd');\n$longest = array_reduce($strings, function($a, $b) { return\
    \ strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3\
    \ |>\n<code>\n$strings = array('a', 'bb', 'ccc', 'dddd');\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n$strings\
    \ = array('a', 'bb', 'ccc', 'dddd');\n$longest = array_reduce($strings, function($a,\
    \ $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array('a', 'bb', 'ccc',\
    \ 'dddd');\n$longest = array_reduce($strings, function($a, $b) { return strlen($a)\
    \ > strlen($b) ? $a : $b; });\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n\
    <code>\n$strings = array('a', 'bb', 'ccc', 'dddd');\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a dscore=2 |>\n<code>\n$strings = array('a',\
    \ 'bb', 'ccc', 'dddd');\n$longest = array_reduce($strings, function($a, $b) {\
    \ return strlen($a) > strlen($b) ? $a : $b; });\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwfl2_4ro.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $lengths[] = strlen($string);\n    }\n    sort($lengths);\n    foreach\
    \ ($lengths as $length) {\n        if ($longest === null || $length < $longest)\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmx2hqe96.php:30\n\
    Stack trace:\n#0 /tmp/tmpmx2hqe96.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmx2hqe96.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $item) {\n        return strlen($carry) > strlen($item) ?\
    \ $carry : $item;\n    });\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppylf2hh7.php:25\n\
    Stack trace:\n#0 /tmp/tmppylf2hh7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppylf2hh7.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]++;\n\
    \        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dfsx1oh.php:32\n\
    Stack trace:\n#0 /tmp/tmp_dfsx1oh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_dfsx1oh.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($carry, $string) {\n    \
    \    return max($carry, strlen($string));\n    });\n    return $longest === false\
    \ ? None : $strings[array_search($longest, $strings)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurec9o48.php:23\n\
    Stack trace:\n#0 /tmp/tmpurec9o48.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpurec9o48.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n\n    return $longest === false ? false : $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm08_v8ym.php:27\n\
    Stack trace:\n#0 /tmp/tmpm08_v8ym.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm08_v8ym.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hvitzei.php:27\n\
    Stack trace:\n#0 /tmp/tmp6hvitzei.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6hvitzei.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]++;\n\
    \        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n</code>\n<|/ a tags=php,string |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$string = 'abc';\n$string2 = 'abcabc';\n$string3\
    \ = 'abcabcabc';\n$string4 = 'abcabcabcabc';\n$string5 = 'abcabcabcabcabc';\n\
    $string6 = 'abcabcabcabcabcabc';\n$string7 = 'abcabcabcabcabcabcabc';\n$string8\
    \ = 'abcabcabcabcabcabcabcabc';\n$string9 = 'abcabcabcabcabcabcabcabcabc';\n$string10\
    \ = 'abcabcabcabcabcabcabcabcabcabc';\n$string11 = 'abcabcabcabcabcabcabcabcabcabcabc';\n\
    $string12 = 'abcabcabcabcabcabcabcabcabcabcabcabc';\n$string13 = 'abcabcabcabcabcabcabcabcabcabcabcabcabc';\n\
    $string14 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n$string15 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n\
    $string16 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n$string17 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n\
    $string18 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n$string19\
    \ = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n$string20 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n\
    $string21 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc';\n\
    $string22 = 'abcabcabcabcabcabcabcabcabcabcabcabcab\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprf8ate5q.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]\
    \ += 1;\n        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy1sm9gna.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]\
    \ += 1;\n        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n$strings = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\");\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$strings = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\");\n$longest = array_reduce($strings, function($a, $b) { return\
    \ strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n$strings = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\");\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a tags=php,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\");\n$longest = array_reduce($strings, function($a, $b) { return\
    \ strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    );\n$longest = array_reduce($strings, function($a, $b) { return strlen($a) > strlen($b)\
    \ ? $a \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzitz7ord.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d_ncpj2.php:27\n\
    Stack trace:\n#0 /tmp/tmp3d_ncpj2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3d_ncpj2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return max($carry,\
    \ strlen($string));\n    });\n\n    return $longest > 1 ? $strings[$longest] :\
    \ null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpcgy01wve.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcgy01wve.php:26\nStack\
    \ trace:\n#0 /tmp/tmpcgy01wve.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcgy01wve.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ Try it with `['aaa', 'bbb', 'ccc']`.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. I also tested it with `['aaa', 'bbb', 'ccc', 'ddd']` and\
    \ it returned `'ccc'`.\n<|/ c |>\n<| c |>\nI tested it again and it doesn't work.\
    \ Try it with `['aaa', 'bbb', 'ccc', 'ddd', 'eee']`.\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. `['aaa', 'bbb', 'ccc', 'ddd', 'eee']` returns `'ccc'`.\n<|/ c |>\n\
    <| c |>\nI tested it again and it doesn't work. Try it with `['aaa', 'bbb', 'ccc',\
    \ 'ddd', 'eee', 'fff']`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$strings = array('aaa',\
    \ 'bbb', 'ccc', 'ddd', 'eee');\n$longest = array_reduce($strings, function($carry,\
    \ $string) {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$strings\
    \ = array('aaa', 'bbb', 'ccc', 'ddd', 'eee');\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$strings\
    \ = array('aaa', 'bbb', 'ccc', 'ddd', 'eee');\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$strings\
    \ = array('aaa', 'bbb', 'ccc', 'ddd', 'eee');\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > str\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk_10dd48.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n\
    \    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $lengths[] = strlen($string);\n    }\n    sort($lengths);\n    $longest\
    \ = array_pop($lengths);\n    foreach ($lengths as $length) {\n        if ($length\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwkr5aog.php:31\n\
    Stack trace:\n#0 /tmp/tmplwkr5aog.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplwkr5aog.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = array_map(function($s) { return strlen($s);\
    \ }, $strings);\n    $max_length = array_reduce($lengths, function($a, $b) {\n\
    \        return $a > $b ? $a : $b;\n    });\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length == $max_length) {\n\
    \            $longest = $string;\n            break;\n        }\n    }\n    return\
    \ $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kuf921l.php:25\n\
    Stack trace:\n#0 /tmp/tmp8kuf921l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8kuf921l.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $lengths[] = strlen($string);\n    }\n    sort($lengths);\n    foreach\
    \ ($lengths as $length) {\n        if ($longest === null || $length < $longest)\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0y_yazb.php:30\n\
    Stack trace:\n#0 /tmp/tmpy0y_yazb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpy0y_yazb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ array_reduce($strings, function ($result, $string) {\n        return strlen($result)\
    \ > strlen($string) ? $result : $string;\n    });\n\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5duyot30.php:27\n\
    Stack trace:\n#0 /tmp/tmp5duyot30.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5duyot30.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]++;\n\
    \        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkg_nzp0h.php:32\n\
    Stack trace:\n#0 /tmp/tmpkg_nzp0h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkg_nzp0h.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($lengths[$length] === null)\
    \ {\n            $lengths[$length] = $string;\n        } else {\n            $lengths[$length]\
    \ = max($lengths[$length], $string);\n        }\n    }\n    if (count($lengths)\
    \ === 0) {\n        return null;\n    }\n    $longest = max($lengths);\n    foreach\
    \ ($lengths as $length => $string) {\n        if ($lengths[$length] === $longest)\
    \ {\n            return $string;\n        }\n    }\n    return null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_8wxjtj.php:38\n\
    Stack trace:\n#0 /tmp/tmp6_8wxjtj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6_8wxjtj.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($lengths[$length] === null)\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]++;\n\
    \        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if you have multiple strings of the same length. Try it with `longest(['a',\
    \ 'bb', 'ccc'])`.\n<|/ c |>\n<| c |>\n: I added a solution that works with multiple\
    \ strings of the same length.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php\n\
    $string = \"Hello World\";\n$string2 = \"Hello World\";\n$string3 = \"Hello World\"\
    ;\n$string4 = \"Hello World\";\n$string5 = \"Hello World\";\n$string6 = \"Hello\
    \ World\";\n$string7 = \"Hello World\";\n$string8 = \"Hello World\";\n$string9\
    \ = \"Hello World\";\n$string10 = \"Hello World\";\n$string11 = \"Hello World\"\
    ;\n$string12 = \"Hello World\";\n$string13 = \"Hello World\";\n$string14 = \"\
    Hello World\";\n$string15 = \"Hello World\";\n$string16 = \"Hello World\";\n$string17\
    \ = \"Hello World\";\n$string18 = \"Hello World\";\n$string19 = \"Hello World\"\
    ;\n$string20 = \"Hello World\";\n$string21 = \"Hello World\";\n$string22 = \"\
    Hello World\";\n$string23 = \"Hello World\";\n$string24 = \"Hello World\";\n$string25\
    \ = \"Hello World\";\n$string26 = \"Hello World\";\n$string27 = \"Hello World\"\
    ;\n$string28 = \"Hello World\";\n$string29 = \"Hello World\";\n$string30 = \"\
    Hello World\";\n$string31 = \"Hello World\";\n$string32 = \"Hello World\";\n$string33\
    \ = \"Hello World\";\n$string34 = \"Hello World\";\n$string35 = \"Hello World\"\
    ;\n$string36 = \"Hello World\";\n$string37 = \"Hello World\";\n$string38 = \"\
    Hello World\";\n$string39 = \"Hello World\";\n$string40 = \"Hello World\";\n$string41\
    \ = \"Hello World\";\n$string42 = \"Hello World\";\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmperlrobfu.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $lengths[] = strlen($string);\n    }\n    asort($lengths);\n    foreach\
    \ ($lengths as $length) {\n        if ($longest === null || $length < $longest)\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgmmm2qn.php:30\n\
    Stack trace:\n#0 /tmp/tmpmgmmm2qn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmgmmm2qn.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = array_map('strlen', $strings);\n   \
    \ foreach ($lengths as $length) {\n        if ($length > strlen($longest)) {\n\
    \            $longest = $length;\n        }\n    }\n    return $longest ? $strings[$longest]\
    \ : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfgy2tdx.php:26\n\
    Stack trace:\n#0 /tmp/tmpxfgy2tdx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxfgy2tdx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return max($carry, strlen($string));\n\
    \    });\n    return $strings[array_search($longest, $strings)];\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpgbwshgb5.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgbwshgb5.php:24\nStack\
    \ trace:\n#0 /tmp/tmpgbwshgb5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgbwshgb5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdp35qzvl.php:27\n\
    Stack trace:\n#0 /tmp/tmpdp35qzvl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdp35qzvl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($result, $string) {\n   \
    \     return strlen($result) > strlen($string) ? $result : $string;\n    });\n\
    \    return $longest === false ? false : $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fme633o.php:22\n\
    Stack trace:\n#0 /tmp/tmp3fme633o.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3fme633o.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ > $longest) {\n            $longest = $string;\n        }\n    }\n    return\
    \ $longest ?: null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuw33vg1.php:27\n\
    Stack trace:\n#0 /tmp/tmpwuw33vg1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwuw33vg1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return None;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return max($carry, strlen($string));\n\
    \    });\n    foreach ($strings as $string) {\n        if (strlen($string) ==\
    \ $longest) {\n            return $string;\n        }\n    }\n    return None;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant None - assumed 'None' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpm1j_x5mi.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm1j_x5mi.php:29\nStack\
    \ trace:\n#0 /tmp/tmpm1j_x5mi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm1j_x5mi.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($carry, $item) {\n      \
    \  return strlen($carry) > strlen($item) ? $carry : $item;\n    });\n    return\
    \ $longest === false ? false : $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpm2mu73.php:22\n\
    Stack trace:\n#0 /tmp/tmpbpm2mu73.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbpm2mu73.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z75nh2i.php:27\n\
    Stack trace:\n#0 /tmp/tmp8z75nh2i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8z75nh2i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ < $longest) {\n            $longest = $length;\n        }\n        $lengths[$length]\
    \ = $string;\n    }\n    arsort($lengths);\n    return $lengths[0] ?? null;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a function that will\
    \ return the longest string in a list of strings. I used the array_map function\
    \ and array_filter functions to get the longest string in the list. \n<code>\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2jji0x4h.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (isset($lengths[$length]))\
    \ {\n            $lengths[$length] = max($lengths[$length], $length);\n      \
    \  } else {\n            $lengths[$length] = $length;\n        }\n    }\n    foreach\
    \ ($lengths as $length => $count) {\n        if ($longest === null || $lengths[$length]\
    \ > $lengths[$longest]) {\n            $longest = $length;\n        }\n    }\n\
    \    return $longest === null ? null : $strings[$longest];\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| c |>\nThanks for your answer. Your code works fine for\
    \ most of the cases but fails for some cases. Please see my updated question for\
    \ details.\n<|/ c |>\n<| c |>\nI updated my answer to handle your updated question.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works fine\
    \ for most of the cases but fails for some cases. Please see my updated question\
    \ for details.\n<|/ c |>\n<| c |>\nI updated my answer to handle your updated\
    \ question. Hope it helps.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $strings = array('abc', 'ab', 'ac', 'abcde', 'abcd', 'abc', 'ab');\n$longest =\
    \ array_reduce($strings, function ($a, $b) {\n    return max($a, $b);\n});\nvar_dump($longest);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$strings = array('abc',\
    \ 'ab', 'ac', 'abcde', 'abcd', 'abc', 'ab');\n$longest = array_reduce($strings,\
    \ function ($a, $b) {\n    return max($a, $b);\n});\nvar_dump($longest);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n<?php\n$strings = array('abc',\
    \ 'ab', 'ac', 'abcde', 'abcd', 'abc', 'ab');\n$longest = array_reduce($strings,\
    \ function ($a, $b) {\n    return max($a, $b);\n});\nvar_dump($longest);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$strings = array('abc', 'ab',\
    \ 'ac', 'abcde', 'abcd', 'abc', 'ab');\n$longest = array_reduce($strings, function\
    \ ($\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpin8kla1g.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_reduce($strings, function ($result, $string) {\n   \
    \     return strlen($string) > strlen($result) ? $string : $result;\n    });\n\
    \    return count($strings) > 0 ? $longest : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevowk603.php:27\n\
    Stack trace:\n#0 /tmp/tmpevowk603.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpevowk603.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length < strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpokaevjck.php:27\n\
    Stack trace:\n#0 /tmp/tmpokaevjck.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpokaevjck.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
