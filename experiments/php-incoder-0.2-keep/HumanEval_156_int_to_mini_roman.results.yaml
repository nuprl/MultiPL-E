name: HumanEval_156_int_to_mini_roman
language: php
results:
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $i = 0;\n    while ($num > 0)\
    \ {\n        $num -= 1000;\n        $roman .= 'M';\n        $i++;\n    }\n   \
    \ while ($num >= 1000) {\n        $num -= 1000;\n        $roman .= 'CM';\n   \
    \     $i++;\n    }\n    while ($num >= 500) {\n        $num -= 500;\n        $roman\
    \ .= 'D';\n        $i++;\n    }\n    while ($num >= 100) {\n        $num -= 100;\n\
    \        $roman .= 'CD';\n        $i++;\n    }\n    while ($num >= 50) {\n   \
    \     $num -= 50;\n        $roman .= 'C';\n        $i++;\n    }\n    while ($num\
    \ >= 10) {\n        $num -= 10;\n        $roman .= 'XC';\n        $i++;\n    }\n\
    \    while ($num >= 5) {\n        $num -= 5;\n        $roman .= 'L';\n       \
    \ $i++;\n    }\n    while ($num >= 1) {\n        $num -= 1;\n        $roman .=\
    \ 'XL';\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_loghkl.php:61\n\
    Stack trace:\n#0 /tmp/tmp8_loghkl.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp8_loghkl.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_bqbxgl.php:27\n\
    Stack trace:\n#0 /tmp/tmp6_bqbxgl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6_bqbxgl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpkfkt5l7v.php:12\n\
    Stack trace:\n#0 /tmp/tmpkfkt5l7v.php(19): int_to_mini_roman(19)\n#1 /tmp/tmpkfkt5l7v.php(23):\
    \ candidate(19)\n#2 /tmp/tmpkfkt5l7v.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpkfkt5l7v.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41f9usc6.php:27\n\
    Stack trace:\n#0 /tmp/tmp41f9usc6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp41f9usc6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX', 'XX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39buk0om.php:26\n\
    Stack trace:\n#0 /tmp/tmp39buk0om.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp39buk0om.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29r74eo_.php:27\n\
    Stack trace:\n#0 /tmp/tmp29r74eo_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp29r74eo_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpf4clfngj.php:12\n\
    Stack trace:\n#0 /tmp/tmpf4clfngj.php(18): int_to_mini_roman(19)\n#1 /tmp/tmpf4clfngj.php(22):\
    \ candidate(19)\n#2 /tmp/tmpf4clfngj.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpf4clfngj.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    while ($number >= 1000) {\n        $roman .= 'M';\n\
    \        $number -= 1000;\n    }\n    while ($number >= 900) {\n        $roman\
    \ .= 'CM';\n        $number -= 900;\n    }\n    while ($number >= 500) {\n   \
    \     $roman .= 'D';\n        $number -= 500;\n    }\n    while ($number >= 400)\
    \ {\n        $roman .= 'CD';\n        $number -= 400;\n    }\n    while ($number\
    \ >= 100) {\n        $roman .= 'C';\n        $number -= 100;\n    }\n    while\
    \ ($number >= 90) {\n        $roman .= 'XC';\n        $number -= 90;\n    }\n\
    \    while ($number >= 50) {\n        $roman .= 'L';\n        $number -= 50;\n\
    \    }\n    while ($number >= 40) {\n        $roman .= 'XL';\n        $number\
    \ -= 40;\n    }\n    while ($number >= 10) {\n        $roman .= 'X';\n       \
    \ $number -= 10;\n    }\n    while ($number >= 9) {\n        $roman .= 'IX';\n\
    \        $number -= 9;\n    }\n    while ($number >= 5) {\n        $roman .= 'V';\n\
    \        $number -= 5;\n    }\n    while ($number >= 4) {\n        $roman .= 'IV';\n\
    \        $number -= 4;\n    }\n    while ($number >= 1) {\n        $roman .= 'I';\n\
    \        $number -= 1;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0a79t94.php:71\n\
    Stack trace:\n#0 /tmp/tmpr0a79t94.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpr0a79t94.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcr4w3ki_.php:27\n\
    Stack trace:\n#0 /tmp/tmpcr4w3ki_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcr4w3ki_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num += 1000;\n    while ($num\
    \ > 0) {\n        $roman .= roman($num % 10);\n        $num = ($num - $num % 10)\
    \ / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpclevepr0.php:14\n\
    Stack trace:\n#0 /tmp/tmpclevepr0.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpclevepr0.php(25):\
    \ candidate(19)\n#2 /tmp/tmpclevepr0.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpclevepr0.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp878o6ym4.php:27\n\
    Stack trace:\n#0 /tmp/tmp878o6ym4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp878o6ym4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        1 => 'i', 2 => 'ii',\
    \ 3 => 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n        8 => 'ix',\
    \ 9 => 'x', 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xvi', 14 => 'xvii',\n\
    \        15 => 'xix', 16 => 'xx', 17 => 'xxi', 18 => 'xxii', 19 => 'xxiii', 20\
    \ => 'xxiv',\n        30 => 'xxv', 40 => 'xxvi', 50 => 'xxvii', 60 => 'xxix',\
    \ 70 => 'xxx', 80 => 'xxxx',\n        90 => 'xxxxx', 100 => 'xxxxxx', 1000 =>\
    \ 'xxxxxxx'\n    );\n    if ($number < 0 || $number > 1000) {\n        return\
    \ $roman;\n    }\n    $roman = array_shift($roman_numerals);\n    $roman = str_pad($roman,\
    \ 3, '0', STR_PAD_LEFT);\n    $roman = str_pad($roman, 3, '0', STR_PAD_BOTH);\n\
    \    $roman = str_pad($roman, 3, '0', STR_PAD_RIGHT);\n    $roman = str_pad($roman,\
    \ 3, '0', STR_PAD_BOTH);\n    $roman = str_pad($roman, 3, '0', STR_PAD_RIGHT);\n\
    \    $roman = str_pad($roman, 3, '0', STR_PAD_BOTH);\n    $roman = str_pad($roman,\
    \ 3, '0', STR_PAD_RIGHT);\n    $roman = str_pad($roman, 3, '0', STR_PAD_BOTH);\n\
    \    $roman = str_pad($roman, 3, '0', STR_PAD_RIGHT);\n    $roman = str_pad($roman,\
    \ 3, '0', STR_PAD_BOTH);\n    $roman = str_pad($roman, 3, '0', STR_PAD_RIGHT);\n\
    \    $roman = str_pad($roman, 3, '0', STR_PAD_BOTH);\n    $roman = str_pad($roman,\
    \ 3, '0', STR_PAD_RIGHT);\n    $roman = str_pad($roman, 3, '0', STR_PAD_BOTH);\n\
    \    $roman = str_pad($roman, 3, '0', STR_PAD_RIGHT);\n    $roman = str_pad($roman,\
    \ 3, '0', STR_PAD_BOTH);\n    $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa6tqusw1.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    while (true) {\n        $remainder\
    \ = $num % 10;\n        $roman .= $remainder == 0 ? $num : $remainder;\n     \
    \   $num = (int) ($num / 10);\n        if ($num == 0) {\n            break;\n\
    \        }\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bhpihyk.php:28\n\
    Stack trace:\n#0 /tmp/tmp5bhpihyk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5bhpihyk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8kpy5ep.php:27\n\
    Stack trace:\n#0 /tmp/tmpx8kpy5ep.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpx8kpy5ep.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num = $num % 10;\n    $num =\
    \ $num * 1000;\n    $num = $num + 900;\n    while ($num > 0) {\n        $roman\
    \ .= $num % 10;\n        $num = $num / 10;\n    }\n    return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a7l7s5q.php:27\n\
    Stack trace:\n#0 /tmp/tmp7a7l7s5q.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7a7l7s5q.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ '' : $remainder == 1 ? 'i' : 'v';\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg83yjol2.php:28\n\
    Stack trace:\n#0 /tmp/tmpg83yjol2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg83yjol2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8s22gfbz.php:23\n\
    Stack trace:\n#0 /tmp/tmp8s22gfbz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8s22gfbz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        100  => 'M',\n  \
    \      500  => 'D',\n        1000 => 'C',\n        2000 => 'L',\n        3000\
    \ => 'XL',\n        4000 => 'XC',\n        5000 => 'L',\n        6000 => 'X',\n\
    \        7000 => 'IX',\n        8000 => 'V',\n        9000 => 'IV',\n    );\n\
    \    foreach ($roman_numerals as $roman => $numeral) {\n        if ($number >=\
    \ $roman) {\n            $number = floor($number / $roman) * $roman;\n       \
    \     $roman .= $numeral;\n            break;\n        }\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjbg569c.php:39\n\
    Stack trace:\n#0 /tmp/tmpvjbg569c.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpvjbg569c.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length - $i) {\n      break;\n    }\n    $number\
    \ -= $roman_numerals_length - $i;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmancbr0j.php:28\n\
    Stack trace:\n#0 /tmp/tmpmancbr0j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmancbr0j.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i]\
    \ * pow(10, $roman_numerals_length - $i - 1);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpu5ri78vf.php on line\
    \ 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5ri78vf.php:24\n\
    Stack trace:\n#0 /tmp/tmpu5ri78vf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpu5ri78vf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpr3amzhb3.php:12\n\
    Stack trace:\n#0 /tmp/tmpr3amzhb3.php(19): int_to_mini_roman(19)\n#1 /tmp/tmpr3amzhb3.php(23):\
    \ candidate(19)\n#2 /tmp/tmpr3amzhb3.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpr3amzhb3.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i]\
    \ * pow(10, $roman_numerals_length - $i - 1);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpo71r1cal.php on line\
    \ 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo71r1cal.php:24\n\
    Stack trace:\n#0 /tmp/tmpo71r1cal.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpo71r1cal.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xvi', 14 => 'xv',\n    15 =>\
    \ 'xvii', 16 => 'xix', 17 => 'xx', 18 => 'xxi', 19 => 'xxii', 20 => 'xxiii',\n\
    \    21 => 'xxiv', 22 => 'xxv', 23 => 'xxvi', 24 => 'xxv', 25 => 'xxvii', 26 =>\
    \ 'xxix',\n    27 => 'xxx', 28 => 'xxx', 29 => 'xxxx', 30 => 'xxxxx', 31 => 'xxxxxx',\
    \ 32 => 'xxxxxxx',\n    33 => 'xxxxxxxx', 34 => 'xxxxxxxxx', 35 => 'xxxxxxxxxx',\
    \ 36 => 'xxxxxxxxxxx',\n    37 => 'xxxxxxxxxxxx', 38 => 'xxxxxxxxxxxxx', 39 =>\
    \ 'xxxxxxxxxxxxxx', 40 => 'xxxxxxxxxxxxxxx',\n    41 => 'xxxxxxxxxxxxxxxx', 42\
    \ => 'xxxxxxxxxxxxxxxxx', 43 => 'xxxxxxxxxxxxxxxxxx', 44 => 'xxxxxxxxxxxxxxxxxxx',\n\
    \    45 => 'xxxxxxxxxxxxxxxxxxxx', 46 => 'xxxxxxxxxxxxxxxxxxxxx', 47 => 'xxxxxxxxxxxxxxxxxxxxxx',\
    \ 48 => 'xxxxxxxxxxxxxxxxxxxxxxx',\n    49 => 'xxxxxxxxxxxxxxxxxxxxxxxx', 50 =>\
    \ 'xxxxxxxxxxxxxxxxxxxxxxxxx', 51 => 'xxxxxxxxxxxxxxxxxxxxxxxxxx', 52 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxx',\n\
    \    53 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx', 54 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\
    \ 55 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 56 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n\
    \    57 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 58 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\
    \ 59 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 60 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n\
    \    61 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 62 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\
    \ 63 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 64 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n\
    \    65 => 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 66 => '\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkhb21xk4.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length * $i) {\n      $roman .= $roman_numerals[($number\
    \ - $roman_numerals_length * $i) % $roman_numerals_length];\n    }\n  }\n  return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupusfjp4.php:27\n\
    Stack trace:\n#0 /tmp/tmpupusfjp4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpupusfjp4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    50 => 'L',\n    100 => 'C',\n    500 => 'D',\n    1000 =>\
    \ 'M',\n    10000 => 'M'\n  );\n  foreach ($roman_numerals as $roman => $numeral)\
    \ {\n    if ($number >= $roman) {\n      $roman = $numeral;\n      $number = $number\
    \ - $roman;\n    }\n  }\n  return $roman . $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp9evnd0ch.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmp9evnd0ch.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmp9evnd0ch.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9evnd0ch.php:35\n\
    Stack trace:\n#0 /tmp/tmp9evnd0ch.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9evnd0ch.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcowat519.php:74\n\
    Stack trace:\n#0 /tmp/tmpcowat519.php(90): test()\n#1 {main}\n  thrown in /tmp/tmpcowat519.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral_to_alpha($num\
    \ % 10);\n    $num = ($num / 10);\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral_to_alpha()\
    \ in /tmp/tmp2q3xjm5t.php:13\nStack trace:\n#0 /tmp/tmp2q3xjm5t.php(20): int_to_mini_roman(19)\n\
    #1 /tmp/tmp2q3xjm5t.php(24): candidate(19)\n#2 /tmp/tmp2q3xjm5t.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2q3xjm5t.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfppghoxl.php:27\n\
    Stack trace:\n#0 /tmp/tmpfppghoxl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfppghoxl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpnltzx5k2.php:12\n\
    Stack trace:\n#0 /tmp/tmpnltzx5k2.php(18): int_to_mini_roman(19)\n#1 /tmp/tmpnltzx5k2.php(22):\
    \ candidate(19)\n#2 /tmp/tmpnltzx5k2.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpnltzx5k2.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    50 => 'L',\n    100 => 'C',\n    500 => 'D',\n    1000 =>\
    \ 'M',\n    10000 => 'M'\n  );\n  foreach ($roman_numerals as $roman => $numeral)\
    \ {\n    if ($number >= $roman) {\n      $roman = $numeral;\n      $number = $number\
    \ - $roman;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpwgsw1wj1.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpwgsw1wj1.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpwgsw1wj1.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgsw1wj1.php:35\n\
    Stack trace:\n#0 /tmp/tmpwgsw1wj1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwgsw1wj1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbd_2pw49.php:23\n\
    Stack trace:\n#0 /tmp/tmpbd_2pw49.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbd_2pw49.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9503hrs.php:27\n\
    Stack trace:\n#0 /tmp/tmpe9503hrs.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpe9503hrs.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q1ky4n4.php:27\n\
    Stack trace:\n#0 /tmp/tmp1q1ky4n4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1q1ky4n4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  while ($number >= 1000) {\n    $roman .= 'M';\n    $number\
    \ -= 1000;\n  }\n  while ($number >= 900) {\n    $roman .= 'CM';\n    $number\
    \ -= 900;\n  }\n  while ($number >= 500) {\n    $roman .= 'D';\n    $number -=\
    \ 500;\n  }\n  while ($number >= 400) {\n    $roman .= 'CD';\n    $number -= 400;\n\
    \  }\n  while ($number >= 100) {\n    $roman .= 'C';\n    $number -= 100;\n  }\n\
    \  while ($number >= 90) {\n    $roman .= 'XC';\n    $number -= 90;\n  }\n  while\
    \ ($number >= 50) {\n    $roman .= 'L';\n    $number -= 50;\n  }\n  while ($number\
    \ >= 40) {\n    $roman .= 'XL';\n    $number -= 40;\n  }\n  while ($number >=\
    \ 10) {\n    $roman .= 'X';\n    $number -= 10;\n  }\n  while ($number >= 9) {\n\
    \    $roman .= 'IX';\n    $number -= 9;\n  }\n  while ($number >= 5) {\n    $roman\
    \ .= 'V';\n    $number -= 5;\n  }\n  while ($number >= 4) {\n    $roman .= 'IV';\n\
    \    $number -= 4;\n  }\n  while ($number >= 1) {\n    $roman .= 'I';\n    $number\
    \ -= 1;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiysysbkg.php:71\n\
    Stack trace:\n#0 /tmp/tmpiysysbkg.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpiysysbkg.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[$number % 1000];\n    $number /= 1000;\n  }\n\
    \  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6qgutsh.php:27\n\
    Stack trace:\n#0 /tmp/tmpo6qgutsh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo6qgutsh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpz5d9ncpr.php:12\nStack trace:\n#0 /tmp/tmpz5d9ncpr.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpz5d9ncpr.php(22): candidate(19)\n#2 /tmp/tmpz5d9ncpr.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz5d9ncpr.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n\n  $roman =\
    \ '';\n  $numerals = array('', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII',\
    \ 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $numerals[$i];\n\
    \  }\n\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d2hf6uf.php:28\n\
    Stack trace:\n#0 /tmp/tmp_d2hf6uf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_d2hf6uf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    40 => 'C',\n    100 => 'D',\n    400 => 'CD',\n    1000 =>\
    \ 'CM',\n    10000 => 'M',\n    100000 => 'M',\n    1000000 => 'B',\n    10000000\
    \ => 'B',\n    100000000 => 'B',\n    1000000000 => 'B',\n    10000000000 => 'B',\n\
    \    100000000000 => 'B',\n    1000000000000 => 'B',\n    10000000000000 => 'B',\n\
    \    100000000000000 => 'B',\n    1000000000000000 => 'B',\n    10000000000000000\
    \ => 'B',\n    100000000000000000 => 'B',\n    1000000000000000000 => 'B',\n \
    \   10000000000000000000 => 'B',\n    100000000000000000000 => 'B',\n    1000000000000000000000\
    \ => 'B',\n    10000000000000000000000 => 'B',\n    100000000000000000000000 =>\
    \ 'B',\n    1000000000000000000000000 => 'B',\n    10000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000 => 'B',\n    1000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000 => 'B',\n    100000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000 => 'B',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000000 => 'B',\n\
    \    1000000000000000000000000000000000000000000\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp90je03u5.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoge0c_ak.php:27\n\
    Stack trace:\n#0 /tmp/tmpoge0c_ak.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpoge0c_ak.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5aszcvn.php:27\n\
    Stack trace:\n#0 /tmp/tmp_5aszcvn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_5aszcvn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zke2kjx.php:27\n\
    Stack trace:\n#0 /tmp/tmp_zke2kjx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_zke2kjx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3t_05hgl.php:27\n\
    Stack trace:\n#0 /tmp/tmp3t_05hgl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3t_05hgl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $romans[$remainder];\n    if ($num == 0) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob_w8oag.php:28\n\
    Stack trace:\n#0 /tmp/tmpob_w8oag.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpob_w8oag.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    10 => 'iii',\n    20 => 'iv',\n    40 => 'v',\n    80 => 'vi',\n    100 =>\
    \ 'vii',\n    200 => 'viii',\n    300 => 'ix',\n    400 => 'x',\n    500 => 'xi',\n\
    \    600 => 'xii',\n    700 => 'xiii',\n    800 => 'xiv',\n    900 => 'xv',\n\
    \    1000 => 'xvi',\n    10000 => 'xvii',\n    100000 => 'xix',\n    1000000 =>\
    \ 'xixi',\n    10000000 => 'xixii',\n    100000000 => 'xixiii',\n    1000000000\
    \ => 'xixiv',\n    10000000000 => 'xixv',\n    100000000000 => 'xixvi',\n    1000000000000\
    \ => 'xixvii',\n    10000000000000 => 'xixix',\n    100000000000000 => 'xixixi',\n\
    \    1000000000000000 => 'xixixii',\n    10000000000000000 => 'xixixiii',\n  \
    \  100000000000000000 => 'xixixiv',\n    1000000000000000000 => 'xixixv',\n  \
    \  10000000000000000000 => 'xixixvi',\n    100000000000000000000 => 'xixixvii',\n\
    \    1000000000000000000000 => 'xixixix',\n    10000000000000000000000 => 'xixixixi',\n\
    \    100000000000000000000000 => 'xixixixii',\n    1000000000000000000000000 =>\
    \ 'xixixixiii',\n    10000000000000000000000000 => 'xixixixiv',\n    100000000000000000000000000\
    \ => 'xixixixv',\n    1000000000000000000000000000 => 'xixixixvi',\n    10000000000000000000000000000\
    \ => 'xixixixvii',\n    100000000000000000000000000000 => 'xixixixix',\n    1000000000000000000000000000000\
    \ => 'xixixixixi',\n    10000000000000000000000000000000 => 'xixixixii',\n   \
    \ 100000000000000000000000000000000 => 'xixixixiii',\n    1000000000000000000000000000000000\
    \ => 'xixixixiv',\n    10000000000000000000000000000000000 => 'xixixixv',\n  \
    \  100000000000000000000000000000000000 => 'xixixixvi',\n    1000000000000000000000000000000000000\
    \ => 'xixixixvii',\n    10000000000000000000000000000000000000 => 'xixixix\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4ur20k7j.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= $num % 10;\n        $num\
    \ = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12uj24w5.php:26\n\
    Stack trace:\n#0 /tmp/tmp12uj24w5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp12uj24w5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[$number % 1000];\n    $number /= 1000;\n  }\n\
    \  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzt__ex8_.php:27\n\
    Stack trace:\n#0 /tmp/tmpzt__ex8_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzt__ex8_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzh8r2i8b.php:27\n\
    Stack trace:\n#0 /tmp/tmpzh8r2i8b.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzh8r2i8b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    5000 => 'cm',\n    10000 => 'd',\n    100000 => 'd',\n    1000000\
    \ => 'cm',\n    10000000 => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'cm',\n\
    \    10000000000 => 'd',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n\
    \    10000000000000 => 'd',\n    100000000000000 => 'd',\n    1000000000000000\
    \ => 'd',\n    10000000000000000 => 'd',\n    100000000000000000 => 'd',\n   \
    \ 1000000000000000000 => 'd',\n    10000000000000000000 => 'd',\n    100000000000000000000\
    \ => 'd',\n    1000000000000000000000 => 'd',\n    10000000000000000000000 =>\
    \ 'd',\n    100000000000000000000000 => 'd',\n    1000000000000000000000000 =>\
    \ 'd',\n    10000000000000000000000000 => 'd',\n    100000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000 => 'd',\n    10000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000 => 'd',\n    1000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000000 => 'd',\n  \
    \  100000000000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    100000000000000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    1000000000000000000\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd1ol3iix.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dz8_mih.php:27\n\
    Stack trace:\n#0 /tmp/tmp8dz8_mih.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8dz8_mih.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadl3yzzf.php:27\n\
    Stack trace:\n#0 /tmp/tmpadl3yzzf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpadl3yzzf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    40 => 'C',\n    100 => 'D',\n    400 => 'CD',\n    1000 =>\
    \ 'CM',\n    10000 => 'M',\n    100000 => 'M',\n    1000000 => 'B',\n    10000000\
    \ => 'B',\n    100000000 => 'B',\n    1000000000 => 'B',\n    10000000000 => 'B',\n\
    \    100000000000 => 'B',\n    1000000000000 => 'B',\n    10000000000000 => 'B',\n\
    \    100000000000000 => 'B',\n    1000000000000000 => 'B',\n    10000000000000000\
    \ => 'B',\n    100000000000000000 => 'B',\n    1000000000000000000 => 'B',\n \
    \   10000000000000000000 => 'B',\n    100000000000000000000 => 'B',\n    1000000000000000000000\
    \ => 'B',\n    10000000000000000000000 => 'B',\n    100000000000000000000000 =>\
    \ 'B',\n    1000000000000000000000000 => 'B',\n    10000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000 => 'B',\n    1000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000 => 'B',\n    100000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000 => 'B',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000000 => 'B',\n\
    \    1000000000000000000000000000000000000000000\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi_hevl78.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400, 'C' => 100, 'XC' => 90,\n    'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000) {\n\
    \    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n \
    \   $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n  \
    \  $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n    $roman\
    \ .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman .=\
    \ 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .= 'XC';\n\
    \    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n    $number\
    \ -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n    $number -=\
    \ 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number -= 10;\n\
    \  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n  }\n\
    \  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n  while\
    \ ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while ($number\
    \ >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2saqfkr5.php:73\n\
    Stack trace:\n#0 /tmp/tmp2saqfkr5.php(89): test()\n#1 {main}\n  thrown in /tmp/tmp2saqfkr5.php\
    \ on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= $num % 10;\n        $num\
    \ = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ky4j_s1.php:26\n\
    Stack trace:\n#0 /tmp/tmp_ky4j_s1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_ky4j_s1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_length = strlen($roman);\n  for ($i = 0; $i < $roman_length;\
    \ $i++) {\n    $roman .= roman_chars[$number % 1000];\n    $number /= 1000;\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32b4zd1u.php:24\n\
    Stack trace:\n#0 /tmp/tmp32b4zd1u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp32b4zd1u.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= $num % 10;\n        $num\
    \ = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprluf7rb6.php:26\n\
    Stack trace:\n#0 /tmp/tmprluf7rb6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprluf7rb6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    while ($num > 0) {\n        $roman\
    \ .= roman_numeral($num % 10);\n        $num = ($num - $num % 10) / 10;\n    }\n\
    \    return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmppfo4nf1e.php:13\nStack trace:\n#0 /tmp/tmppfo4nf1e.php(20): int_to_mini_roman(19)\n\
    #1 /tmp/tmppfo4nf1e.php(24): candidate(19)\n#2 /tmp/tmppfo4nf1e.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppfo4nf1e.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpe1v7vb27.php:12\n\
    Stack trace:\n#0 /tmp/tmpe1v7vb27.php(18): int_to_mini_roman(19)\n#1 /tmp/tmpe1v7vb27.php(22):\
    \ candidate(19)\n#2 /tmp/tmpe1v7vb27.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpe1v7vb27.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8wdvg0gy.php:74\n\
    Stack trace:\n#0 /tmp/tmp8wdvg0gy.php(90): test()\n#1 {main}\n  thrown in /tmp/tmp8wdvg0gy.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    50 => 'L',\n    100 => 'C',\n    500 => 'D',\n    1000 =>\
    \ 'M',\n  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    while ($number\
    \ >= $roman) {\n      $roman .= $numeral;\n      $number -= $roman;\n    }\n \
    \ }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp189ct75i.php:34\n\
    Stack trace:\n#0 /tmp/tmp189ct75i.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp189ct75i.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xvi', 14 => 'xvii',\n    15 =>\
    \ 'xix', 16 => 'xx', 17 => 'xxi', 18 => 'xxii', 19 => 'xxiii', 20 => 'xxiv',\n\
    \    30 => 'xxv', 40 => 'xxvi', 50 => 'xxvii', 60 => 'xxix', 70 => 'xxx', 80 =>\
    \ 'xxxx',\n    90 => 'xxxxx', 100 => 'xxxxxx', 1000 => 'xxxxxxx'\n  );\n  while\
    \ ($number >= 1000) {\n    $roman .= $roman_numerals[$number % 1000];\n    $number\
    \ /= 1000;\n  }\n  $roman .= $roman_numerals[$number];\n  return $roman;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzhk79m4m.php:31\n\
    Stack trace:\n#0 /tmp/tmpzhk79m4m.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzhk79m4m.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpg52ottg4.php:12\nStack trace:\n#0 /tmp/tmpg52ottg4.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpg52ottg4.php(22): candidate(19)\n#2 /tmp/tmpg52ottg4.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg52ottg4.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpl0onn46w.php:12\n\
    Stack trace:\n#0 /tmp/tmpl0onn46w.php(18): int_to_mini_roman(19)\n#1 /tmp/tmpl0onn46w.php(22):\
    \ candidate(19)\n#2 /tmp/tmpl0onn46w.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpl0onn46w.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmp0o1dtfv8.php:12\nStack trace:\n#0 /tmp/tmp0o1dtfv8.php(19): int_to_mini_roman(19)\n\
    #1 /tmp/tmp0o1dtfv8.php(23): candidate(19)\n#2 /tmp/tmp0o1dtfv8.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0o1dtfv8.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5cul7ki.php:27\n\
    Stack trace:\n#0 /tmp/tmph5cul7ki.php(43): test()\n#1 {main}\n  thrown in /tmp/tmph5cul7ki.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $num * 100 + $remainder;\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgr3rvb3.php:28\n\
    Stack trace:\n#0 /tmp/tmpmgr3rvb3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmgr3rvb3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[$number % 1000];\n    $number /= 1000;\n  }\n\
    \  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidc_8168.php:27\n\
    Stack trace:\n#0 /tmp/tmpidc_8168.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpidc_8168.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpe7iquma4.php:12\n\
    Stack trace:\n#0 /tmp/tmpe7iquma4.php(19): int_to_mini_roman(19)\n#1 /tmp/tmpe7iquma4.php(23):\
    \ candidate(19)\n#2 /tmp/tmpe7iquma4.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpe7iquma4.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n  $roman = '';\n\
    \  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman($i);\n  }\n  return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpeiwfwe5s.php:15\n\
    Stack trace:\n#0 /tmp/tmpeiwfwe5s.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpeiwfwe5s.php(25):\
    \ candidate(19)\n#2 /tmp/tmpeiwfwe5s.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpeiwfwe5s.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        1000, 'M', 'MM',\
    \ 'MMM',\n        100, 'D', 'DD', 'DD ',\n        50, 'C', 'CC ',\n        20,\
    \ 'X', 'XX ',\n        10, 'L', 'LL ',\n        5, 'X', 'XX '\n    );\n    $roman_numeral_length\
    \ = count($roman_numerals);\n    for ($i = 0; $i < $roman_numeral_length; $i++)\
    \ {\n        if ($number >= $roman_numerals[$i]) {\n            $roman .= $roman_numerals[$i];\n\
    \            $number -= $roman_numerals[$i];\n        } else {\n            $roman\
    \ .= $roman_numerals[$i];\n        }\n    }\n    return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpm1_z8ly2.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1_z8ly2.php:36\n\
    Stack trace:\n#0 /tmp/tmpm1_z8ly2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpm1_z8ly2.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= $num % 10;\n        $num\
    \ = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba9qc7_w.php:26\n\
    Stack trace:\n#0 /tmp/tmpba9qc7_w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpba9qc7_w.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmp09yvr5tk.php:12\nStack trace:\n#0 /tmp/tmp09yvr5tk.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmp09yvr5tk.php(22): candidate(19)\n#2 /tmp/tmp09yvr5tk.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp09yvr5tk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02v0w43d.php:74\n\
    Stack trace:\n#0 /tmp/tmp02v0w43d.php(90): test()\n#1 {main}\n  thrown in /tmp/tmp02v0w43d.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  while ($number >= 1000) {\n    $roman .= 'M';\n    $number\
    \ -= 1000;\n  }\n  while ($number >= 900) {\n    $roman .= 'CM';\n    $number\
    \ -= 900;\n  }\n  while ($number >= 500) {\n    $roman .= 'D';\n    $number -=\
    \ 500;\n  }\n  while ($number >= 400) {\n    $roman .= 'CD';\n    $number -= 400;\n\
    \  }\n  while ($number >= 100) {\n    $roman .= 'C';\n    $number -= 100;\n  }\n\
    \  while ($number >= 90) {\n    $roman .= 'XC';\n    $number -= 90;\n  }\n  while\
    \ ($number >= 50) {\n    $roman .= 'L';\n    $number -= 50;\n  }\n  while ($number\
    \ >= 40) {\n    $roman .= 'XL';\n    $number -= 40;\n  }\n  while ($number >=\
    \ 10) {\n    $roman .= 'X';\n    $number -= 10;\n  }\n  while ($number >= 9) {\n\
    \    $roman .= 'IX';\n    $number -= 9;\n  }\n  while ($number >= 5) {\n    $roman\
    \ .= 'V';\n    $number -= 5;\n  }\n  while ($number >= 4) {\n    $roman .= 'IV';\n\
    \    $number -= 4;\n  }\n  while ($number >= 1) {\n    $roman .= 'I';\n    $number\
    \ -= 1;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_7h9d6c.php:71\n\
    Stack trace:\n#0 /tmp/tmpg_7h9d6c.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpg_7h9d6c.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return null;\n  }\n  $roman =\
    \ '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' => 500, 'CD' =>\
    \ 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' => 10, 'IX' =>\
    \ 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number > 0) {\n    $roman\
    \ .= $roman_numerals[$number % 10];\n    $number /= 10;\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23r6u4fn.php:29\n\
    Stack trace:\n#0 /tmp/tmp23r6u4fn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp23r6u4fn.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    9999 => 'cm',\n    99999 => 'd',\n    999999 => 'cm',\n    9999999\
    \ => 'cm',\n    99999999 => 'cm',\n    99999999999 => 'cm',\n    999999999999\
    \ => 'cm',\n    999999999999999 => 'cm',\n    999999999999999999 => 'cm',\n  \
    \  999999999999999999999 => 'cm',\n    9999999999999999999998 => 'cm',\n    99999999999999999999987\
    \ => 'cm',\n    9999999999999999999998765 => 'cm',\n    99999999999999999999987654\
    \ => 'cm',\n    999999999999999999999876543 => 'cm',\n    99999999999999999999987654321\
    \ => 'cm',\n    999999999999999999999876543210 => 'cm',\n    9999999999999999999998765432101\
    \ => 'cm',\n    99999999999999999999987654321010 => 'cm',\n    999999999999999999999876543210101\
    \ => 'cm',\n    9999999999999999999998765432101010 => 'cm',\n    99999999999999999999987654321010100\
    \ => 'cm',\n    999999999999999999999876543210101000 => 'cm',\n    9999999999999999999998765432101010000\
    \ => 'cm',\n    99999999999999999999987654321010100000 => 'cm',\n    9999999999999999999998765432101010000100\
    \ => 'cm',\n    99999999999999999999987654321010100001000 => 'cm',\n    999999999999999999999876543210101000010000\
    \ => 'cm',\n    9999999999999999999998765432101010000100000 => 'cm',\n    999999999999999999999876543210101000010000100\
    \ => 'cm',\n    9999999999999999999998765432101010000100001000 => 'cm',\n    99999999999999999999987654321010100001000010000\
    \ => 'cm',\n    999999999999999999999876543210101000010000100000 => 'cm',\n  \
    \  99999999999999999999987654321010100001000010000100 => 'cm',\n    999999999999999999999876543210101000010000100001000\
    \ => 'cm',\n    9999999999999999999998765432101010000100001000010000 => 'cm',\n\
    \    99999999\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpld8g5xif.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n                          'C' => 100, 'XC' => 90, 'L' =>\
    \ 50, 'XL' => 40,\n                          'X' => 10, 'IX' => 9, 'V' => 5, 'IV'\
    \ => 4, 'I' => 1);\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[floor($number\
    \ / 1000)];\n    $number %= 1000;\n  }\n  $roman .= $roman_numerals[$number];\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi849dc_.php:27\n\
    Stack trace:\n#0 /tmp/tmpmi849dc_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmi849dc_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n                          'C' => 100, 'XC' => 90, 'L' =>\
    \ 50, 'XL' => 40,\n                          'X' => 10, 'IX' => 9, 'V' => 5, 'IV'\
    \ => 4, 'I' => 1);\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[$number\
    \ % 1000];\n    $number /= 1000;\n  }\n  $roman .= $roman_numerals[$number];\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpduw6cd95.php:27\n\
    Stack trace:\n#0 /tmp/tmpduw6cd95.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpduw6cd95.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array('M' => 1000, 'CM' => 900, 'D'\
    \ => 500, 'CD' => 400,\n        'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40,\
    \ 'X' => 10, 'IX' => 9,\n        'V' => 5, 'IV' => 4, 'I' => 1);\n    foreach\
    \ ($roman_numerals as $roman => $numeral) {\n        while ($number >= $numeral)\
    \ {\n            $roman .= 'M';\n            $number -= $numeral;\n        }\n\
    \    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1pelfkh.php:28\n\
    Stack trace:\n#0 /tmp/tmpi1pelfkh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpi1pelfkh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpfu6gcsep.php:12\n\
    Stack trace:\n#0 /tmp/tmpfu6gcsep.php(19): int_to_mini_roman(19)\n#1 /tmp/tmpfu6gcsep.php(23):\
    \ candidate(19)\n#2 /tmp/tmpfu6gcsep.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpfu6gcsep.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpgr9lt1_4.php:12\nStack trace:\n#0 /tmp/tmpgr9lt1_4.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpgr9lt1_4.php(22): candidate(19)\n#2 /tmp/tmpgr9lt1_4.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgr9lt1_4.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  while ($number >= 1000) {\n    $roman .= 'M';\n    $number\
    \ -= 1000;\n  }\n  while ($number >= 900) {\n    $roman .= 'CM';\n    $number\
    \ -= 900;\n  }\n  while ($number >= 500) {\n    $roman .= 'D';\n    $number -=\
    \ 500;\n  }\n  while ($number >= 400) {\n    $roman .= 'CD';\n    $number -= 400;\n\
    \  }\n  while ($number >= 100) {\n    $roman .= 'C';\n    $number -= 100;\n  }\n\
    \  while ($number >= 90) {\n    $roman .= 'XC';\n    $number -= 90;\n  }\n  while\
    \ ($number >= 50) {\n    $roman .= 'L';\n    $number -= 50;\n  }\n  while ($number\
    \ >= 40) {\n    $roman .= 'XL';\n    $number -= 40;\n  }\n  while ($number >=\
    \ 10) {\n    $roman .= 'X';\n    $number -= 10;\n  }\n  while ($number >= 9) {\n\
    \    $roman .= 'IX';\n    $number -= 9;\n  }\n  while ($number >= 5) {\n    $roman\
    \ .= 'V';\n    $number -= 5;\n  }\n  while ($number >= 4) {\n    $roman .= 'IV';\n\
    \    $number -= 4;\n  }\n  while ($number >= 1) {\n    $roman .= 'I';\n    $number\
    \ -= 1;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8fcvec8.php:71\n\
    Stack trace:\n#0 /tmp/tmpq8fcvec8.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpq8fcvec8.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzk1txk5k.php:27\n\
    Stack trace:\n#0 /tmp/tmpzk1txk5k.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzk1txk5k.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= roman($num % 10);\n  \
    \      $num = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp32ta44iw.php:15\n\
    Stack trace:\n#0 /tmp/tmp32ta44iw.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp32ta44iw.php(26):\
    \ candidate(19)\n#2 /tmp/tmp32ta44iw.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp32ta44iw.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000000, 'L', 'LL', 'LLL', 'LLLL',\
    \ 'LLLLL', 'LLLLLL', 'LLLLLLL', 'LLLLLLLL',\n    1000000000, 'X', 'XX', 'XXX',\
    \ 'XXXX', 'XXXXX', 'XXXXXX', 'XXXXXXX', 'XXXXXXXX',\n    1000000000000, 'C', 'CC',\
    \ 'CCC', 'CCCC', 'CCCCC', 'CCCCCC', 'CCCCCCC', 'CCCCCCCC',\n    1000000000000000,\
    \ 'D', 'DD', 'DDD', 'DDDD', 'DDDDD', 'DDDDDD', 'DDDDDDD', 'DDDDDDDD',\n    1000000000000000000,\
    \ 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n  );\n\
    \  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n    if ($number >= $roman_numerals[$i]) {\n      $roman .= $roman_numerals[$i];\n\
    \      $number -= $roman_numerals[$i];\n    }\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmprkuoh50f.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxkrjv9b.php:74\n\
    Stack trace:\n#0 /tmp/tmpyxkrjv9b.php(90): test()\n#1 {main}\n  thrown in /tmp/tmpyxkrjv9b.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number%$i);\n\
    \    $number = floor($number/$i);\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpfwkh_gza.php:12\nStack trace:\n#0 /tmp/tmpfwkh_gza.php(19): int_to_mini_roman(19)\n\
    #1 /tmp/tmpfwkh_gza.php(23): candidate(19)\n#2 /tmp/tmpfwkh_gza.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfwkh_gza.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    50 => 'L',\n    100 => 'C',\n    500 => 'D',\n    1000 =>\
    \ 'M',\n    10000 => 'M'\n  );\n\n  while ($number >= 1000) {\n    $number -=\
    \ 1000;\n    $roman .= 'M';\n  }\n\n  while ($number >= 500) {\n    $number -=\
    \ 500;\n    $roman .= 'D';\n  }\n\n  while ($number >= 100) {\n    $number -=\
    \ 100;\n    $roman .= 'C';\n  }\n\n  while ($number >= 50) {\n    $number -= 50;\n\
    \    $roman .= 'L';\n  }\n\n  while ($number >= 10) {\n    $number -= 10;\n  \
    \  $roman .= 'X';\n  }\n\n  while ($number >= 5) {\n    $number -= 5;\n    $roman\
    \ .= 'V';\n  }\n\n  while ($number >= 1) {\n    $roman .= $roman_numerals[$number];\n\
    \    $number -= 1;\n  }\n\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9ggytfl.php:65\n\
    Stack trace:\n#0 /tmp/tmpv9ggytfl.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpv9ggytfl.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    9999 => 'cm',\n    10000 => 'd',\n    100000 => 'd',\n    1000000\
    \ => 'cm',\n    10000000 => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'cm',\n\
    \    10000000000 => 'd',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n\
    \    10000000000000 => 'd',\n    100000000000000 => 'd',\n    1000000000000000\
    \ => 'd',\n    10000000000000000 => 'd',\n    100000000000000000 => 'd',\n   \
    \ 1000000000000000000 => 'd',\n    10000000000000000000 => 'd',\n    100000000000000000000\
    \ => 'd',\n    1000000000000000000000 => 'd',\n    10000000000000000000000 =>\
    \ 'd',\n    100000000000000000000000 => 'd',\n    1000000000000000000000000 =>\
    \ 'd',\n    10000000000000000000000000 => 'd',\n    100000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000 => 'd',\n    10000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000 => 'd',\n    1000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000000 => 'd',\n  \
    \  100000000000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    100000000000000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    1000000000000000000\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbe9sptj0.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = $num / 10;\n    if ($remainder == 0) {\n      $roman .= $remainder;\n\
    \      break;\n    }\n    $roman .= $remainder . '-';\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdb78z4g.php:29\n\
    Stack trace:\n#0 /tmp/tmpfdb78z4g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfdb78z4g.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= roman_numeral($num % 10);\n\
    \        $num = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpaqx28pif.php:15\nStack trace:\n#0 /tmp/tmpaqx28pif.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpaqx28pif.php(26): candidate(19)\n#2 /tmp/tmpaqx28pif.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaqx28pif.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrxoonwl.php:27\n\
    Stack trace:\n#0 /tmp/tmpvrxoonwl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvrxoonwl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpelhfsvm2.php:12\n\
    Stack trace:\n#0 /tmp/tmpelhfsvm2.php(18): int_to_mini_roman(19)\n#1 /tmp/tmpelhfsvm2.php(22):\
    \ candidate(19)\n#2 /tmp/tmpelhfsvm2.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpelhfsvm2.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n                          'C' => 100, 'XC' => 90, 'L' =>\
    \ 50, 'XL' => 40,\n                          'X' => 10, 'IX' => 9, 'V' => 5, 'IV'\
    \ => 4, 'I' => 1);\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[floor($number\
    \ / 1000)];\n    $number %= 1000;\n  }\n  $roman .= $roman_numerals[$number];\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lvv9fd8.php:27\n\
    Stack trace:\n#0 /tmp/tmp4lvv9fd8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4lvv9fd8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    10 => 'iii',\n    20 => 'iv',\n    40 => 'v',\n    80 => 'vi',\n    100 =>\
    \ 'vii',\n    200 => 'viii',\n    300 => 'ix',\n    400 => 'x',\n    500 => 'xi',\n\
    \    600 => 'xii',\n    700 => 'xiii',\n    800 => 'xiv',\n    900 => 'xv',\n\
    \    1000 => 'xvi',\n    10000 => 'xvii',\n    100000 => 'xviii',\n    1000000\
    \ => 'xvix',\n    10000000 => 'xix',\n    100000000 => 'xixi',\n    1000000000\
    \ => 'xixii',\n    1000000000000 => 'xixiii',\n    10000000000000 => 'xixiv',\n\
    \    1000000000000000 => 'xixv',\n    10000000000000000 => 'xixvi',\n    100000000000000000\
    \ => 'xixvii',\n    1000000000000000000 => 'xixviii',\n    10000000000000000000\
    \ => 'xixix',\n    100000000000000000000 => 'xixixi',\n    1000000000000000000000\
    \ => 'xixixii',\n    10000000000000000000000 => 'xixixiii',\n    100000000000000000000000\
    \ => 'xixixiv',\n    1000000000000000000000000 => 'xixixvi',\n    10000000000000000000000000\
    \ => 'xixixvii',\n    100000000000000000000000000 => 'xixixviii',\n    1000000000000000000000000000\
    \ => 'xixixix',\n    10000000000000000000000000000 => 'xixixixi',\n    100000000000000000000000000000\
    \ => 'xixixixii',\n    1000000000000000000000000000000 => 'xixixixiii',\n    10000000000000000000000000000000\
    \ => 'xixixixiv',\n    100000000000000000000000000000000 => 'xixixixvi',\n   \
    \ 1000000000000000000000000000000000 => 'xixixixvii',\n    10000000000000000000000000000000000\
    \ => 'xixixixviii',\n    100000000000000000000000000000000000 => 'xixixixix',\n\
    \    1000000000000000000000000000000000000 => 'xixixixixi',\n    10000000000000000000000000000000000000\
    \ => 'xixixixixii',\n    100000000000000000000000000000000000000 => 'xixixixixiii',\n\
    \    1000000000000000000000000000000000000000 => 'xixixixixiv',\n    10000000000000000000000000000000000\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8pfio03q.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n  $roman = '';\n\
    \  for ($i = 1; $i <= $number; $i++) {\n    $roman .= roman($i);\n  }\n  return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp_0ihxwwl.php:15\n\
    Stack trace:\n#0 /tmp/tmp_0ihxwwl.php(21): int_to_mini_roman(19)\n#1 /tmp/tmp_0ihxwwl.php(25):\
    \ candidate(19)\n#2 /tmp/tmp_0ihxwwl.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp_0ihxwwl.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmksnjk2s.php:23\n\
    Stack trace:\n#0 /tmp/tmpmksnjk2s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmksnjk2s.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxjelltq.php:26\n\
    Stack trace:\n#0 /tmp/tmptxjelltq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptxjelltq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpp5zc2da_.php:13\nStack trace:\n#0 /tmp/tmpp5zc2da_.php(20): int_to_mini_roman(19)\n\
    #1 /tmp/tmpp5zc2da_.php(24): candidate(19)\n#2 /tmp/tmpp5zc2da_.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp5zc2da_.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqksp5ico.php:27\n\
    Stack trace:\n#0 /tmp/tmpqksp5ico.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqksp5ico.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    while ($num > 0) {\n        $roman\
    \ .= roman($num % 10);\n        $num = ($num - $num % 10) / 10;\n    }\n    return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpbaw46edp.php:13\n\
    Stack trace:\n#0 /tmp/tmpbaw46edp.php(20): int_to_mini_roman(19)\n#1 /tmp/tmpbaw46edp.php(24):\
    \ candidate(19)\n#2 /tmp/tmpbaw46edp.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpbaw46edp.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpn3jhxcyk.php:12\n\
    Stack trace:\n#0 /tmp/tmpn3jhxcyk.php(19): int_to_mini_roman(19)\n#1 /tmp/tmpn3jhxcyk.php(23):\
    \ candidate(19)\n#2 /tmp/tmpn3jhxcyk.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpn3jhxcyk.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp5y9gnq2l.php:12\n\
    Stack trace:\n#0 /tmp/tmp5y9gnq2l.php(19): int_to_mini_roman(19)\n#1 /tmp/tmp5y9gnq2l.php(23):\
    \ candidate(19)\n#2 /tmp/tmp5y9gnq2l.php(39): test()\n#3 {main}\n  thrown in /tmp/tmp5y9gnq2l.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme_rfsep.php:27\n\
    Stack trace:\n#0 /tmp/tmpme_rfsep.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpme_rfsep.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= int_to_roman($i);\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function int_to_roman()\
    \ in /tmp/tmp0isppkee.php:12\nStack trace:\n#0 /tmp/tmp0isppkee.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmp0isppkee.php(22): candidate(19)\n#2 /tmp/tmp0isppkee.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0isppkee.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $romans[$remainder];\n    if ($num == 0) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon0npvso.php:28\n\
    Stack trace:\n#0 /tmp/tmpon0npvso.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpon0npvso.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n  $roman = '';\n\
    \  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman($i);\n  }\n  return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpuln_0ke2.php:15\n\
    Stack trace:\n#0 /tmp/tmpuln_0ke2.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpuln_0ke2.php(25):\
    \ candidate(19)\n#2 /tmp/tmpuln_0ke2.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpuln_0ke2.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  while ($number >= 1000) {\n    $roman .= 'M';\n    $number\
    \ -= 1000;\n  }\n  while ($number >= 900) {\n    $roman .= 'CM';\n    $number\
    \ -= 900;\n  }\n  while ($number >= 500) {\n    $roman .= 'D';\n    $number -=\
    \ 500;\n  }\n  while ($number >= 400) {\n    $roman .= 'CD';\n    $number -= 400;\n\
    \  }\n  while ($number >= 100) {\n    $roman .= 'C';\n    $number -= 100;\n  }\n\
    \  while ($number >= 90) {\n    $roman .= 'XC';\n    $number -= 90;\n  }\n  while\
    \ ($number >= 50) {\n    $roman .= 'L';\n    $number -= 50;\n  }\n  while ($number\
    \ >= 40) {\n    $roman .= 'XL';\n    $number -= 40;\n  }\n  while ($number >=\
    \ 10) {\n    $roman .= 'X';\n    $number -= 10;\n  }\n  while ($number >= 9) {\n\
    \    $roman .= 'IX';\n    $number -= 9;\n  }\n  while ($number >= 5) {\n    $roman\
    \ .= 'V';\n    $number -= 5;\n  }\n  while ($number >= 4) {\n    $roman .= 'IV';\n\
    \    $number -= 4;\n  }\n  while ($number >= 1) {\n    $roman .= 'I';\n    $number\
    \ -= 1;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmueoetq2.php:71\n\
    Stack trace:\n#0 /tmp/tmpmueoetq2.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpmueoetq2.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlchjvqo.php:27\n\
    Stack trace:\n#0 /tmp/tmprlchjvqo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprlchjvqo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[$roman ? $roman_numerals[$roman] : $roman];\n\
    \    $number -= 1000;\n  }\n  $roman .= $roman_numerals[$roman ? $roman_numerals[$roman]\
    \ : $roman];\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepsawv5w.php:27\n\
    Stack trace:\n#0 /tmp/tmpepsawv5w.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpepsawv5w.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $remainder =\
    \ $num % 10;\n    $roman .= $remainder == 1 ? $remainder : 'x' . $remainder;\n\
    \    $num = ($num - $remainder) / 10;\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbw0w71oj.php:25\n\
    Stack trace:\n#0 /tmp/tmpbw0w71oj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbw0w71oj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkdzxgsq.php:25\n\
    Stack trace:\n#0 /tmp/tmpvkdzxgsq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvkdzxgsq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplw5fk1c2.php:27\n\
    Stack trace:\n#0 /tmp/tmplw5fk1c2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplw5fk1c2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpi3etas2j.php:12\nStack trace:\n#0 /tmp/tmpi3etas2j.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpi3etas2j.php(22): candidate(19)\n#2 /tmp/tmpi3etas2j.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi3etas2j.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpz4iw0qhv.php:12\nStack trace:\n#0 /tmp/tmpz4iw0qhv.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpz4iw0qhv.php(22): candidate(19)\n#2 /tmp/tmpz4iw0qhv.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz4iw0qhv.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'cm',\n    100000 => 'd',\n    1000000 => 'd',\n    10000000\
    \ => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'm',\n    10000000000 =>\
    \ 'm',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n    10000000000000\
    \ => 'cm',\n    100000000000000 => 'cm',\n    1000000000000000 => 'm',\n    10000000000000000\
    \ => 'm',\n    100000000000000000 => 'd',\n    1000000000000000000 => 'd',\n \
    \   10000000000000000000 => 'cm',\n    100000000000000000000 => 'cm',\n    1000000000000000000000\
    \ => 'm',\n    10000000000000000000000 => 'm',\n    100000000000000000000000 =>\
    \ 'd',\n    1000000000000000000000000 => 'd',\n    10000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000 => 'cm',\n    1000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000 => 'm',\n    100000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000 => 'd',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000\
    \ => 'cm',\n    1000000000000000000000000000000000000000000000000000 => 'm',\n\
    \    10000000000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000000000\
    \ => 'cm\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp707xuda8.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuvp7iul.php:27\n\
    Stack trace:\n#0 /tmp/tmpzuvp7iul.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzuvp7iul.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpja63jn_l.php:12\nStack trace:\n#0 /tmp/tmpja63jn_l.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpja63jn_l.php(22): candidate(19)\n#2 /tmp/tmpja63jn_l.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpja63jn_l.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghoc70l0.php:27\n\
    Stack trace:\n#0 /tmp/tmpghoc70l0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpghoc70l0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpl1p8yi9k.php:12\n\
    Stack trace:\n#0 /tmp/tmpl1p8yi9k.php(19): int_to_mini_roman(19)\n#1 /tmp/tmpl1p8yi9k.php(23):\
    \ candidate(19)\n#2 /tmp/tmpl1p8yi9k.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpl1p8yi9k.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmprc83wwtq.php:12\n\
    Stack trace:\n#0 /tmp/tmprc83wwtq.php(19): int_to_mini_roman(19)\n#1 /tmp/tmprc83wwtq.php(23):\
    \ candidate(19)\n#2 /tmp/tmprc83wwtq.php(39): test()\n#3 {main}\n  thrown in /tmp/tmprc83wwtq.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i]\
    \ * pow(10, $roman_numerals_length - $i - 1);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nWarning: A non-numeric value encountered in /tmp/tmpopa19zlz.php on line\
    \ 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopa19zlz.php:24\n\
    Stack trace:\n#0 /tmp/tmpopa19zlz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpopa19zlz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $num * 100 + $remainder;\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xx81u3e.php:28\n\
    Stack trace:\n#0 /tmp/tmp7xx81u3e.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7xx81u3e.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM',\n        100, 'D', 'DD', 'DDD', 'DDDD',\n        10, 'C', 'XC',\
    \ 'XL', 'L', 'LX',\n        1, 'X', 'XX', 'XXX', 'XLX', 'XCXX',\n        9, 'C',\
    \ 'C', 'C', 'C', 'CXX',\n        8, 'C', 'C', 'C', 'C', 'CX',\n        7, 'C',\
    \ 'C', 'C', 'C', 'C',\n        6, 'C', 'C', 'C', 'C', 'X',\n        5, 'C', 'C',\
    \ 'C', 'XC', 'L',\n        4, 'C', 'C', 'XC', 'L', 'L',\n        3, 'C', 'C',\
    \ 'L', 'L', 'L',\n        2, 'C', 'C', 'L', 'L', 'X',\n        1, 'C', 'C', 'L',\
    \ 'X', 'XX',\n        0, 'C', 'C', 'L', 'XX', 'XXX'\n    );\n    $roman_numerals_length\
    \ = count($roman_numerals);\n    $roman_numerals_length = min($roman_numerals_length,\
    \ $number);\n    for ($i = 0; $i < $roman_numerals_length; $i++) {\n        $roman\
    \ .= $roman_numerals[$number%$roman_numerals_length];\n        $number = floor($number/$roman_numerals_length);\n\
    \    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4wc_kblu.php:41\n\
    Stack trace:\n#0 /tmp/tmp4wc_kblu.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp4wc_kblu.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    10 => 'iii',\n    25 => 'iv',\n    50 => 'v',\n    100 => 'vi',\n    500\
    \ => 'vii',\n    1000 => 'viii',\n    9999 => 'ix',\n    1000000 => 'x'\n  );\n\
    \  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n    $roman .= $roman_numerals[$i];\n    if ($number >= $roman_numerals_length\
    \ * $i) {\n      $roman .= $roman_numerals[$number - $roman_numerals_length *\
    \ $i];\n      break;\n    }\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysq7z16t.php:39\n\
    Stack trace:\n#0 /tmp/tmpysq7z16t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpysq7z16t.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    100  => 'M',\n    500  =>\
    \ 'D',\n    1000 => 'C',\n    2000 => 'L',\n    3000  => 'X',\n    5000  => 'V',\n\
    \    10000 => 'I',\n    20000  => 'M',\n    30000  => 'D',\n    60000  => 'C',\n\
    \    70000  => 'L',\n    80000  => 'X',\n    90000  => 'V',\n    100000  => 'I',\n\
    \    1000000 => 'M',\n    10000000  => 'D',\n    100000000  => 'C',\n    1000000000\
    \  => 'L',\n    10000000000  => 'X',\n    1000000000000 => 'V',\n    10000000000000\
    \ => 'I',\n    100000000000000  => 'M',\n    1000000000000000  => 'D',\n    10000000000000000\
    \  => 'C',\n    100000000000000000  => 'L',\n    1000000000000000000  => 'X',\n\
    \    10000000000000000000 => 'V',\n    100000000000000000000 => 'I',\n    1000000000000000000000\
    \  => 'M',\n    10000000000000000000000  => 'D',\n    100000000000000000000000\
    \  => 'C',\n    1000000000000000000000000  => 'L',\n    10000000000000000000000000\
    \  => 'X',\n    100000000000000000000000000  => 'V',\n    1000000000000000000000000000\
    \ => 'I',\n    10000000000000000000000000000  => 'M',\n    100000000000000000000000000000\
    \  => 'D',\n    1000000000000000000000000000000  => 'C',\n    10000000000000000000000000000000\
    \  => 'L',\n    100000000000000000000000000000000  => 'X',\n    1000000000000000000000000000000000\
    \  => 'V',\n    1000000000000000000000000000000000  => 'I',\n    1000000000000000000000000000000000\
    \ => 'M',\n    1000000000000000000000000000000000 => 'D',\n    1000000000000000000000000000000000\
    \ => 'C',\n    1000000000000000000000000000000000 => 'L',\n    1000000000000000000000000000000000\
    \ => 'X',\n    1000000000000000000000000000000000 => 'V',\n    1000000000000000000000000000000000\
    \ => 'I',\n    1000000000000000000000000000000000 => 'M',\n    1000000000000000000000000000000000\
    \ => 'D',\n    1000000000000000000000000000000000 => 'C',\n    1000000000000000000000000000000000\
    \ => 'L',\n    1000000000000000000000000000000000 => 'X',\n    1000000000000000000000000000000000\
    \ => 'V',\n    1000000000000000000000000000000000 => 'I',\n    1000000000000000000000000000000000\
    \ => 'M',\n    1000000000000000000000000000000000 => 'D',\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpofjuko58.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    40 => 'c',\n    100 => 'l',\n    1000 => 'd',\n  );\n  foreach\
    \ ($roman_numerals as $numeral => $roman_value) {\n    if ($number >= $numeral)\
    \ {\n      $roman .= $roman_value;\n      $number -= $numeral;\n    }\n  }\n \
    \ return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjh3r04h.php:33\n\
    Stack trace:\n#0 /tmp/tmppjh3r04h.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppjh3r04h.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $roman_numerals = array(\n   \
    \     1000, 'M', 'MM', 'MMM', 'MMMM',\n        100, 'CM', 'D', 'CD', 'C', 'XC'\n\
    \    );\n    $roman_numeral_length = count($roman_numerals);\n    while ($num\
    \ > 0) {\n        $roman .= $roman_numerals[$num % $roman_numeral_length];\n \
    \       $num = (int) ($num / $roman_numeral_length);\n    }\n    return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf44w_sm.php:29\n\
    Stack trace:\n#0 /tmp/tmpbf44w_sm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbf44w_sm.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpma5tdj1x.php:12\n\
    Stack trace:\n#0 /tmp/tmpma5tdj1x.php(18): int_to_mini_roman(19)\n#1 /tmp/tmpma5tdj1x.php(22):\
    \ candidate(19)\n#2 /tmp/tmpma5tdj1x.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpma5tdj1x.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    40 => 'C',\n    100 => 'D',\n    400 => 'CD',\n    1000 =>\
    \ 'CM',\n    10000 => 'M',\n    100000 => 'MM',\n    1000000 => 'MMM',\n    10000000\
    \ => 'MMMM',\n    100000000 => 'MMMMM',\n    1000000000 => 'MMMMMM',\n    10000000000\
    \ => 'MMMMMMM',\n    100000000000 => 'MMMMMMMM',\n    1000000000000 => 'MMMMMMMMM',\n\
    \    10000000000000 => 'MMMMMMMMMM',\n    100000000000000 => 'MMMMMMMMMMM',\n\
    \    1000000000000000 => 'MMMMMMMMMMMM',\n    10000000000000000 => 'MMMMMMMMMMMMM',\n\
    \    100000000000000000 => 'MMMMMMMMMMMMMM',\n    1000000000000000000 => 'MMMMMMMMMMMMMMM',\n\
    \  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    $roman_number\
    \ = $number / $roman;\n    if ($roman_number >= 1) {\n      $roman_number -= 1;\n\
    \    }\n    $roman .= $numeral;\n    if ($roman_number > 0) {\n      $number -=\
    \ $roman_number * $roman;\n    }\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdglluj8.php:53\n\
    Stack trace:\n#0 /tmp/tmpmdglluj8.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpmdglluj8.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num += 1000;\n    while ($num\
    \ >= 1000) {\n        $roman .= 'M';\n        $num -= 1000;\n    }\n    while\
    \ ($num >= 500) {\n        $roman .= 'D';\n        $num -= 500;\n    }\n    while\
    \ ($num >= 100) {\n        $roman .= 'C';\n        $num -= 100;\n    }\n    while\
    \ ($num >= 50) {\n        $roman .= 'L';\n        $num -= 50;\n    }\n    while\
    \ ($num >= 10) {\n        $roman .= 'X';\n        $num -= 10;\n    }\n    while\
    \ ($num >= 5) {\n        $roman .= 'V';\n        $num -= 5;\n    }\n    while\
    \ ($num >= 1) {\n        $roman .= 'I';\n        $num -= 1;\n    }\n    return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzos_ger2.php:49\n\
    Stack trace:\n#0 /tmp/tmpzos_ger2.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpzos_ger2.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    10 => 'iii',\n    20 => 'iv',\n    40 => 'v',\n    80 => 'vi',\n    100 =>\
    \ 'vii',\n    200 => 'viii',\n    300 => 'ix',\n    400 => 'x',\n    500 => 'xi',\n\
    \    600 => 'xii',\n    700 => 'xiii',\n    800 => 'xiv',\n    900 => 'xv',\n\
    \    1000 => 'xvi',\n    10000 => 'xvii',\n    100000 => 'xix',\n    1000000 =>\
    \ 'xixi',\n    10000000 => 'xixii',\n    100000000 => 'xixiii',\n    1000000000\
    \ => 'xixiv',\n    10000000000 => 'xixv',\n    100000000000 => 'xixvi',\n    1000000000000\
    \ => 'xixvii',\n    10000000000000 => 'xixix',\n    100000000000000 => 'xixixi',\n\
    \    1000000000000000 => 'xixixii',\n    10000000000000000 => 'xixixiii',\n  \
    \  100000000000000000 => 'xixixiv',\n    1000000000000000000 => 'xixixv',\n  \
    \  10000000000000000000 => 'xixixvi',\n    100000000000000000000 => 'xixixvii',\n\
    \    1000000000000000000000 => 'xixixix',\n    10000000000000000000000 => 'xixixixi',\n\
    \    100000000000000000000000 => 'xixixixii',\n    1000000000000000000000000 =>\
    \ 'xixixixiii',\n    10000000000000000000000000 => 'xixixixiv',\n    100000000000000000000000000\
    \ => 'xixixixv',\n    1000000000000000000000000000 => 'xixixixvi',\n    10000000000000000000000000000\
    \ => 'xixixixvii',\n    100000000000000000000000000000 => 'xixixixix',\n    1000000000000000000000000000000\
    \ => 'xixixixixi',\n    10000000000000000000000000000000 => 'xixixixii',\n   \
    \ 100000000000000000000000000000000 => 'xixixixiii',\n    1000000000000000000000000000000000\
    \ => 'xixixixiv',\n    10000000000000000000000000000000000 => 'xixixixv',\n  \
    \  100000000000000000000000000000000000 => 'xixixixvi',\n    1000000000000000000000000000000000000\
    \ => 'xixixixvii',\n    10000000000000000000000000000000000000 => 'xixixix\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphdesygun.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97u9fezq.php:27\n\
    Stack trace:\n#0 /tmp/tmp97u9fezq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97u9fezq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmp9y1sv2f3.php:12\nStack trace:\n#0 /tmp/tmp9y1sv2f3.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmp9y1sv2f3.php(22): candidate(19)\n#2 /tmp/tmp9y1sv2f3.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9y1sv2f3.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $num * 100 + $remainder;\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pwbllr.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pwbllr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx4pwbllr.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02eopvdo.php:23\n\
    Stack trace:\n#0 /tmp/tmp02eopvdo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp02eopvdo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  for ($i = 0;\
    \ $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9ydhrey.php:23\n\
    Stack trace:\n#0 /tmp/tmps9ydhrey.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps9ydhrey.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp54j8a3hp.php:12\n\
    Stack trace:\n#0 /tmp/tmp54j8a3hp.php(18): int_to_mini_roman(19)\n#1 /tmp/tmp54j8a3hp.php(22):\
    \ candidate(19)\n#2 /tmp/tmp54j8a3hp.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp54j8a3hp.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n\n  $roman =\
    \ '';\n  for ($i = 1; $i <= $number; $i++) {\n    $roman .= roman($i);\n  }\n\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpjf205rnf.php:16\n\
    Stack trace:\n#0 /tmp/tmpjf205rnf.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpjf205rnf.php(27):\
    \ candidate(19)\n#2 /tmp/tmpjf205rnf.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpjf205rnf.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n                          'C' => 100, 'XC' => 90, 'L' =>\
    \ 50, 'XL' => 40,\n                          'X' => 10, 'IX' => 9, 'V' => 5, 'IV'\
    \ => 4, 'I' => 1);\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[floor($number\
    \ / 1000)];\n    $number %= 1000;\n  }\n  $roman .= $roman_numerals[floor($number)];\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz8gdpop.php:27\n\
    Stack trace:\n#0 /tmp/tmpbz8gdpop.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbz8gdpop.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7jws407.php:23\n\
    Stack trace:\n#0 /tmp/tmpt7jws407.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpt7jws407.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpjxaqqr9d.php:13\n\
    Stack trace:\n#0 /tmp/tmpjxaqqr9d.php(20): int_to_mini_roman(19)\n#1 /tmp/tmpjxaqqr9d.php(24):\
    \ candidate(19)\n#2 /tmp/tmpjxaqqr9d.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpjxaqqr9d.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= $num % 10;\n        $num\
    \ = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmarklxo3.php:26\n\
    Stack trace:\n#0 /tmp/tmpmarklxo3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmarklxo3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybisipej.php:27\n\
    Stack trace:\n#0 /tmp/tmpybisipej.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpybisipej.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_length = strlen($roman);\n  for ($i = 0; $i < $roman_length;\
    \ $i++) {\n    $roman .= roman_char($number % 1000);\n    $number /= 1000;\n \
    \ }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5r34vqii.php:24\n\
    Stack trace:\n#0 /tmp/tmp5r34vqii.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5r34vqii.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = ($num - $num % 10) / 10;\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpcbhvpa1f.php:13\nStack trace:\n#0 /tmp/tmpcbhvpa1f.php(20): int_to_mini_roman(19)\n\
    #1 /tmp/tmpcbhvpa1f.php(24): candidate(19)\n#2 /tmp/tmpcbhvpa1f.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcbhvpa1f.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : chr($num + 55);\n    if ($num == 0) {\n      break;\n    }\n  }\n  return\
    \ $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_s1iz13.php:28\n\
    Stack trace:\n#0 /tmp/tmp7_s1iz13.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7_s1iz13.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzedhr68g.php:27\n\
    Stack trace:\n#0 /tmp/tmpzedhr68g.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzedhr68g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkjt3o64.php:27\n\
    Stack trace:\n#0 /tmp/tmphkjt3o64.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphkjt3o64.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  $num -= $num % 10;\n  $num = $num /\
    \ 10;\n  while ($num > 0) {\n    $roman .= roman_numeral($num % 10);\n    $num\
    \ = $num / 10;\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpwl2ay4x2.php:15\nStack trace:\n#0 /tmp/tmpwl2ay4x2.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpwl2ay4x2.php(26): candidate(19)\n#2 /tmp/tmpwl2ay4x2.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwl2ay4x2.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    40 => 'C',\n    100 => 'D',\n    400 => 'CD',\n    1000 =>\
    \ 'CM',\n    10000 => 'M',\n    100000 => 'M',\n    1000000 => 'B',\n    10000000\
    \ => 'M',\n    100000000 => 'K',\n    1000000000 => 'M',\n    10000000000 => 'M',\n\
    \    100000000000 => 'G',\n    1000000000000 => 'G',\n    10000000000000 => 'G',\n\
    \    100000000000000 => 'T',\n    1000000000000000 => 'X',\n    10000000000000000\
    \ => 'P',\n    1000000000000000000 => 'M',\n  );\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n  }\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphp0z4vvy.php:46\n\
    Stack trace:\n#0 /tmp/tmphp0z4vvy.php(62): test()\n#1 {main}\n  thrown in /tmp/tmphp0z4vvy.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    10 => 'iii',\n    50 => 'iv',\n    100 => 'v',\n    500 => 'vi',\n    1000\
    \ => 'vii',\n    5000 => 'viii',\n    10000 => 'ix',\n    100000 => 'x'\n  );\n\
    \  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number >= $roman)\
    \ {\n      $number = floor($number / $roman) * $roman;\n      $roman .= $numeral;\n\
    \      break;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6hkqiiw.php:38\n\
    Stack trace:\n#0 /tmp/tmpm6hkqiiw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpm6hkqiiw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $roman = str_split($num);\n  \
    \  $roman = array_reverse($roman);\n    foreach ($roman as $key => $value) {\n\
    \        if ($value == 1) {\n            $roman[$key] = $num;\n        }\n   \
    \ }\n    return implode('', $roman);\n}\n\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswfh5tnv.php:27\n\
    Stack trace:\n#0 /tmp/tmpswfh5tnv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpswfh5tnv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= int_to_roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function int_to_roman()\
    \ in /tmp/tmphsbklaxy.php:12\nStack trace:\n#0 /tmp/tmphsbklaxy.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmphsbklaxy.php(22): candidate(19)\n#2 /tmp/tmphsbklaxy.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmphsbklaxy.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        100  => 'M',\n  \
    \      500  => 'D',\n        1000 => 'C',\n        2000 => 'L',\n        3000\
    \ => 'XL',\n        4000 => 'XC',\n        5000 => 'IX',\n        6000 => 'V',\n\
    \        7000 => 'IV',\n        8000 => 'I',\n        9000 => 'X',\n    );\n \
    \   $roman_numerals_length = count($roman_numerals);\n    $roman_numerals_length\
    \ = min($roman_numerals_length, $number);\n    for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n        $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \        $number = floor($number/$roman_numerals_length);\n    }\n    return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzd3pvb6.php:38\n\
    Stack trace:\n#0 /tmp/tmpxzd3pvb6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxzd3pvb6.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $num * 100 + $remainder;\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89ebvycg.php:28\n\
    Stack trace:\n#0 /tmp/tmp89ebvycg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp89ebvycg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length * $i) {\n      $roman .= $roman_numerals[$number\
    \ % $roman_numerals_length];\n      $number -= $roman_numerals_length * $i;\n\
    \    }\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcoi2_2b.php:28\n\
    Stack trace:\n#0 /tmp/tmpdcoi2_2b.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdcoi2_2b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ '' : $remainder == 1 ? 'i' : 'v';\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyjhyb5x.php:28\n\
    Stack trace:\n#0 /tmp/tmplyjhyb5x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplyjhyb5x.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n\n  $roman =\
    \ '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman_numeral($i);\n\
    \  }\n\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpcac1rw80.php:16\nStack trace:\n#0 /tmp/tmpcac1rw80.php(23): int_to_mini_roman(19)\n\
    #1 /tmp/tmpcac1rw80.php(27): candidate(19)\n#2 /tmp/tmpcac1rw80.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcac1rw80.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    40 => 'C',\n    100 => 'D',\n    400 => 'CD',\n    1000 =>\
    \ 'CM',\n    10000 => 'M',\n    100000 => 'M',\n    1000000 => 'B',\n    10000000\
    \ => 'B',\n    100000000 => 'B',\n    1000000000 => 'B',\n    10000000000 => 'B',\n\
    \    100000000000 => 'B',\n    1000000000000 => 'B',\n    10000000000000 => 'B',\n\
    \    100000000000000 => 'B',\n    1000000000000000 => 'B',\n    10000000000000000\
    \ => 'B',\n    100000000000000000 => 'B',\n    1000000000000000000 => 'B',\n \
    \   10000000000000000000 => 'B',\n    100000000000000000000 => 'B',\n    1000000000000000000000\
    \ => 'B',\n    10000000000000000000000 => 'B',\n    100000000000000000000000 =>\
    \ 'B',\n    1000000000000000000000000 => 'B',\n    10000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000 => 'B',\n    1000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000 => 'B',\n    100000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000 => 'B',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000000 => 'B',\n\
    \    1000000000000000000000000000000000000000000\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt3hd9f1t.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpcnksffdi.php:12\nStack trace:\n#0 /tmp/tmpcnksffdi.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpcnksffdi.php(22): candidate(19)\n#2 /tmp/tmpcnksffdi.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcnksffdi.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $roman .= $remainder == 0 ? '' : $remainder < 5 ? 'IV' : 'V';\n \
    \   $num = ($num - $remainder) / 10;\n    if ($num == 0) {\n      break;\n   \
    \ }\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrtukyov.php:28\n\
    Stack trace:\n#0 /tmp/tmpyrtukyov.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyrtukyov.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpcryj8qc2.php:13\nStack trace:\n#0 /tmp/tmpcryj8qc2.php(20): int_to_mini_roman(19)\n\
    #1 /tmp/tmpcryj8qc2.php(24): candidate(19)\n#2 /tmp/tmpcryj8qc2.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcryj8qc2.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xvi', 14 => 'xvii',\n    15 =>\
    \ 'xix', 16 => 'xx', 17 => 'xxi', 18 => 'xxii', 19 => 'xxiii', 20 => 'xxiv',\n\
    \    21 => 'xxv', 22 => 'xxvi', 23 => 'xxvii', 24 => 'xxix', 25 => 'xxx',\n  \
    \  26 => 'xxxi', 27 => 'xxxiv', 28 => 'xxxvi', 29 => 'xxxvii', 30 => 'xxxiv',\n\
    \    31 => 'xxx', 32 => 'xxxi', 33 => 'xxxii', 34 => 'xxxiii', 35 => 'xxxiv',\n\
    \    36 => 'xxxv', 37 => 'xxxvi', 38 => 'xxxvii', 39 => 'xxxix', 40 => 'xxx',\
    \ 41 => 'xxxi',\n    42 => 'xxxii', 43 => 'xxxiii', 44 => 'xxxiv', 45 => 'xxxv',\
    \ 46 => 'xxxvi', 47 => 'xxxvii',\n    48 => 'xxxix', 49 => 'xxx', 50 => 'xxxi',\
    \ 51 => 'xxxii', 52 => 'xxxiii', 53 => 'xxxiv',\n    54 => 'xxxv', 55 => 'xxxvi',\
    \ 56 => 'xxxvii', 57 => 'xxxix', 58 => 'xxx', 59 => 'xxxi',\n    60 => 'xxxii',\
    \ 61 => 'xxxiii', 62 => 'xxxiv', 63 => 'xxxv', 64 => 'xxxvi', 65 => 'xxxvii',\n\
    \    66 => 'xxxix', 67 => 'xxx', 68 => 'xxxi', 69 => 'xxxii', 70 => 'xxxiii',\
    \ 71 => 'xxxiv',\n    72 => 'xxxv', 73 => 'xxxvi', 74 => 'xxxvii', 75 => 'xxxix',\
    \ 76 => 'xxx', 77 => 'xxxi',\n    78 => 'xxxii', 79 => 'xxxiii', 80 => 'xxxiv',\
    \ 81 => 'xxxv', 82 => 'xxxvi', 83 => 'xxxvii',\n    84 => 'xxxix', 85 => 'xxx',\
    \ 86 => 'xxxi', 87 => 'xxxii', \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpszcpv9ck.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000000, 'L', 'LL', 'LLL', 'LLLL',\
    \ 'LLLLL', 'LLLLLL', 'LLLLLLL', 'LLLLLLLL',\n    1000000000, 'X', 'XX', 'XXX',\
    \ 'XXXX', 'XXXXX', 'XXXXXX', 'XXXXXXX', 'XXXXXXXX',\n    1000000000000, 'C', 'CC',\
    \ 'CCC', 'CCCC', 'CCCCC', 'CCCCCC', 'CCCCCCC', 'CCCCCCCC',\n    1000000000000000,\
    \ 'D', 'DD', 'DDD', 'DDDD', 'DDDDD', 'DDDDDD', 'DDDDDDD', 'DDDDDDDD',\n    1000000000000000000,\
    \ 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n  );\n\
    \  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n    $roman .= $roman_numerals[$i];\n    if ($number >= $roman_numerals[$i])\
    \ {\n      $number -= $roman_numerals[$i];\n      $roman .= $roman_numerals[$i];\n\
    \    }\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp_rv77hvj.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xvi', 14 => 'xvii',\n    15 =>\
    \ 'xix', 16 => 'xx', 17 => 'xxi', 18 => 'xxii', 19 => 'xxiii', 20 => 'xxiv',\n\
    \    30 => 'xxv', 40 => 'xxvi', 50 => 'xxvii', 60 => 'xxix', 70 => 'xxx',\n  \
    \  80 => 'xxxi', 90 => 'xxxii', 100 => 'xxxii', 1000 => 'xxxiii', 10000 => 'xxxiv',\n\
    \    100000 => 'xxxv', 1000000 => 'xxxvi', 10000000 => 'xxxvii', 100000000 =>\
    \ 'xxxix',\n    1000000000 => 'xxxix', 10000000000 => 'xxx', 100000000000 => 'xxxi',\
    \ 1000000000000 => 'xxxii',\n    10000000000000 => 'xxxii', 100000000000000 =>\
    \ 'xxxiii', 1000000000000000 => 'xxxiv',\n    10000000000000000 => 'xxxvi', 100000000000000000\
    \ => 'xxxvii', 1000000000000000000 => 'xxxix',\n  );\n  $roman_numerals_length\
    \ = count($roman_numerals);\n  $roman_numerals_length = min($roman_numerals_length,\
    \ count($roman_numerals));\n  for ($i = 0; $i < $roman_numerals_length; $i++)\
    \ {\n    if ($number >= $roman_numerals_length * $i && $number < $roman_numerals_length\
    \ * ($i + 1)) {\n      $roman = $roman_numerals[$i];\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1adtm12f.php:38\n\
    Stack trace:\n#0 /tmp/tmp1adtm12f.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1adtm12f.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n  $roman = '';\n\
    \  for ($i = 1; $i <= $number; $i++) {\n    $roman .= roman_numeral($i);\n  }\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmp35hyu8r3.php:15\nStack trace:\n#0 /tmp/tmp35hyu8r3.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmp35hyu8r3.php(25): candidate(19)\n#2 /tmp/tmp35hyu8r3.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp35hyu8r3.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovqh17ll.php:27\n\
    Stack trace:\n#0 /tmp/tmpovqh17ll.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpovqh17ll.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0muuqypp.php:27\n\
    Stack trace:\n#0 /tmp/tmp0muuqypp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0muuqypp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmp7qgv9rp3.php:12\nStack trace:\n#0 /tmp/tmp7qgv9rp3.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmp7qgv9rp3.php(22): candidate(19)\n#2 /tmp/tmp7qgv9rp3.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7qgv9rp3.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpz15egeer.php:13\nStack trace:\n#0 /tmp/tmpz15egeer.php(20): int_to_mini_roman(19)\n\
    #1 /tmp/tmpz15egeer.php(24): candidate(19)\n#2 /tmp/tmpz15egeer.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz15egeer.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num = ($num - $num % 10) / 10;\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpovtpfaq_.php:13\n\
    Stack trace:\n#0 /tmp/tmpovtpfaq_.php(20): int_to_mini_roman(19)\n#1 /tmp/tmpovtpfaq_.php(24):\
    \ candidate(19)\n#2 /tmp/tmpovtpfaq_.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpovtpfaq_.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    while ($number >= 1000) {\n        $roman .= 'M';\n\
    \        $number -= 1000;\n    }\n    while ($number >= 900) {\n        $roman\
    \ .= 'CM';\n        $number -= 900;\n    }\n    while ($number >= 500) {\n   \
    \     $roman .= 'D';\n        $number -= 500;\n    }\n    while ($number >= 400)\
    \ {\n        $roman .= 'CD';\n        $number -= 400;\n    }\n    while ($number\
    \ >= 100) {\n        $roman .= 'C';\n        $number -= 100;\n    }\n    while\
    \ ($number >= 90) {\n        $roman .= 'XC';\n        $number -= 90;\n    }\n\
    \    while ($number >= 50) {\n        $roman .= 'L';\n        $number -= 50;\n\
    \    }\n    while ($number >= 40) {\n        $roman .= 'XL';\n        $number\
    \ -= 40;\n    }\n    while ($number >= 10) {\n        $roman .= 'X';\n       \
    \ $number -= 10;\n    }\n    while ($number >= 9) {\n        $roman .= 'IX';\n\
    \        $number -= 9;\n    }\n    while ($number >= 5) {\n        $roman .= 'V';\n\
    \        $number -= 5;\n    }\n    while ($number >= 4) {\n        $roman .= 'IV';\n\
    \        $number -= 4;\n    }\n    while ($number >= 1) {\n        $roman .= 'I';\n\
    \        $number -= 1;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd9j6w4k.php:71\n\
    Stack trace:\n#0 /tmp/tmpfd9j6w4k.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpfd9j6w4k.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd9t2vox.php:27\n\
    Stack trace:\n#0 /tmp/tmpqd9t2vox.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqd9t2vox.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpvh51jgbb.php:13\nStack trace:\n#0 /tmp/tmpvh51jgbb.php(20): int_to_mini_roman(19)\n\
    #1 /tmp/tmpvh51jgbb.php(24): candidate(19)\n#2 /tmp/tmpvh51jgbb.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvh51jgbb.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  $i = 0;\n  while ($num > 0) {\n    $num\
    \ -= 1000;\n    $roman .= int_to_roman($i);\n    $i++;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function int_to_roman()\
    \ in /tmp/tmpb5rs12yd.php:15\nStack trace:\n#0 /tmp/tmpb5rs12yd.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpb5rs12yd.php(26): candidate(19)\n#2 /tmp/tmpb5rs12yd.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb5rs12yd.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= $num % 10;\n        $num\
    \ = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv7r7juv.php:26\n\
    Stack trace:\n#0 /tmp/tmpkv7r7juv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkv7r7juv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5boz3uhe.php:23\n\
    Stack trace:\n#0 /tmp/tmp5boz3uhe.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5boz3uhe.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8mo9ya4.php:74\n\
    Stack trace:\n#0 /tmp/tmpk8mo9ya4.php(90): test()\n#1 {main}\n  thrown in /tmp/tmpk8mo9ya4.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    9 => 'iii',\n    40 => 'cc',\n    50 => 'cdd',\n    100 => 'ccc',\n    1000\
    \ => 'cd'\n  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $roman_numerals[$roman] = $numeral;\n      break;\n    }\n\
    \  }\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number >=\
    \ $roman) {\n      $roman .= $numeral;\n      break;\n    }\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz39z58w.php:40\n\
    Stack trace:\n#0 /tmp/tmprz39z58w.php(56): test()\n#1 {main}\n  thrown in /tmp/tmprz39z58w.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    40 => 'c',\n    100 => 'd',\n    400 => 'cc',\n    1000 =>\
    \ 'ccc',\n  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $numeral) {\n      $roman = $numeral;\n      break;\n    }\n  }\n  return\
    \ $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtguxrx3.php:34\n\
    Stack trace:\n#0 /tmp/tmpgtguxrx3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgtguxrx3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  while ($number >= 1000) {\n    $roman .= 'M';\n    $number\
    \ -= 1000;\n  }\n  while ($number >= 900) {\n    $roman .= 'CM';\n    $number\
    \ -= 900;\n  }\n  while ($number >= 500) {\n    $roman .= 'D';\n    $number -=\
    \ 500;\n  }\n  while ($number >= 400) {\n    $roman .= 'CD';\n    $number -= 400;\n\
    \  }\n  while ($number >= 100) {\n    $roman .= 'C';\n    $number -= 100;\n  }\n\
    \  while ($number >= 90) {\n    $roman .= 'XC';\n    $number -= 90;\n  }\n  while\
    \ ($number >= 50) {\n    $roman .= 'L';\n    $number -= 50;\n  }\n  while ($number\
    \ >= 40) {\n    $roman .= 'XL';\n    $number -= 40;\n  }\n  while ($number >=\
    \ 10) {\n    $roman .= 'X';\n    $number -= 10;\n  }\n  while ($number >= 9) {\n\
    \    $roman .= 'IX';\n    $number -= 9;\n  }\n  while ($number >= 5) {\n    $roman\
    \ .= 'V';\n    $number -= 5;\n  }\n  while ($number >= 4) {\n    $roman .= 'IV';\n\
    \    $number -= 4;\n  }\n  while ($number >= 1) {\n    $roman .= 'I';\n    $number\
    \ -= 1;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxj1f16au.php:71\n\
    Stack trace:\n#0 /tmp/tmpxj1f16au.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpxj1f16au.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qlitx1d.php:74\n\
    Stack trace:\n#0 /tmp/tmp6qlitx1d.php(90): test()\n#1 {main}\n  thrown in /tmp/tmp6qlitx1d.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM',\n        100, 'CM', 'D', 'CD', 'C', 'XC'\n    );\n    $roman_numerals_length\
    \ = count($roman_numerals);\n    for ($i = 0; $i < $roman_numerals_length; $i++)\
    \ {\n        $roman .= $roman_numerals[$i];\n        if ($number >= $roman_numerals[$i])\
    \ {\n            $roman .= $roman_numerals[$i];\n            $number -= $roman_numerals[$i];\n\
    \        }\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmplvru74td.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvru74td.php:31\n\
    Stack trace:\n#0 /tmp/tmplvru74td.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplvru74td.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  $roman_numerals_length\
    \ = count($roman_numerals);\n  $int_length = strlen($number);\n  for ($i = 0;\
    \ $i < $int_length; $i++) {\n    $roman .= $roman_numerals[$number % $roman_numerals_length];\n\
    \    $number = floor($number / $roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqixa21qt.php:26\n\
    Stack trace:\n#0 /tmp/tmpqixa21qt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqixa21qt.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'c',\n    100000 => 'd',\n    1000000 => 'm',\n    10000000\
    \ => 'b',\n    100000000 => 'b',\n    1000000000 => 'b',\n    10000000000 => 'b',\n\
    \    100000000000 => 'b',\n    1000000000000 => 'b',\n    10000000000000 => 'b',\n\
    \    100000000000000 => 'b',\n    1000000000000000 => 'b',\n    10000000000000000\
    \ => 'b',\n    100000000000000000 => 'b',\n    1000000000000000000 => 'b',\n \
    \   10000000000000000000 => 'b',\n    100000000000000000000 => 'b',\n    1000000000000000000000\
    \ => 'b',\n    10000000000000000000000 => 'b',\n    100000000000000000000000 =>\
    \ 'b',\n    1000000000000000000000000 => 'b',\n    10000000000000000000000000\
    \ => 'b',\n    100000000000000000000000000 => 'b',\n    1000000000000000000000000000\
    \ => 'b',\n    10000000000000000000000000000 => 'b',\n    100000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000 => 'b',\n    10000000000000000000000000000000\
    \ => 'b',\n    100000000000000000000000000000000 => 'b',\n    1000000000000000000000000000000000\
    \ => 'b',\n    10000000000000000000000000000000000 => 'b',\n    100000000000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000000000 => 'b',\n    10000000000000000000000000000000000000\
    \ => 'b',\n    100000000000000000000000000000000000000 => 'b',\n    1000000000000000000000000000000000000000\
    \ => 'b',\n    10000000000000000000000000000000000000000 => 'b',\n    100000000000000000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000000000000000 => 'b',\n    10000000000000000000000000000000000000000000\
    \ => 'b',\n    100000000000000000000000000000000000000000000 => 'b',\n    1000000000000000000000000000000000000000000000\
    \ => 'b',\n    10000000000000000000000000000000000000000000000 => 'b',\n    100000000000000000000000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000000000000000000000 => 'b',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'b',\n    100000000000000000000000000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000000000000000000000000 => 'b',\n\
    \    10000000000000000000000000000000000000000000000000000 => 'b',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000000000000000000000000000 => 'b',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'b',\n    100000000000000000000000000000000000000000000000000000000\
    \ => 'b',\n    100\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp21j2holm.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $roman_nums = array(\n       \
    \ 1000, 'M', 'MM', 'MMM',\n        100, 'D', 'DD', 'DDD',\n        10, 'C', 'XC',\
    \ 'XL', 'L',\n        1, 'X', 'XX', 'XXX', 'XL',\n        5, 'L', 'XL', 'LX',\
    \ 'LXX',\n        1, 'X', 'XX', 'XXX', 'XL',\n        10, 'C', 'XC', 'XL', 'L',\n\
    \        1, 'X', 'XX', 'XXX', 'XL',\n        5, 'L', 'XL', 'LX', 'LXX',\n    \
    \    1, 'X', 'XX', 'XXX', 'XL',\n        10, 'C', 'XC', 'XL', 'L',\n        1,\
    \ 'X', 'XX', 'XXX', 'XL',\n        5, 'L', 'XL', 'LX', 'LXX',\n        1, 'X',\
    \ 'XX', 'XXX', 'XL',\n        10, 'C', 'XC', 'XL', 'L',\n        1, 'X', 'XX',\
    \ 'XXX', 'XL',\n        5, 'L', 'XL', 'LX', 'LXX',\n        1, 'X', 'XX', 'XXX',\
    \ 'XL',\n        10, 'C', 'XC', 'XL', 'L',\n        1, 'X', 'XX', 'XXX', 'XL',\n\
    \        5, 'L', 'XL', 'LX', 'LXX',\n        1, 'X', 'XX', 'XXX', 'XL',\n    \
    \    10, 'C', 'XC', 'XL', 'L',\n        1, 'X', 'XX', 'XXX', 'XL',\n        5,\
    \ 'L', 'XL', 'LX', 'LXX',\n        1, 'X', 'XX', 'XXX', 'XL',\n        10, 'C',\
    \ 'XC', 'XL', 'L',\n        1, 'X', 'XX', 'XXX', 'XL',\n        5, 'L', 'XL',\
    \ 'LX', 'LXX',\n        1, 'X', 'XX', 'XXX', 'XL',\n        10, 'C', 'XC', 'XL',\
    \ 'L',\n        1, 'X', 'XX', 'XXX', 'XL',\n        5, 'L', 'XL', 'LX', 'LXX',\n\
    \        1, 'X', 'XX', 'XXX', 'XL',\n        10, 'C', 'XC', 'XL', 'L',\n     \
    \   1, 'X', 'XX', 'XXX', 'XL',\n        5, 'L', 'XL', 'LX', 'LXX',\n        1,\
    \ 'X', 'XX', 'XXX', 'XL',\n        10, 'C', 'XC', 'XL', 'L',\n        1, 'X',\
    \ 'XX', 'XXX', 'XL',\n        5, 'L', 'XL', 'LX', 'LXX',\n        1, 'X', 'XX',\
    \ 'XXX', 'XL',\n        10, 'C', 'XC', 'XL', 'L',\n        1, 'X\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7pnaci6o.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    40 => 'C',\n    100 => 'D',\n    400 => 'CD',\n    1000 =>\
    \ 'CM',\n    10000 => 'M',\n    100000 => 'M',\n    1000000 => 'B',\n    10000000\
    \ => 'B',\n    100000000 => 'B',\n    1000000000 => 'B',\n    10000000000 => 'B',\n\
    \    100000000000 => 'B',\n    1000000000000 => 'B',\n    10000000000000 => 'B',\n\
    \    100000000000000 => 'B',\n    1000000000000000 => 'B',\n    10000000000000000\
    \ => 'B',\n    100000000000000000 => 'B',\n    1000000000000000000 => 'B',\n \
    \   10000000000000000000 => 'B',\n    100000000000000000000 => 'B',\n    1000000000000000000000\
    \ => 'B',\n    10000000000000000000000 => 'B',\n    100000000000000000000000 =>\
    \ 'B',\n    1000000000000000000000000 => 'B',\n    10000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000 => 'B',\n    1000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000 => 'B',\n    100000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000 => 'B',\n    10000000000000000000000000000000000000000000\
    \ => 'B',\n    100000000000000000000000000000000000000000000 => 'B',\n    1000000000000000000000000000000000000000000000\
    \ => 'B',\n    10000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000 => 'B',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'B',\n    100000000000000000000000000000000000000000000000000\
    \ => 'B',\n    1000000000000000000000000000000000000000000000000000 => 'B',\n\
    \    1000000000000000000000000000000000000000000\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpix7tr1_5.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n  $roman = '';\n\
    \  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman_numeral($i);\n  }\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpuspu3jlt.php:15\nStack trace:\n#0 /tmp/tmpuspu3jlt.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpuspu3jlt.php(25): candidate(19)\n#2 /tmp/tmpuspu3jlt.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuspu3jlt.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7p6s0n4.php:27\n\
    Stack trace:\n#0 /tmp/tmpy7p6s0n4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpy7p6s0n4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ '' : $remainder == 1 ? 'i' : 'v';\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b1mjpsu.php:28\n\
    Stack trace:\n#0 /tmp/tmp4b1mjpsu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4b1mjpsu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpvowxisft.php:12\nStack trace:\n#0 /tmp/tmpvowxisft.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpvowxisft.php(22): candidate(19)\n#2 /tmp/tmpvowxisft.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvowxisft.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xv', 14 => 'xvi',\n    15 =>\
    \ 'xvii', 16 => 'xix', 17 => 'xx', 18 => 'xxi', 19 => 'xxii', 20 => 'xxiii',\n\
    \    21 => 'xxiv', 22 => 'xxv', 23 => 'xxvi', 24 => 'xxvii', 25 => 'xxix', 26\
    \ => 'xxx',\n    27 => 'xxxi', 28 => 'xxxi', 29 => 'xxxiv', 30 => 'xxxv', 31 =>\
    \ 'xxxvi', 32 => 'xxxvii',\n    33 => 'xxxix', 34 => 'xxx', 35 => 'xxxii', 36\
    \ => 'xxxiii', 37 => 'xxxiv', 38 => 'xxxv',\n    39 => 'xxxvi', 40 => 'xxxvii',\
    \ 41 => 'xxxix', 42 => 'xxxx', 43 => 'xxxxi', 44 => 'xxxxii',\n    45 => 'xxxxiii',\
    \ 46 => 'xxxxiv', 47 => 'xxxxv', 48 => 'xxxxvi', 49 => 'xxxxvii',\n    50 => 'xxxxix',\
    \ 51 => 'xxxxx', 52 => 'xxxxxi', 53 => 'xxxxxx', 54 => 'xxxxxxi',\n    55 => 'xxxxxxii',\
    \ 56 => 'xxxxxxiii', 57 => 'xxxxxxiv', 58 => 'xxxxxxv', 59 => 'xxxxxxvi',\n  \
    \  60 => 'xxxxxxvii', 61 => 'xxxxxxix', 62 => 'xxxxxxx', 63 => 'xxxxxxxi', 64\
    \ => 'xxxxxxxi',\n    65 => 'xxxxxxxiv', 66 => 'xxxxxxxv', 67 => 'xxxxxxxvi',\
    \ 68 => 'xxxxxxxvii', 69 => 'xxxxxxxix',\n    70 => 'xxxxxxxx', 71 => 'xxxxxxxxi',\
    \ 72 => 'xxxxxxxxii', 73 => 'xxxxxxxxiii', 74 => 'xxxxxxxxiv',\n    75 => 'xxxxxxxxv',\
    \ 76 => 'xxxxxxxxvi', 77 => 'xxxxxxxxvii', 78 => 'xxxxxxxxix', 79 => 'xxxxxxxxx',\n\
    \    80 => 'xxxxxxxxxi', 81 => 'xxxxxxxxxx', 82 => 'xxxxxxxxxxi', 83 \nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp26xd4u86.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp0lubrtdv.php:12\n\
    Stack trace:\n#0 /tmp/tmp0lubrtdv.php(18): int_to_mini_roman(19)\n#1 /tmp/tmp0lubrtdv.php(22):\
    \ candidate(19)\n#2 /tmp/tmp0lubrtdv.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp0lubrtdv.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswnfsvgd.php:26\n\
    Stack trace:\n#0 /tmp/tmpswnfsvgd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpswnfsvgd.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral_to_int($i).roman_numeral_to_int($number%$i);\n\
    \    $number /= $i;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral_to_int()\
    \ in /tmp/tmp1i_x3004.php:12\nStack trace:\n#0 /tmp/tmp1i_x3004.php(19): int_to_mini_roman(19)\n\
    #1 /tmp/tmp1i_x3004.php(23): candidate(19)\n#2 /tmp/tmp1i_x3004.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1i_x3004.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $num * 100 + $remainder;\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpakr95l.php:28\n\
    Stack trace:\n#0 /tmp/tmpcpakr95l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcpakr95l.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'cm',\n    100000 => 'd',\n    1000000 => 'd',\n    10000000\
    \ => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'm',\n    10000000000 =>\
    \ 'm',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n    10000000000000\
    \ => 'cm',\n    100000000000000 => 'cm',\n    1000000000000000 => 'm',\n    10000000000000000\
    \ => 'm',\n    100000000000000000 => 'd',\n    1000000000000000000 => 'd',\n \
    \   10000000000000000000 => 'cm',\n    100000000000000000000 => 'cm',\n    1000000000000000000000\
    \ => 'm',\n    10000000000000000000000 => 'm',\n    100000000000000000000000 =>\
    \ 'd',\n    1000000000000000000000000 => 'd',\n    10000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000 => 'cm',\n    1000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000 => 'm',\n    100000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000 => 'd',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000\
    \ => 'cm',\n    1000000000000000000000000000000000000000000000000000 => 'm',\n\
    \    10000000000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000000000\
    \ => 'cm\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg69wrup9.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman_numeral($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpnl8j3pa5.php:12\nStack trace:\n#0 /tmp/tmpnl8j3pa5.php(18): int_to_mini_roman(19)\n\
    #1 /tmp/tmpnl8j3pa5.php(22): candidate(19)\n#2 /tmp/tmpnl8j3pa5.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnl8j3pa5.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sf4pbbf.php:27\n\
    Stack trace:\n#0 /tmp/tmp8sf4pbbf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8sf4pbbf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozkzfr_i.php:27\n\
    Stack trace:\n#0 /tmp/tmpozkzfr_i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpozkzfr_i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
