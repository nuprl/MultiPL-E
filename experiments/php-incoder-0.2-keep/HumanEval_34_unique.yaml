name: HumanEval_34_unique
language: php
prompt: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3, 5,\
  \ 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n"
tests: "function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
  \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}",
  "    return array_unique(array_map('intval', $l));\n}\n", "    $a = array();\n \
    \   foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n        $a[$e]\
    \ = 1;\n    }\n    return array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $a = array();\n    foreach ($l as $v) {\n        if (in_array($v, $a)) {\n\
    \            continue;\n        }\n        $a[$v] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (!in_array($e,\
    \ $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        $a[] = $e;\n    }\n    asort($a);\n\
    \    return $a;\n}\n", "    $a = array();\n    foreach ($l as $e) {\n        if\
    \ (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n\
    \    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l\
    \ as $e) {\n        if (in_array($e, $a)) {\n            continue;\n        }\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    return\
    \ array_unique(array_map('intval', $l));\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a =\
    \ array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "   \
    \ $a = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $a)) {\n\
    \            $a[$v] = 1;\n        }\n    }\n    return array_keys($a);\n}\n",
  "    return array_unique(array_map('intval', $l));\n}\n", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e]\
    \ = 1;\n  }\n  return array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}",
  "    return array_unique(array_map('intval', $l));\n}", "    $a = array();\n   \
    \ foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n            $a[$e]\
    \ = 1;\n        }\n    }\n    return array_keys($a);\n}", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "\t\
    $a = array();\n\tforeach ($l as $e) {\n\t\tif ($e != 0) {\n\t\t\t$a[$e] = 1;\n\
    \t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}", "    return array_unique(array_map('intval', $l));\n}\n",
  "    $a = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n\
    \            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n}\n",
  "    $a = array();\n    foreach ($l as $v) {\n        if (in_array($v, $a)) {\n\
    \            continue;\n        }\n        $a[$v] = 1;\n    }\n    return array_keys($a);\n\
    }", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n  \
    \    continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}\n", "    return array_unique(array_map('unserialize', array_map('serialize',\
    \ $l)));\n}", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n  \
    \      }\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a =\
    \ array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n      \
    \      continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=2 |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd', 'e');\n$array = array_unique($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array\
    \ = array_unique($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd', 'e');\n$array = array_unique($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array\
    \ = array_unique($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd', 'e');\n$array = array_unique($array);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array\
    \ = array_unique($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n\
    <code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd', 'e');\n$array = array_unique($array);\n</code>\n<|/ a tags=php,arrays dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n\
    $array = array_unique($array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('a', 'b', 'c', '", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a =\
    \ array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n      \
    \      continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    return array_unique(array_map('intval', $l));\n}",
  "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n\
    \    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "\t\
    $a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v]\
    \ = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a =\
    \ array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n",
  "    $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "   \
    \ $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}", "    $a = array();\n    foreach ($l as $e) {\n        if\
    \ (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}", "\t$a = array();\n\tforeach ($l as $k => $v) {\n\t\tif\
    \ ($v != \"\") {\n\t\t\t$a[$v] = $v;\n\t\t}\n\t}\n\tasort($a);\n\t$l = array_keys($a);\n\
    \treturn $l;\n}\n", "    return array_unique(array_map('intval', $l));\n}\n",
  "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    return array_unique(array_map('intval', $l));\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n\
    \    }\n    return array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a =\
    \ array();\n    foreach ($l as $v) {\n        if (in_array($v, $a)) {\n      \
    \      continue;\n        }\n        $a[$v] = 1;\n    }\n    return array_keys($a);\n\
    }", "    return array_unique(array_map('intval', $l));\n}", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}", "    $a = array();\n    foreach ($l as $e) {\n        if\
    \ (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n  \
    \  foreach ($l as $v) {\n        if (in_array($v, $a)) {\n            continue;\n\
    \        }\n        $a[$v] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    return array_unique(array_map('intval',\
    \ $l));\n}", "    return array_unique(array_map('unserialize', array_unique(array_map('serialize',\
    \ $l))));\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis was the only solution\
    \ that worked for me. Thanks!\n<|/ c |>\n<| c |>\nThis worked for me too. Thanks!\n\
    <|/ c |>\n<| c |>\nThis worked for me too. Thanks!\n<|/ c |>\n<| c |>\nThis worked\
    \ for me too. Thanks!\n<|/ c |>\n<| c |>\nThis worked for me too. Thanks!\n<|/\
    \ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd', 'e');\n$array = array_unique($array);\nsort($array);\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't work if you have objects in your array and you want\
    \ the objects to be sorted.\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ objects in your array and you want the objects to be sorted.\n<|/ c |>\n<| a\
    \ dscore=3 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\n\
    sort($array);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\n\
    sort($array);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n$array =\
    \ array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\nsort($array);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=2 |>\n<code>\n$array =\
    \ array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\nsort($array);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $array = array('a', 'b', 'c', 'd', 'e');\n$array = array_unique($array);\nsort($array);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd', 'e');\n$array = array_unique($array);\nsort($array);\n</code>\n<|/\
    \ a tags=php,arrays,sorting ", "  $a = array();\n  foreach ($l as $e) {\n    if\
    \ (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}", "    $a = array();\n    foreach ($l as $e) {\n        if\
    \ (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n\
    \    }\n    return array_keys($a);\n}", "    $a = array();\n    foreach ($l as\
    \ $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    $a =\
    \ array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n      \
    \      continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    $a\
    \ = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $a)) {\n   \
    \         $a[$v] = 1;\n        }\n    }\n    return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    return array_unique($l);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}", "    return array_unique(array_map('intval', $l));\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_unique($array);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have duplicate values in\
    \ your array. `array_unique` removes duplicate values from the array, but doesn't\
    \ preserve the original order.\n<|/ c |>\n<| c |>\nThis doesn't preserve the original\
    \ order\n<|/ c |>\n<| c |>\nThis doesn't preserve the original order\n<|/ c |>\n\
    <| c |>\nThis doesn't preserve the original order\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_unique($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't preserve the original\
    \ order\n<|/ c |>\n<| c |>\nThis doesn't preserve the original order\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array =\
    \ array_unique($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ preserve the original order\n<|/ c |>\n<| c |>\nThis doesn't preserve the original\
    \ order\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n$array = array_unique($array);\n</code>\n<|/ a tags=php,arrays ", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  return array_unique(array_map('intval', $l));\n}", "\t$a = array();\n\tforeach\
    \ ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\t\
    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n \
    \       if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n\
    \    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n  \
    \  }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as\
    \ $e) {\n        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n\
    \    }\n    return array_keys($a);\n}", "    $a = array();\n    foreach ($l as\
    \ $e) {\n        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n\
    \    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l\
    \ as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    return\
    \ array_unique(array_map('intval', $l));\n}", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n\
    \    }\n    return array_keys($a);\n}", "    $a = array();\n    foreach ($l as\
    \ $e) {\n        if (in_array($e, $a)) {\n            continue;\n        }\n \
    \       $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}", "    return array_unique(array_map('intval', $l));\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "   \
    \ $a = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n\
    \            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n}", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "    $a = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $a))\
    \ {\n            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n}\n",
  "    return array_unique(array_map('intval', $l));\n}", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e]\
    \ = 1;\n  }\n  return array_keys($a);\n}\n", "\t$s = array();\n\tforeach ($l as\
    \ $k => $v) {\n\t\tif (!in_array($v, $s)) {\n\t\t\t$s[] = $v;\n\t\t}\n\t}\n\t\
    return $s;\n}\n", "    return array_unique(array_map('intval', $l));\n}\n", " \
    \   return array_unique(array_map('intval', $l));\n}\n", "\t$a = array();\n\t\
    foreach ($l as $v) {\n\t\tif (in_array($v, $a)) continue;\n\t\t$a[] = $v;\n\t\
    }\n\treturn $a;\n}\n", "    $a = array();\n    foreach ($l as $e) {\n        $a[]\
    \ = $e;\n    }\n    return array_unique($a);\n}\n", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e]\
    \ = 1;\n  }\n  return array_keys($a);\n}\n", "    $s = array();\n    foreach ($l\
    \ as $v) {\n        if (in_array($v, $s)) {\n            continue;\n        }\n\
    \        $s[] = $v;\n    }\n    return $s;\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "\t$a = array();\n\
    \tforeach ($l as $e) {\n\t\tif (in_array($e, $a)) continue;\n\t\t$a[$e] = 1;\n\
    \t}\n\treturn array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a))\
    \ continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", "\t$a = array();\n\
    \tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t\
    }\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as\
    \ $e) {\n        if (in_array($e, $a)) {\n            continue;\n        }\n \
    \       $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    return array_unique(array_map('intval', $l));\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n            $a[$e]\
    \ = 1;\n        }\n    }\n    return array_keys($a);\n}", "\t$a = array();\n\t\
    foreach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\
    \t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (in_array($e, $a)) {\n            continue;\n        }\n     \
    \   $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "    return array_unique(array_map('intval',\
    \ $l));\n}\n", "    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $s)) {\n            $s[] = $v;\n        }\n    }\n    return $s;\n}", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "  $a = array();\n  foreach ($l\
    \ as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] =\
    \ 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l\
    \ as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $s = array();\n    foreach ($l as $k => $v) {\n        if (!isset($s[$v]))\
    \ {\n            $s[$v] = $k;\n        }\n    }\n    return $s;\n}\n", "\t$a =\
    \ array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e]\
    \ = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    return\
    \ array_unique(array_map('intval', $l));\n}", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a =\
    \ array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123);\n$arr = array_unique($arr);\nsort($arr);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if the array contains objects. In that case you\
    \ need to use array_map() instead of array_unique().\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array contains objects. In that case you need to use array_map()\
    \ instead of array_unique().\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $arr = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$arr = array_unique($arr);\nsort($arr);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if the array contains objects.\
    \ In that case you need to use array_map() instead of array_unique().\n<|/ c |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\n$arr = array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123);\n$arr = array_unique($arr);\nsort($arr);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't work if the array contains objects. In that case you need\
    \ to use array_map() instead of array_unique().\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$arr = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$arr = array_unique($arr);\n\
    sort($arr);\n</code>\n<|/ a dscore=4 |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $arr = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$arr = array_unique($arr);\nsort($arr);\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\n$arr = array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123);\n$arr = array_unique($arr);\nsort($arr);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=3 |>\n<code>\n$arr = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$arr\
    \ = array_unique($arr);\nsort($arr);\n</code>\n<|/ a tags=php,array", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }", "    return array_unique(array_map('intval', $l));\n}", "    $a = array();\n\
    \    foreach ($l as $v) {\n        if (in_array($v, $a)) {\n            continue;\n\
    \        }\n        $a[$v] = 1;\n    }\n    return array_keys($a);\n}\n", "  $a\
    \ = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n\
    \    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", "    $a = array();\n\
    \    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n  \
    \      }\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", " \
    \   $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}", "    $a = array();\n    foreach ($l as $e) {\n        if\
    \ (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}\n", "    return array_unique(array_map('intval', $l));\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    return array_unique(array_map('intval', $l));\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v]\
    \ = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "\t$a = array();\n\tforeach\
    \ ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\t\
    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n \
    \       $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    return array_unique($l);\n\
    }\n", "    return array_unique(array_map('intval', $l));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
